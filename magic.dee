/* Copyright (c) 2018 Griefer@Work                                            *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement in the product documentation would be  *
 *    appreciated but is not required.                                        *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

/* NOTE: Generate `make.sh' using:
 * $ deemon -DCONFIG_PRINTCMD magic.dee > make.sh
 */
//#define CONFIG_PRINTCMD 1

/* NOTE: This file is written to be usable with both deemon 101 and deemon 200,
 *       rather than being written purely to take advantage of deemon 200's new 
 *       features. (Just to make it a bit easier in case deemon breaks
 *       irreperable, and couldn't compile this file anymore) */

#include <file>
#include <error>
#include <fs>
#include <process>
#include <pipe>
#include <sys>
#include <util>
#include <thread>
#include <time>

local config_verbose = false;
local config_max_compilers = 8;
local config_force_compile = false;
local config_compile_single = false;
local config_format_compiler_messages = false;
local config_generate_assembly = false;
local config_generate_preprocessor = false;

local config_options = dict {
	"CROSS_PREFIX"  : "",
	"AS"            : "${CROSS_PREFIX}as",
	"CC"            : "${CROSS_PREFIX}gcc",
	"CXX"           : "${CROSS_PREFIX}g++",
	"CPP"           : "${CROSS_PREFIX}cpp",
	"AR"            : "${CROSS_PREFIX}ar",
	"LD"            : "${CROSS_PREFIX}gcc",
	"NM"            : "${CROSS_PREFIX}nm",
	"ADDR2LINE"     : "${CROSS_PREFIX}addr2line",
	"READELF"       : "${CROSS_PREFIX}readelf",
	"TARGET_ARCH"   : "",
	"TARGET_CPU"    : "${TARGET_ARCH}",
	"BUILDPATH"     : "build/${TARGET_CPU}-deemon",
	"BINPATH"       : ".",
	"MKDIR"         : "mkdir",
};



function fix_pathstring(path) {
	local pos;
	while ((pos = path.find("/..")) != -1) {
		local end = path.rfind("/",0,pos);
		if (end == -1) break;
		path = path[:end]+path[pos+3:];
	}
	return path;
}
local invert_options = list { "!", "NOT" };
local root_folder = fix_pathstring(fs.path.head(__FILE__).replace("\\","/").rstrip("/"));
fs.chdir(root_folder);

#if __has_include("util/misc/paths.dee")
#include "util/misc/paths.dee"
#endif

#ifdef __WINDOWS__
function fix_path(rel_prefix,filename) {
	if (filename.startswith("/cygdrive/")) {
		filename = filename[#"/cygdrive/":];
		local drive,none,path = filename.partition("/")...;
		filename = drive.upper()+":/"+path;
		if (filename.lower().startswith(root_folder.lower())) {
			filename = rel_prefix+filename[#root_folder:].lstrip("/\\");
		}
		rel_prefix = "";
	}
#ifdef CONFIG_CYGWIN_ROOT
	if (filename.startswith("/")) {
		filename = CONFIG_CYGWIN_ROOT+filename;
	} else
#endif /* CONFIG_CYGWIN_ROOT */
	{
		filename = rel_prefix+filename;
	}
#ifdef __WINDOWS__
	filename = filename.replace("/","\\");
#endif
	return filename;
}
#endif /* __WINDOWS__ */

#ifndef CONFIG_PRINTCMD

/* Parse arguments. */
{	local argv = list(sys.argv[1:]);
	local do_auto_target = true;
	while (argv) {
		local arg = argv.pop(0);
		switch (arg) {
		//case "--":
		//	kernel_args = argv;
		//	argv = [];
		//	break;
		case "--no-auto-target":
			do_auto_target = false;
			break;
		case "-1":
		case "--single":
			config_compile_single = true;
			break;
		case "-v":
		case "--verbose":
			config_verbose = true;
			break;
		case "--optimize":
			config_options["OPTION_OPTIMIZE"] = none;
		case "--ndebug":
			config_options["OPTION_NDEBUG"] = none;
			break;
		case "-E":
		case "--gen-pp":
			config_generate_preprocessor = true;
			break;
		case "-S":
		case "--asm":
			config_generate_assembly = true;
			break;
		case "--format-error-messages":
			config_format_compiler_messages = true;
			break;
		case "-f":
		case "--force":
			config_force_compile = true;
			break;
		//case "--build-only":
		//	config_start_qemu = false;
		//	break;
		default:
			if (!arg.startswith("-")) {
				/* Define configuration options. */
				local key,none,value = arg.partition("=")...;
				config_options[key.strip()] = value.strip();
			} else {
				print file.io.stderr: "Unknown option:",arg;
				sys.exit(1);
			}
			break;
		}
	}
	if (do_auto_target) {
		//print "HERE",repr do_auto_target;
#ifdef __WINDOWS__
		config_options["TARGET_WINDOWS"] = none;
#elif defined(__POSIX__)
		config_options["TARGET_UNIX"] = none;
#endif
	}
}
local used_options = copy config_options;

function hashof(x) {
	local result = 0;
	for (local key,item: x) {
		result = result ^ key.__hash__();
		result = result ^ item.__hash__();
	}
	return result;
}

/* Add a hash of the final configuration to the buildpath. */
config_options["BUILDPATH"] = "%s-%X" %
	(config_options["BUILDPATH"],hashof(config_options));

#else
#define PRINTCMD print output_buffer2:
local output_buffer = file.writer();
local output_buffer2 = file.writer();
#endif
function inv_option(cond) {
	for (local i: invert_options) {
		if (cond.startswith(i)) {
			return cond[#i:].strip();
		}
	}
	return "!"+cond;
}

#ifdef CONFIG_PRINTCMD
local _cond = []; /* Active conditions (in order of being added). */
local _cond_active = [];
local _cond_pushed = [];
local _cond_pending = [];
function __cond_end() {
	local disable = _cond_pushed.pop();
	if (!disable) return;
	for (local x: disable)
		_cond_active.remove(x);
	_cond_pending.append(disable);
}
function __cond_flush() {
	for (local x: _cond_pending)
		PRINTCMD "fi";
	_cond_pending.clear();
}
function __cond_begin(_cond...) {
	if (!_cond) _cond = __nth(2) _cond;
	else _cond = _cond[0];
	local required_conditions = [];
	for (local x: _cond) {
		if (x !in _cond_active) {
			required_conditions.append(x);
		}
	}
	_cond_pushed.append(required_conditions);
	if (_cond_pending && _cond_pending.back() == required_conditions) {
		_cond_pending.pop_back();
		return;
	}
	__cond_flush();
	if (!required_conditions) return;
	PRINTCMD "if ",;
	local first = true;
	for (local x: required_conditions) {
		_cond_active.append(x);
		if (!first) {
			PRINTCMD " && ",;
		}
		x = x.strip();
		if ("$" in x) {
			PRINTCMD "[[",x.strip(),"]]",;
		} else {
			first = false;
			local is_not = false;
			for (local i: invert_options) {
				if (x.startswith(i)) {
					is_not = true;
					x = x[#i:];
					break;
				}
			}
			if (is_not) {
				PRINTCMD "nopt",x.strip(),;
			} else {
				PRINTCMD "yopt",x.strip(),;
			}
		}
	}
	PRINTCMD "; then";
}
local default_options = copy config_options;
local known_options = dict();
function new_option(name) {
	local result = name;
	for (local i: invert_options) {
		if (name.startswith(i)) {
			name = name[#i:];
			break;
		}
	}
	name = name.strip();
	if (name !in known_options) {
		known_options[name] = none;
	}
	return result;
}
print output_buffer: "function yopt { [[ -v $1 ]]; return $?; }";
print output_buffer: "function nopt { if [[ -v $1 ]]; then return 1; else return 0; fi; }";
print output_buffer: "function iyopt { if [[ -v $1 ]]; then shift; echo $*; fi; }";
print output_buffer: "function inopt { if ! [[ -v $1 ]]; then shift; echo $*; fi; }";
print output_buffer: "function iexpr { if [ $1 ]; then shift; echo $*; fi; }";
print output_buffer: "function run { echo $*; $*; }";
print output_buffer: "function req { $* || exit $?; }";
print output_buffer: "case \"$(uname -s)\" in";
print output_buffer: "	*CYGWIN* | *Cygwin* | *cygwin*)";
print output_buffer: "		TARGET_WINDOWS=1";
print output_buffer: "		;;";
print output_buffer: "	*)";
print output_buffer: "		;;";
print output_buffer: "esac";
print output_buffer: "case \"$(uname -a)\" in";
print output_buffer: "	*x86_64* | *x86-64*)";
print output_buffer: "		TARGET_ARCH=x86_64";
print output_buffer: "		;;";
print output_buffer: "	*386*)";
print output_buffer: "		TARGET_ARCH=i386";
print output_buffer: "		;;";
print output_buffer: "	*486*)";
print output_buffer: "		TARGET_ARCH=i486";
print output_buffer: "		;;";
print output_buffer: "	*586*)";
print output_buffer: "		TARGET_ARCH=i586";
print output_buffer: "		;;";
print output_buffer: "	*686*)";
print output_buffer: "		TARGET_ARCH=i686";
print output_buffer: "		;;";
print output_buffer: "	*)";
print output_buffer: "		;;";
print output_buffer: "esac";
print output_buffer: "while [[ $# -gt 0 ]]; do";
print output_buffer: "	case $1 in";
print output_buffer: "		--no-auto-target)";
print output_buffer: "			unset TARGET_WINDOWS";
print output_buffer: "			unset TARGET_ARCH";
print output_buffer: "			unset TARGET_CPU";
print output_buffer: "			;;";
print output_buffer: "		-*)";
print output_buffer: "			echo \"Unrecognized option: '$1'\"";
print output_buffer: "			exit 1";
print output_buffer: "			;;";
print output_buffer: "		*)";
print output_buffer: "			echo \"Option: $1\"";
print output_buffer: "			if [[ \"$1\" == *\"=\"* ]]; then";
print output_buffer: "				export $1";
print output_buffer: "			else";
print output_buffer: "				export $1=\"\"";
print output_buffer: "			fi";
print output_buffer: "			;;";
print output_buffer: "	esac";
print output_buffer: "	shift";
print output_buffer: "done";
local exe_keys = list {
	"ASM",
	"CC",
	"CXX",
	"CPP",
	"AR",
	"LD",
	"NM",
	"ADDR2LINE",
	"READELF",
	"MKDIR",
	"MTOOLS",
	"QEMU",
	"CP",
};
local complete_options = dict();
local missing_options = copy config_options;
while (missing_options) {
	local later_options = dict();
	while (missing_options) {
		local name,exe = missing_options.front()...;
		del missing_options[name];
		local is_unresolved = false;
		if ("$" in exe) {
			local exe_copy = exe;
			while ("$" in exe_copy) {
				local start = exe_copy.index("$");
				local end = start;
				if (exe_copy[start+1] == "{") {
					end = exe_copy.index("}",start)+1;
				} else {
					do
						end = end+1;
					while (end < #exe_copy && exe_copy[end].isalnum());
				}
				local replace = exe_copy[start+1:end];
				if (replace.startswith("{"))
					replace = replace[1:#replace-1];
				if (replace !in complete_options) {
					is_unresolved = true;
					break;
				}
				exe_copy = exe_copy[:start]+exe_copy[end:];
			}
			if (is_unresolved)
				later_options[name] = exe;
		}
		if (!is_unresolved) {
			print output_buffer: "if ! [[ -v "+name+" ]]; then "+name+"=\""+
				(name in exe_keys ? "run " : "")+exe+"\"; fi";
			complete_options[name] = none;
		}
	}
	missing_options = later_options;
}
print output_buffer:;
print output_buffer: "if [[ $TARGET_ARCH == i?86 ]]; then TARGET_ARCH=\"i386\"; fi";
print output_buffer:;

#define DEFOPTAS(opt,val) __cond_begin(); PRINTCMD #opt+"="+val; __cond_end();
#define DEFOPT(opt)       __cond_begin(); PRINTCMD #opt+"=1"; __cond_end();
#define DELOPT(opt)       __cond_begin(); PRINTCMD "unset",new_option(#opt); __cond_end();
#define BASH(code)        __cond_begin(); PRINTCMD code; __cond_end();
#define IF(cond)          _cond.append(new_option(#cond)); {
#define ELSE              } _cond.append(inv_option(_cond.pop())); {
#define ELIF(cond)        } _cond.pop(); _cond.append(new_option(#cond)); {
#define FI                } _cond.pop();
function __wrap_flags(_cond,args...) {
	local result = "";
	if (_cond is none)
		_cond = __nth(2) _cond;
	for (local x: _cond) {
		if ("$" in x) {
			result = result+"$([[ "+x.strip()+" ]] && echo ";
		} else {
			local option_check = "iyopt";
			for (local i: invert_options) {
				if (x.startswith(i)) {
					option_check = "inopt";
					x = x[#i:];
					break;
				}
			}
			result = result+"$("+option_check+" \""+x.strip()+"\" ";
		}
	}
	if (result || #args > 1) {
		result = result+"\""+" ".join(args)+"\"";
	} else {
		if (#args == 1 && args[0] !is string)
			return args[0];
		result = result+" ".join(args);
	}
	return result+")"*#_cond;
}
function __wrap_source_flags(proj,args...) {
	local source_cond = copy _cond;
	if (proj !is none) {
		for (local x: proj.m_conditions)
			source_cond.remove(x);
	}
	return __wrap_flags(source_cond,args...);
}
#else
#define BASH(code)  /* nothing */
#define __wrap_flags(cond,...)        __VA_ARGS__
#define __wrap_source_flags(proj,...) __VA_ARGS__
#define DEFOPTAS(opt,val) used_options[#opt] = none; config_options[#opt] = val;
#define DEFOPT(opt)       used_options[#opt] = none; config_options[#opt] = none;
#define DELOPT(opt)       used_options[#opt] = none; config_options.pop(#opt);
#define IF(cond)          if (has_option(#cond)) {
#define ELSE              } else {
#define ELIF(cond)        } else if (has_option(#cond)) {
#define FI                }
#endif

/* Flag control. */
#define P_FLAGS(...) _p_flags.append(expand_all_options(__wrap_source_flags(_proj,__VA_ARGS__)));
#define C_FLAGS(...) _c_flags.append(expand_all_options(__wrap_source_flags(_proj,__VA_ARGS__)));
#define L_FLAGS(...) _l_flags.append(expand_all_options(__wrap_flags(none,__VA_ARGS__)));

/* Scope control */
#define BEGIN { local _p_flags = copy __nth(2) _p_flags; \
                local _c_flags = copy __nth(2) _c_flags; \
                local _l_flags = copy __nth(2) _l_flags;
#define END   }

#define FILES(x)         files(x,__FILE__)
function files(text,def_file) {
	if (text is list) {
		for (local e: text)
			yield files(e,def_file)...;
	} else {
		if (text.startswith("$")) {
		} else if (text && text.startswith("/")) {
			text = text[1:];
		} else {
			text = fs.path.rel(fs.path.abs(text,
			                   fs.path.head(def_file)),
			                   root_folder);
		}
		text = text.replace("\\","/");
		if ("*" in text) {
			if ("$" in text) {
				throw Error("Configure options cannot be used with wildcards");
			}
			try {
				local head = fs.path.head(text);
				for (local q: fs.query(text)) {
					yield head+q;
				}
			} catch (...) {
			}
		} else {
			yield text;
		}
	}
}


local existing_folders = dict();
#ifdef CONFIG_PRINTCMD
local required_paths = [];
#endif
#define CREATE_FOLDER(path) \
	create_folder(expand_all_options(FILES(path)[0]));
function create_folder(path) {
	path = fs.path.abs(path,root_folder);
#ifdef __WINDOWS__
	path = path.replace("\\","/");
#endif
	path = path.rstrip("/");
	if (#path <= #root_folder || path in existing_folders)
		return;
#ifndef CONFIG_PRINTCMD
	if (!fs.exists(path))
#endif
	{
		if ("/" in path) {
			create_folder(path.rpartition("/")[0]);
		}
#ifdef CONFIG_PRINTCMD
		required_paths.append(fs.path.rel(path,root_folder));
#else
		try fs::mkdir(path);
		catch (...) {
		}
#endif
	}
	existing_folders[path] = none;
}
function create_folder_for(filename) {
	create_folder(fs.path.head(filename).rstrip("/\\"));
}

#ifdef CONFIG_PRINTCMD
#define expand_all_options(...) __VA_ARGS__
#define expand_options(text)    text
#define sync_all_processes()    none
#else
function expand_options(text) {
#if 1
	while ("$" in text) {
		local start = text.index("$");
		local end = start;
		if (text[start+1] == "{") {
			end = text.index("}",start)+1;
		} else {
			do
				end = end+1;
			while (end < #text &&
				(text[end].isalnum() ||
				 text[end] in ["_"]));
		}
		local replace = text[start+1:end];
		if (replace.startswith("{"))
			replace = replace[1:#replace-1];
		replace = config_options[replace];
		text = text[:start]+replace+text[end:];
	}
#endif
	return text;
}

function eval_istrue(cond) {
	if (cond is string)
		return cond.lower() in ["1","yes","true","on"];
	return !!cond;
}
#if __DEEMON__ >= 200
global eval_expr_land;
#else
function eval_expr_land;
#endif
function eval_expr_unary(cond) {
	cond = cond.strip();
	if (cond.startswith("(")) {
		local end = 1;
		local recursion = 1;
		while (end < #cond) {
			local ch = cond[end];
			if (ch == "(") recursion = recursion + 1;
			else if (ch == ")") {
				recursion = recursion - 1;
				if (!recursion)
					break;
			}
			end = end + 1;
		}
		if (end != #cond-1)
			throw "Invalid position of closing parenthesis (in "+repr(cond)+")";
		return eval_expr_land(cond[1:end]);
	}
	return cond;
}
function eval_expr_compare(cond) {
	cond = cond.strip();
	if (cond.startswith("("))
		return eval_expr_unary(cond);
	if ("=" !in cond)
		return eval_expr_unary(cond);
	local a,op,b = cond.partition("=")...;
	if (a.endswith("!")) {
		op = "!"+op;
		a = a[:#a-1];
	}
	if (b.startswith("=")) {
		op = op+"=";
		b = b[1:];
	}
	a = expand_options(a.strip()).strip();
	b = expand_options(b.strip()).strip();
	if (a is string && b is string) {
		if (op == "!=")
			return !a.wmatch(b) && !b.wmatch(a);
		return a.wmatch(b) || b.wmatch(a);
	} else {
		a = eval_istrue(a);
		b = eval_istrue(b);
		if (op == "!=")
			return a != b;
		return a == b;
	}
}

function eval_expr_lor(cond) {
	if ("||" !in cond)
		return eval_expr_compare(cond);
	if (cond.startswith("("))
		return eval_expr_unary(cond);
	local a,none,b = cond.partition("||")...;
	return eval_expr_compare(a) || eval_expr_compare(b);
}

function eval_expr_land(cond) {
	if ("&&" !in cond)
		return eval_expr_lor(cond);
	if (cond.startswith("("))
		return eval_expr_unary(cond);
	local a,none,b = cond.partition("&&")...;
	return eval_expr_lor(a) || eval_expr_lor(b);
}

function has_option(cond) {
	cond = cond.strip();
	if ("$" in cond)
		return eval_istrue(eval_expr_land(expand_options(cond)));
	for (local i: invert_options) {
		if (cond.startswith(i)) {
			return cond[#i:].strip() !in config_options;
		}
	}
	cond = cond.strip();
	used_options[cond] = none;
	return cond in config_options;
}
#define expand_all_options(args) expand_all_options_impl(args)...
function expand_all_options_impl(args...) {
#if 0
	return args;
#else
	for (local a: args)
		yield expand_options(a);
#endif
}
local _mtime_cache = dict {};
global _mtime_change_year = 9999;
function set_file_changed(filename) {
#ifdef __WINDOWS__
	filename = fs::path::abs(filename,root_folder).replace("/","\\");
#else
	filename = fs::path::abs(filename,root_folder);
#endif
	_mtime_cache[filename] = time.years(_mtime_change_year++);
}
function unset_file_changed(filename) {
#ifdef __WINDOWS__
	filename = fs::path::abs(filename,root_folder).replace("/","\\");
#else
	filename = fs::path::abs(filename,root_folder);
#endif
	_mtime_cache[filename] = time(1);
}
function fast_getmtime(filename) {
	local result;
#ifdef __WINDOWS__
	filename = fs::path::abs(filename,root_folder);
	filename = filename.replace("/","\\");
#ifdef CONFIG_CYGWIN_ROOT
	if (filename.startswith(CONFIG_CYGWIN_ROOT))
		return time.years(0);
#endif
	try return _mtime_cache[filename]; catch (...);
	try result = fs::getmtime(filename);
	catch (...) result = fs::getmtime(filename+".exe");
#else
	filename = fs::path::abs(filename,root_folder);
	try return _mtime_cache[filename]; catch (...);
	result = fs::getmtime(filename);
#endif
	_mtime_cache[filename] = result;
	return result;
}
local print_lock = mutex();
local running_processes = [];
#define SYNC_PRINT(...) \
	({	print_lock.acquire(); \
		try { \
			print __VA_ARGS__; \
		} finally { \
			print_lock.release(); \
		} \
	})
function sync_all_processes() {
	while (#running_processes)
		thread.sleep(1);
}
function fix_binutils(filename) {
	local start = filename.rfind("/binutils/");
	if (start != -1) {
		filename = fix_pathstring(filename[start:]);
		filename = "${ROOT}"+filename;
	}
	return filename;
}
function start_process(proj,proc,sync,after_done) {
	local compiler_out_read,compiler_out_write = none...;
	if (config_format_compiler_messages) {
		compiler_out_read,compiler_out_write = pipe.new()...;
		proc.stdout = compiler_out_write;
		proc.stderr = compiler_out_write;
	}
	if (config_verbose) {
		print "PROCESS:",proc.exe," ".join(proc.argv);
	}
	proc.start();
	compiler_out_write.close();
	while (#running_processes > config_max_compilers)
		thread.sleep(1);
	running_processes.append(proc);
	local t = thread([]{
		try {
			if (config_format_compiler_messages) {
				for (local line: compiler_out_read) {
					local filename,lno,col,rest;
					try {
						try filename,lno,col,rest = line.scanf("%[^:]:%[^:]:%[^:]:%[^]")...;
						catch (...) {
							filename,lno,col,rest = line.scanf("%[^(](%[^,],%[^)])%[^]")...;
						}
						if (filename.endswith("/ld") || filename.endswith("-ld")) {
							rest = "{} ({})".format({ rest.strip(),repr fix_binutils(filename.strip()) });
							filename = lno;
							lno = col;
							col = none;
						}
#ifdef __WINDOWS__
						if (lno.startswith("/cygdrive/")) {
							local a,none,b = lno[#"/cygdrive/":].partition("/")...;
							SYNC_PRINT("{}:\\{}({}) : error : <{}> : {} ({})".format({
								a.upper(),b.replace("/","\\"),col,proj.m_name,
								rest,filename
							}));
							continue;
						}
#endif
					} catch (...) try {
						filename,lno,rest = line.scanf("%[^:]:%[^:]:%[^]")...;
						col = none;
					} catch (...) try {
						filename,lno,rest = line.scanf("%[^(](%[^)])%[^]")...;
						col = none;
					} catch (...) try {
						filename,lno,rest = line.scanf("%[^:]:%[^,]%[^]")...;
						col = none;
					} catch (...) {
						SYNC_PRINT(line,);
						continue;
					}
					if (!lno.isdigit()) {
						if (filename.endswith("/ld") || filename.endswith("-ld")) {
							rest = "{} ({})".format({ rest.strip(),repr fix_binutils(filename.strip()) });
							filename = lno;
							lno      = "0";
							if (" " in filename && "/" !in filename) {
								rest     = filename.strip()+": "+rest.strip();
								try {
									filename = proj.m_output;
								} catch (...) {
									filename = "";
								}
							}
						} else {
							SYNC_PRINT(line,);
							continue;
						}
					}
					filename = filename.strip();
					rest = rest.strip();
					local inc_prefix = "In file included from ";
					local frm_prefix = "from ";
					if (filename.startswith(inc_prefix)) {
						rest = "warning : "+inc_prefix+"here "+rest;
						filename = filename[#inc_prefix:];
					}
					if (filename.startswith(frm_prefix)) {
						rest = "warning : "+inc_prefix+"here "+rest;
						filename = filename[#frm_prefix:];
					}
#ifdef __WINDOWS__
					filename = fix_path("../",filename);
#endif /* __WINDOWS__ */
					local msg_class = "warning";
					if (col && !col.isdigit()) {
						rest = col.strip()+" : "+rest.strip();
						col = "";
					}
					if (rest.startswith("note")) {
						rest = rest[#"note":];
					} else if (rest.startswith("warning")) {
						rest = rest[#"warning":];
					} else if (rest.startswith("error")) {
						rest = rest[#"error":];
						msg_class = "error";
					} else {
						if (rest.startswith("multiple definition of"))
							msg_class = "error";
					}
					rest = rest.strip(" :\t\r\n");
					if (col) {
						SYNC_PRINT("{}({},{}) : {} : <{}> : {}".format({
							filename,lno,col,msg_class,proj.m_name,rest
						}));
					} else {
						SYNC_PRINT("{}({}) : {} : <{}> : {}".format({
							filename,lno,msg_class,proj.m_name,rest
						}));
					}
				}
			}
			local error = proc.join();
			/* Perform post-link steps. */
			after_done(proj);
			/* remove may fail sporadically in an SMP environment... (sorry about that) */
			while (!running_processes.remove(proc));
			if (error != 0) {
				if (sync) throw error;
				print "Process failed:",repr proc.cmd;
				sys.exit(error);
			}
		} catch (e...) {
			if (sync) throw;
			print "Process failed:",e;
			print repr proc.cmd;
			sys.exit(1);
		}
	});
	t.start();
	if (config_compile_single || sync)
		t.join();
}
#endif

function run_cmd(proj,exe,args,after_done,sync...) {
#ifdef CONFIG_PRINTCMD
	assert exe is string;
	assert exe != "__anonymous__";
	PRINTCMD "req",exe,args...;
	after_done(proj);
#else
	sync = sync ? sync[0] : false;
	exe = expand_options(exe);
	local proc = process(exe,args);
	start_process(proj,proc,sync,after_done);
#endif
}


#define PRERUN_BEGIN         _proj.m_prerun.append([](_proj){
#define PRERUN_END           });
#define POSTLINK_BEGIN       _proj.m_postlink.append([](_proj){
#define POSTLINK_END         });
#ifndef CONFIG_PRINTCMD
#define COMMAND(exe,args...) run_user_cmd(_proj,exe,[args]);
#define OPTIONAL_COMMAND(exe,args...) run_optional_user_cmd(_proj,exe,[args]);
function run_user_cmd(proj,exe,args) {
	SYNC_PRINT("["+proj.m_name+"] Command:",exe,args...);
	exe = expand_options(exe);
	args = list(for (local x: args) expand_options(x));
	run_cmd(proj,exe,args,none,true);
}
function run_optional_user_cmd(proj,exe,args) {
	SYNC_PRINT("["+proj.m_name+"] Command:",exe,args...);
	exe = expand_options(exe);
	args = list(for (local x: args) expand_options(x));
	try {
		run_cmd(proj,exe,args,none,true);
	} catch (Error.ThreadCrash) {
	}
}
#else
#define COMMAND(exe,args...) run_user_cmd(_proj,exe,[args]);
#define OPTIONAL_COMMAND(exe,args...) run_optional_user_cmd(_proj,exe,[args]);
function run_user_cmd(_proj,exe,args) {
	__cond_flush();
	run_cmd(_proj,exe,args,none,true);
}
function run_optional_user_cmd(_proj,exe,args) {
	__cond_flush();
	assert exe is string;
	assert exe != "__anonymous__";
	PRINTCMD exe,args...;
}
#endif

#define PROGRAM   [](_proj,argv)

function get_pp_filename(filename) {
	if (!config_generate_preprocessor) {
		if (filename.endswith(".S"))
			return filename[:#filename-2]+".s";
		if (filename.endswith(".c"))
			return filename;
	}
	return filename+".E";
}

class Preprocessed
#if __DEEMON__ >= 200
	: OldUserClass from d200
#endif
{
	this(filename) {
		this.m_file = filename;
#ifdef CONFIG_PRINTCMD
		this.m_conditions = copy _cond;
#endif
	}

#define PREPROCESS_NAME(filename) \
	get_pp_filename("${BUILDPATH}/"+_proj.m_name+"/"+FILES(filename)[0].replace("/","."))
	__buildfile() {
		return "${BUILDPATH}/"+this.m_proj.m_name+"/"+this.m_file.replace("/",".");
	}
	depfile() -> this.__buildfile()+".mf";
	ppfile()  -> get_pp_filename(this.__buildfile());

	compile() {
		local output = this.ppfile();
		local input_filename = this.m_file;
#ifdef CONFIG_PRINTCMD
		__cond_begin(this.m_conditions);
#else
		output = expand_options(output).lstrip("/");
		input_filename = expand_options(input_filename).lstrip("/");
		local depfil = expand_options(this.depfile()).lstrip("/");
		if (!config_force_compile) try {
			local obj_mtime = fast_getmtime(output);
			local text = file.open(depfil).read();
			local must_compile = false;
			text = text.replace("\r\n","\n").replace("\r","\n");
			text = text.replace("\\\n","").replace("\n"," ");
			text = text.partition(":")[2];
			for (local part: text.split(" ")) {
				if (part) {
#ifdef __WINDOWS__
					part = fix_path("",part);
#endif /* __WINDOWS__ */
					if (fast_getmtime(part) > obj_mtime) {
						must_compile = true;
						break;
					}
				}
			}
			if (!must_compile)
				return false;
		} catch (...) {
		}
		create_folder_for(depfil);
#endif
		create_folder_for(output);
		local pp = this.m_preprocessor;
		if (pp is none)
			pp = "${CC}";
		local pp_flags = copy this.m_pflags;
#ifndef CONFIG_PRINTCMD
		pp_flags.extend(["-MMD","-MF",depfil]);
#endif
		pp_flags.extend(["-o",output,input_filename]);
#ifndef CONFIG_PRINTCMD
		SYNC_PRINT("["+this.m_proj.m_name+"] Proprocessing",repr input_filename);
#endif
		if (pp is string) {
			run_cmd(this.m_proj,pp,pp_flags,none,true);
		} else {
			pp(this.m_preprocessed,pp_flags);
		}
#ifdef CONFIG_PRINTCMD
		__cond_end();
#endif
		return true;
	}
};

class Source
#if __DEEMON__ >= 200
	: OldUserClass from d200
#endif
{
	this(filename) {
		this.m_file = filename;
#ifdef CONFIG_PRINTCMD
		this.m_conditions = copy _cond;
#endif
	}

	__buildfile() {
		return "${BUILDPATH}/"+this.m_proj.m_name+"/"+this.m_file.replace("/",".");
	}
	depfile() -> this.__buildfile()+".mf";
	objfile() -> this.__buildfile()+".o";
	ppfile()  -> get_pp_filename(this.__buildfile());
	asmfile() -> this.__buildfile()+".S";

	compile() {
		local cc_flags = copy this.m_cflags;
		local output = config_generate_assembly ? this.asmfile() :
		               config_generate_preprocessor ? this.ppfile() : this.objfile();
		local input_filename = this.m_file;
#ifdef CONFIG_PRINTCMD
		__cond_begin(this.m_conditions);
#else
		output = expand_options(output).lstrip("/");
		input_filename = expand_options(input_filename).lstrip("/");
		local depfil = expand_options(this.depfile()).lstrip("/");
		if (!config_force_compile) try {
			local obj_mtime = fast_getmtime(output);
			local text = file.open(depfil).read();
			local must_compile = false;
			text = text.replace("\r\n","\n").replace("\r","\n");
			text = text.replace("\\\n","").replace("\n"," ");
			text = text.partition(":")[2];
			for (local part: text.split(" ")) {
				if (part) {
#ifdef __WINDOWS__
					part = fix_path("",part);
#endif /* __WINDOWS__ */
					if (fast_getmtime(part) > obj_mtime) {
						must_compile = true;
						break;
					}
				}
			}
			if (!must_compile)
				return false;
		} catch (...) {
		}
		create_folder_for(depfil);
#endif
		create_folder_for(output);
		local compiler = this.m_compiler;
		if (compiler is none)
			compiler = "${CC}";
		if (this.m_preprocessor is none) {
#ifndef CONFIG_PRINTCMD
			cc_flags.extend(["-MMD","-MF",depfil]);
#endif
			cc_flags.extend(this.m_pflags);
			if (config_generate_preprocessor)
				cc_flags.append("-E");
		} else {
			local pp_flags = copy this.m_pflags;
			local pp_outfile = this.ppfile();
#ifndef CONFIG_PRINTCMD
			pp_outfile = expand_options(pp_outfile).lstrip("/");
			pp_flags.extend(["-MMD","-MF",depfil]);
#endif
			pp_flags.extend(["-o",pp_outfile,input_filename]);
#ifndef CONFIG_PRINTCMD
			SYNC_PRINT("["+this.m_proj.m_name+"] Proprocessing",repr input_filename);
#endif
			if (this.m_preprocessor is string) {
				run_cmd(this.m_proj,this.m_preprocessor,pp_flags,none,true);
			} else {
				this.m_preprocessor(this.m_proj,pp_flags);
			}
			input_filename = pp_outfile;
		}
		if (config_generate_assembly) {
			if (input_filename.endswith(".S")) {
				cc_flags.append("-E");
			} else {
				cc_flags.append("-S");
			}
		} else if (!config_generate_preprocessor) {
			cc_flags.append("-c");
		}
		cc_flags.extend(["-o",output,input_filename]);
#ifndef CONFIG_PRINTCMD
		SYNC_PRINT("["+this.m_proj.m_name+"] Compiling",repr input_filename);
#endif
		if (compiler is string) {
			run_cmd(this.m_proj,compiler,cc_flags,none);
		} else {
			compiler(this.m_proj,cc_flags);
		}
#ifdef CONFIG_PRINTCMD
		__cond_end();
#else
		set_file_changed(output);
#endif
		return true;
	}
};


local project_map = dict();
class Project
#if __DEEMON__ >= 200
	: OldUserClass from d200
#endif
{
#define PROJECT(name) \
	local _proj = Project(name); \
	_proj.m_lflags = _l_flags; \
	_proj.m_linker = _linker;
#define PROJDEP(dep)      _proj.m_deps.append(dep);
#define WEAK_PROJDEP(dep) _proj.m_deps_weak.append(dep);
#define PROJ_DEP(dep)     PROJDEP(dep)
	this(name) {
		if (name in project_map) {
			throw Error("Project "+name+" already exists");
		}
		project_map[name] = this;
		this.m_name = name;
		this.m_deps = [];
		this.m_deps_weak = [];
		this.m_sources = [];
		this.m_objects = [];
		this.m_preprocessed = [];
		this.m_compiling = false;
		this.m_compiled = false;
		this.m_changed = false;
		this.m_prerun = [];
		this.m_postlink = [];
		this.m_output = name;
#ifdef CONFIG_PRINTCMD
		/* List of conditions required by this project */
		this.m_conditions = copy _cond;
#define SET_OUTPUT(x) _proj.m_output = FILES(x)[0]; L_FLAGS("-o",FILES(x)[0]);
#else
#define SET_OUTPUT(x) _proj.m_output = FILES(x)[0];
#endif
	}

#define OBJECT(filename) \
	_proj.add_objects(expand_all_options(__wrap_flags(none,FILES(filename)...)));
	add_objects(files...) {
		this.m_objects.extend(files);
	}
#define SOURCE(filename) \
	_proj.add_sources(_p_flags,_c_flags,_preprocessor,_compiler,FILES(filename));
	add_sources(p_flags,c_flags,preprocessor,compiler,files) {
		p_flags = copy p_flags;
		c_flags = copy c_flags;
		for (local f: files) {
			local src = Source(f);
			src.m_pflags = p_flags;
			src.m_cflags = c_flags;
			src.m_preprocessor = preprocessor;
			src.m_compiler = compiler;
			src.m_proj = this;
			this.m_sources.append(src);
		}
	}
#define PREPROCESS(filename) \
	_proj.add_preprocess(_p_flags,_c_flags,_preprocessor,_compiler,FILES(filename));
	add_preprocess(p_flags,c_flags,preprocessor,compiler,files) {
		p_flags = copy p_flags;
		c_flags = copy c_flags;
		if (preprocessor is none)
			preprocessor = "${CPP}";
		for (local f: files) {
			local src = Preprocessed(f);
			src.m_pflags = p_flags;
			src.m_cflags = c_flags;
			src.m_preprocessor = preprocessor;
			src.m_proj = this;
			this.m_preprocessed.append(src);
		}
	}

	operator str() {
		return this.m_name;
	}

	compile() {
		local did_change = false;
#ifdef CONFIG_PRINTCMD
		__cond_flush();
#endif
		if (this.m_compiled)
			return this.m_changed;
		if (this.m_compiling) {
			throw Error("Project dependency loop");
		}
		this.m_compiling = true;
		/* Compile dependencies first. */
		for (local dep: this.m_deps) {
			dep = project_map[dep];
			if (dep.compile())
				did_change = true;
		}
		for (local dep: this.m_deps_weak) {
			dep = project_map[dep];
			/* Don't force recompile for weak dependencies. */
			dep.compile();
		}
		sync_all_processes();
#ifdef CONFIG_PRINTCMD
		PRINTCMD "\n# Project:",this.m_name;
		__cond_begin(this.m_conditions);
#endif
		for (local f: this.m_prerun) {
			if (f(this))
				did_change = true;
		}
		for (local src: this.m_sources) {
			if (src.compile())
				did_change = true;
		}
		for (local pp: this.m_preprocessed) {
			if (pp.compile())
				did_change = true;
		}
		sync_all_processes();
		if (config_generate_assembly || config_generate_preprocessor) {
			this.m_changed = did_change;
		} else {
#ifndef CONFIG_PRINTCMD
			local output = this.m_output;
			output = expand_options(output).lstrip("/");
			if (!fs.exists(output))
				did_change = true;
#endif
			this.m_changed = did_change;
			if (did_change || config_force_compile) {
				local linker = this.m_linker;
				local link_args = copy this.m_lflags;
				if (linker is none)
					linker = "${LD}";
#ifndef CONFIG_PRINTCMD
				create_folder_for(output);
				link_args.extend(["-o",output]);
#endif
				for (local s: this.m_sources) {
#ifdef CONFIG_PRINTCMD
					link_args.append(__wrap_flags(s.m_conditions,s.objfile()));
#else
					link_args.append(expand_options(s.objfile()).lstrip("/"));
#endif
				}
				link_args.extend(this.m_objects);
				/* Fix linker argument order. */
				local back_args = [];
				for (;;) {
					local new_arg = none;
					for (local i,x: util.enumerate(link_args)) {
						if (x.startswith("-l")
#ifdef CONFIG_PRINTCMD /* For conditional library dependencies */
						    || "\"-l" in x
#endif
						    ) {
							new_arg = x;
							link_args.pop(i);
							break;
						}
					}
					if (new_arg is none)
						break;
					back_args.append(new_arg);
				}
				/* Add the arguments back to the commandline. */
				link_args.extend(back_args);
#ifndef CONFIG_PRINTCMD
				SYNC_PRINT("["+this.m_name+"] Linking",repr output);
				set_file_changed(output);
#endif
				if (linker is string) {
					run_cmd(this,linker,link_args,[](proj) {
						for (local f: proj.m_postlink) {
							if (f(proj)) {
								proj.m_compiled = false;
#ifndef CONFIG_PRINTCMD
								unset_file_changed(output);
#endif
							}
						}
					});
				} else {
					linker(this,link_args);
					for (local f: this.m_postlink) {
						if (f(this)) {
							this.m_compiled = false;
#ifndef CONFIG_PRINTCMD
								unset_file_changed(output);
#endif
						}
					}
				}
			}
		}
#ifdef CONFIG_PRINTCMD
		__cond_end();
#endif
		this.m_compiling = false;
		this.m_compiled = true;
		return did_change;
	}

};


try {
{
	local _c_flags = []; /* Active compiler flags. */
	local _p_flags = []; /* Active preprocessor flags. */
	local _l_flags = []; /* Active linker flags. */
	local _proj = none;
#define SET_PREPROCESSOR(x) local _preprocessor = __wrap_source_flags(_proj,x);
#define SET_COMPILER(x)     local _compiler = __wrap_source_flags(_proj,x);
#define SET_LINKER(x)       local _linker = __wrap_flags(none,x);
	local _preprocessor = none;
	local _compiler = none;
	local _linker = none;
#define MAGIC2 /* Indicate new version of magic. */
#include ".sources"
}

/* Compile all projects */
for (;;) {
	local changed = false;
	for (local none,proj: project_map) {
		if (proj.compile())
			changed = true;
	}
	sync_all_processes();
	/* Do a second pass to deal with postlink modifications. */
	for (local none,proj: project_map) proj.m_changed = false;
	for (local none,proj: project_map) {
		if (proj.compile())
			changed = true;
	}
	sync_all_processes();
	if (!changed) break;
	for (local none,proj: project_map)
		proj.m_changed = false;
}
} catch (e...) {
	print repr __builtin_last_traceback();
	print repr e;
	sys.exit(1);
}

#ifdef CONFIG_PRINTCMD
known_options = list(known_options.keys());
known_options.sort();
print "#!/bin/bash";
print;
print "# Build deemon without it already being installed.";
print "#";
print "# Usage:";
print "# $ ./make.sh  [OPTIONS]";
print "#";
print "# OPTIONS may specify a set of variables in the syntax";
print "# `name=value', which can also be passed through environ.";
print "# A list of recognized options can be found below.";
print "#";
print "# Example:";
print "# $ ./make.sh  TARGET_WINDOWS TARGET_ARCH=i686";
print;
print "# Recognized options:";
local print_options = [];
print_options.extend(default_options);
print_options.sort();
for (local x: known_options) {
	if ("$" !in x)
		print_options.append(pack(x,""));
}
local longest_option = 0;
for (local key,item: print_options) {
	if (longest_option < #key)
		longest_option = #key;
}
for (local key,item: print_options) {
	if (item || key in default_options) {
		print "#	"+(key.ljust(longest_option)+" = "+item).strip();
	} else {
		print "#	"+key.strip();
	}
}
print;
print "# Automatically generated using:";
print "#	$ deemon","-DCONFIG_PRINTCMD",fs::path::tail(sys.argv[0])+" ".join(sys.argv[1:]);
print;
for (local path: required_paths) {
	path = path.replace("\\","/");
	if (path.startswith("../")) continue;
	if (!path || path == ".") continue;
	print output_buffer: "${MKDIR} -p",path;
}
print output_buffer.pack(),;
print;
print output_buffer2.pack(),;
#else
for (local key,item: config_options) {
	if (key !in used_options) {
		print file.io.stderr: "WARNING: Configuration option",repr key,"was never used";
	}
}

print "DONE";
#endif

#if __DEEMON__ < 200
sys.exit(0);
#endif
