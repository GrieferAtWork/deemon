#!/usr/bin/deemon
/* Copyright (c) 2018-2023 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2023 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

import deemon;
import * from deemon;
import * from doc;
import util;
import posix;
import threading;
import printcode from disassembler;

#define TERM_WIDTH 120

global taskPool: {Callable...} = [];
global taskThreads: {Thread...} = [];
global taskPoolAvailable = threading.Semaphore(0);
function postTask(func: Callable) {
	taskPool.append(func);
	taskPoolAvailable.release();
}
function serveTaskPool() {
	for (;;) {
		taskPoolAvailable.acquire();
		local func;
		try {
			func = taskPool.popfront();
		} catch (...) {
			return;
		}
		func();
	}
}
function waitDone() {
	taskPoolAvailable.release(#taskThreads);
	for (local t: taskThreads)
		t.join();
}

for (none: [:posix.cpu_count()]) {
	local t = deemon.Thread(serveTaskPool);
	t.start();
	taskThreads.append(t);
}



/* Test invocations if various functions and operators. Not to assert
 * their expected results, but to make sure that references aren't leaked
 * in some situation. */

function getTypeInstances(t: Type | TypeExpr): {Object...} {
	if (t is TypeExpr) {
		/* TODO: Handle sequence-of-type expressions */
		/* TODO: Handle tuple-of-types expressions */
		/* TODO: Handle mapping-of-key-value expressions */
		for (local txType: t.types) {
			yield getTypeInstances(txType)...;
		}
		return;
	}
	switch (t) {
	case int:
		yield -0x8000000000000000;
		yield -0x80000000;
		yield -1;
		yield 0;
		yield 1;
		yield 0x7fffffff;
		yield 0x7fffffffffffffff;
		return;
	case bool:
		yield true;
		yield false;
		return;
	case type none:
		yield none;
		return;
	case Bytes:
		yield "".bytes();
		yield "aBcDeFgHiJkLmNoPqRsTuVwXyZ".bytes();
		yield "\x7f".bytes();
		yield "\x80".bytes();
		yield "\xff".bytes();
		return;
	case Sequence:
		yield getTypeInstances(Tuple)...;
		yield getTypeInstances(List)...;
		return;
	case Tuple:
		yield Tuple({});
		yield Tuple({none});
		yield Tuple({none,none});
		yield Object(); /* To check wrong-type paths (which are often special for tuples) */
		return;
	case List:
		yield List({});
		yield List({none});
		yield List({none,none});
		return;
	case string:
		yield "";
		yield "$";
		yield "aBcDeFgHiJkLmNoPqRsTuVwXyZ";
		yield "\U0000007f"; /* Last ASCII char */
		yield "\U00000080"; /* First latin-1 char */
		yield "\U000000ff"; /* Last latin-1 char */
		yield "\U00000100"; /* First UCS-16 char */
		yield "\U0000de12"; /* Inside UTF-16 surrogate area */
		yield "\U00007fff"; /* Last signed UCS-16 char */
		yield "\U00008000"; /* First unsigned UCS-16 char */
		yield "\U0000ffff"; /* Last unsigned UCS-16 char */
		yield "\U00010000"; /* First UTF-32 char */
		yield "\U0010ffff"; /* Last defined UTF-32 char */
		yield "\U00110000"; /* First undefined UTF-32 char */
		yield "\U7fffffff"; /* Last signed UTF-32 char */
		yield "\U80000000"; /* First unsigned UTF-32 char */
		yield "\Uffffffff"; /* Last unsigned UTF-32 char */
		yield Object(); /* To check wrong-type paths (which are often special for strings) */
		return;
	case Callable:
	case Function:
		/* For sort/removeif-style predicates. */
		yield (args..., **kwds) -> true;
		yield (args..., **kwds) -> false;
		return;
	case Object:
		yield Object();
		yield none;
		yield "";
		yield 0;
		yield false;
		return;
	case Cell:
		yield Cell();
		yield Cell(Dict());
		return;
	case WeakRef:
		yield WeakRef();
		yield WeakRef(Dict());
		return;
	case File:
		yield File();
		yield File.Reader("foo");
		yield File.Writer();
		return;
	default:
		break;
	}

	/* Special case for sequence sub-classes. */
	if (t.implements(Sequence)) {
		for (local x: getTypeInstances(List))
			yield t(x);
		return;
	}

	/* Fallback: construct some default instances. */
	try { yield t(); } catch (...) { return; }
	try { yield copy t(); } catch (...) {}
	try { yield deepcopy t(); } catch (...) {}
	try { local v = t(); v := t(); yield v; } catch (...) {}
	try { local v = t(); v.operator move := (t()); yield v; } catch (...) {}
}

function invokeWithValues(
		f: Function, argValues: {Object...}, name: string = "") {
	if (!name)
		name = repr f;
	if (!argValues) {
		/* Special case: invoke once, without any arguments. */
		print f"\r{name}()".ljust(TERM_WIDTH),;
		try {
			f();
		} catch (...) {
		}
		return;
	}
	local argIndices = [0] * #argValues;
	while (argIndices.first < #argValues.first) {
		local args = Tuple(
			for (local i, j: util.enumerate(argIndices))
				argValues[i][j]);
		print f"\r{name}({", ".join(for (local x: args) repr x)})"
			[:TERM_WIDTH].ljust(TERM_WIDTH),;
		try {
			f(args...);
		} catch (...) {
		}

		/* Move on to the next permutation */
		local indexIndex = #argIndices - 1;
		for (;;) {
			local newIndex = argIndices[indexIndex] + 1;
			if (newIndex >= #argValues[indexIndex]) {
				argIndices[indexIndex] = 0;
			} else {
				argIndices[indexIndex] = newIndex;
				break;
			}
			if (indexIndex == 0)
				return;
			--indexIndex;
		}
	}
}

function invoke(f: Callable,
		argTypes: {Type | TypeExpr | {Type | TypeExpr...} |
		          {Object...} | Object...} | none = none,
		name: string = "", doc: Doc | none = none) {
	if (!name)
		name = repr f;
	if (argTypes is none) {
		/* Extract type information from doc string. */
		if (doc is none)
			doc = Doc(f);
		local thisType = none;
		if (hasattr(f, "__type__"))
			thisType = f.__type__;
		for (local decl: doc.decls) {
			local declArgTypes = [];
			if (thisType !is none)
				declArgTypes.append(thisType);
			declArgTypes.extend(decl.parameters.each.typ);
			invoke(f, declArgTypes, name, doc);
		}
		return;
	}
	print f"\r{name}({", ".join(argTypes)}):".ljust(TERM_WIDTH) + "\n",;
	local argValues: {{Object...}...} = Tuple(for (local t: argTypes) ({
		local values;
		if (t is Type || t is TypeExpr) {
			values = Tuple(getTypeInstances(t));
			if (!values)
				throw Error(f"{name}: unable to instantiate {repr t}");
		} else if (t is Sequence && t) {
			local first = t.first;
			if (first is Type || first is TypeExpr) {
				values = Tuple(for (local x: t) getTypeInstances(x));
			} else {
				values = t;
			}
		} else {
			values = { t };
		}
		values;
	}));
	invokeWithValues(f, argValues, name);
}

function invokeAsync(args..., **kwds) {
	postTask(() -> invoke(args..., **kwds));
}

@@Invoke member functions of the given @Type @t
function invokeTypeMembers(t: Type) {
	//for (local a: enumattr(t)) {
	//	if (a.decl !== t)
	//		continue;
	//	local wrapper = t.operator . (a.name);
	//	if (wrapper is Callable) {
	//		print(f"invokeAsync({repr wrapper});");
	//		//invoke(wrapper, name: f"{repr t}.{a.name}");
	//	}
	//}
	local d = Doc(t);
	for (local op: d.operators) {
		local f = op.operatorfunc;
		local name = f"operator {op.prettyname} ";
		for (local decl: op.decls) {
			local argTypes = { t, decl.parameters.each.typ... };
			//print(f"invoke({name[:-1]}, \{{", ".join(argTypes)}\});");
			invoke(f, argTypes, name, op);
		}
	}
}


function main() {
	//invokeTypeMembers(deemon.string);
	//invokeTypeMembers(deemon.Bytes);
	//invokeTypeMembers(deemon.int);
	invokeTypeMembers(deemon.List);
	//invokeTypeMembers(deemon.Tuple);
	//invokeTypeMembers(deemon.Sequence);
	//invokeTypeMembers(deemon.Object);
	//invokeTypeMembers(deemon.bool);
	//invokeTypeMembers(type(none));
	//invokeTypeMembers(deemon.float);
	//invokeTypeMembers(deemon.Cell);
	//invokeTypeMembers(deemon.WeakRef);
	//invokeTypeMembers(deemon.File);
	//invokeTypeMembers(deemon.HashSet);
	//invokeTypeMembers(deemon.Dict);
	//invokeTypeMembers(deemon.Set);
	//invokeTypeMembers(deemon.Mapping);
	//invokeTypeMembers(deemon.Dict.Frozen);
	//invokeTypeMembers(Deque from collections);
	//invokeTypeMembers(FixedList from collections);
	//invokeTypeMembers((UniqueDict from collections));
	//invokeTypeMembers((UniqueDict from collections).Frozen);
	//invokeTypeMembers((UniqueSet from collections));
	//invokeTypeMembers((UniqueSet from collections).Frozen);
	//invokeTypeMembers(RBTree from collections);
	//invokeTypeMembers(Time from time);
	//invokeTypeMembers(Lock from threading);
	//invokeTypeMembers(AtomicLock from threading);
	//invokeTypeMembers(SharedLock from threading);
	//invokeTypeMembers(RAtomicLock from threading);
	//invokeTypeMembers(RSharedLock from threading);
	//invokeTypeMembers(RWLock from threading);
	//invokeTypeMembers(RWLockReadLock from threading);
	//invokeTypeMembers(RWLockWriteLock from threading);
	//invokeTypeMembers(AtomicRWLock from threading);
	//invokeTypeMembers(SharedRWLock from threading);
	//invokeTypeMembers(RAtomicRWLock from threading);
	//invokeTypeMembers(RSharedRWLock from threading);
	//invokeTypeMembers(LockUnion from threading);
	//invokeTypeMembers(Semaphore from threading);
	//invokeTypeMembers(Event from threading);
	//invokeTypeMembers(TLS from threading);
	//invokeTypeMembers(Once from threading);
}


#ifdef __MAIN__
main();
waitDone();
print "\nDONE";
#endif /* __MAIN__ */
