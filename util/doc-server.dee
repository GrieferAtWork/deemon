#!/usr/bin/deemon
/* Copyright (c) 2018-2020 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2020 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

import doctext;
import * from doc;
import * from net;
import * from deemon;
import util;
import fs;

global final STYLE_CSS: string =
r"a:link {
	color: #a1ccf7;
}
a:visited {
	color: #c2ccd6;
}
a:hover {
	color: blue;
}

nav {
	position: -webkit-sticky;
	position: sticky;
	top: 0px;
	box-shadow: 0px 4px 4px 0px rgba(0,0,0,.3);
	border-bottom: 2px solid #8c8593;
	background-color: #d9d6db;
	color: black;
	padding: 0px;
	margin: 0px;
	font-size: 30px;
	font-family: Courier New;
	z-index: 1; /* Keep the nav-bar at the fore-front */
}

nav ul {
	list-style-type: none;
	margin: 0px;
	padding: 0px;
	border: 0px;
	overflow: hidden;
}
nav ul li {
	float: left;
	margin: 0px;
	padding: 0px;
	border: 0px;
}
nav ul li a {
	display: block;
	padding: 2px 8px;
	margin: 0px;
	padding: 0px;
	border: 0px;
	text-decoration: none; /* Gets rid of link underlines */
}
nav ul li a:hover {
	color: white;
	background-color: deepskyblue;
}

.sep {
	padding: 0px 10px;
}

nav a:link {
	color: black;
}
nav a:visited {
	color: #4d4d4d;
}
nav a:hover {
	color: blue;
}

code {
	font-family: Courier New;
}


body {
	background-color: #666666;
	color: #e6e6e6;
	margin: 0px;
}
main {
	width: 1000px;
	margin: auto;
	border: 1px solid black;
	background-color: #4d4d4d;
	padding: 8px;
	box-shadow: 0px 0px 4px 4px rgba(0,0,0,.2);
}
var {
	font-style: normal;
	font-family: Courier New;
}
table {
	background-color: #595959;
	border-collapse: collapse;
	border: 1px solid black;
}
table, th, td {
	margin: 0px;
	padding: 3px;
}
td {
	vertical-align: top;
	text-align: left;
}
tr:hover {
	background-color: #666666;
}
th {
	background-color: #333333;
	color: white;
}

.category_title {
	font-size: 30px;
	margin: 20px 0px 10px 0px;
	border-bottom: 10px solid #d9d6db;
}

.FlowList {
	margin: 0px;
}

.Source {
	font-family: Courier New;
	font-size: 18px;
	background-color: black;
	color: white;
	border: 2px solid green;
	padding: 5px;
	text-align: left;
}

.InlineSource {
	font-family: Courier New;
	color: white;
	background-color: #444444;
	border: 0px;
	padding: 0px;
	display: inline;
}

.BrokenLink {
	color: rgb(231, 101, 101);
	border: 0px;
	padding: 0px;
	display: inline;
}

.h_kwd {
	color: rgb(255, 128, 0);
	font-weight: bold;
}
.h_kwd2 {
	color: rgb(0, 255, 255);
	font-weight: bold;
}
.h_string {
	color: rgb(0, 255, 0);
}
.h_rawstring {
	color: rgb(255, 181, 98);
}
.h_comment {
	color: rgb(0, 255, 64);
}
.h_number {
	color: rgb(255, 128, 64);
}
.h_symbol {
	color: rgb(255, 255, 0);
}
.doc_tag {
}

.tooltip {
	position: relative;
	display: inline-block;
}

/* Tooltip text */
.tooltip .tooltiptext {
	visibility: hidden;
	background-color: #555;
	width: 300px;
	color: #fff;
	text-align: center;
	padding: 5px;
	margin: 5px;
	border-radius: 6px;
	border: 1px solid black;
	box-shadow: 2px 2px 4px 4px rgba(0,0,0,.2);

	/* Position the tooltip text */
	position: absolute;
	z-index: 1;
	top: -50%;

	/* Fade in tooltip */
	opacity: 0;
	transition: opacity 0.3s;
}
.tooltip .autotooltiptext {
	visibility: hidden;
	background-color: #555;
	color: #fff;
	text-align: center;
	padding: 5px;
	margin: 5px;
	border-radius: 6px;
	border: 1px solid black;
	box-shadow: 2px 2px 4px 4px rgba(0,0,0,.2);

	/* Position the tooltip text */
	position: absolute;
	z-index: 1;
	top: -50%;

	/* Fade in tooltip */
	opacity: 0;
	transition: opacity 0.3s;
}

/* Show the tooltip text when you mouse over the tooltip container */
.tooltip:hover .tooltiptext {
	visibility: visible;
	opacity: 1;
}
.tooltip:hover .autotooltiptext {
	visibility: visible;
	opacity: 1;
}";

function writePageHeader(fp: File, title: string) {
	fp <<
		"<!DOCTYPE html>\r\n"
		"<html>\r\n"
		"<head>\r\n"
			"\t<meta charset=\"UTF-8\">\r\n"
			"\t<link rel=\"stylesheet\" href=\"/style.css\">\r\n"
			"\t<title>{}</title>\r\n"
		"</head>\r\n"
		"<body>\r\n"
		.format({ title });
}

function writePageFooter(fp) {
	fp << "</body>\r\n</html>\r\n";
}

function escapeSpecialHtmlCharactersNoLf(text: string): string {
	return text
		.unifylines()
		.replace("&", "&amp;")
		.replace("<", "&lt;")
		.replace(">", "&gt;");
}

function escapeSpecialHtmlCharacters(text: string): string {
	return escapeSpecialHtmlCharactersNoLf(text)
		.replace("\n", "<br />\r\n");
}

function escapeSpecialHtmlCharactersWithSpace(text: string): string {
	return escapeSpecialHtmlCharactersNoLf(text)
		.replace(" ", "&nbsp;")
		.replace("\n", "<br />\r\n");
}

global docObjectCache: {string: Doc} = Dict();
function getDocByPath(path: string): Doc {
	path = path.lstrip("/");
	local result = docObjectCache.get(path);
	if (result is none) {
		result = Doc(path);
		docObjectCache[path] = result;
	}
	return result;
}

@@Print a type reference
function printTypeRef(fp: File, t: TypeRef) {
	local p = t.path;
	local s = escapeSpecialHtmlCharacters(str t);
	if (p is none) {
		fp << s;
	} else {
		fp << "<a href=" << repr("/modules" + p) << ">" << s << "</a>";
	}
}

@@Print a type reference
function printTypeExpr(fp: File, t: TypeExpr) {
	switch (t.kind) {

	case "E":
		return printTypeRef(fp, t.Etyperef);

	case "C":
		printTypeExpr(fp, t.Ccelltype);
		fp << " with ";
		printTypeExpr(fp, t.Citemtype);
		break;

	case "T":
		if (#t.Ttypes == 1) {
			fp << "(";
			printTypeExpr(fp, t.Ttypes[0]);
			fp << ",)";
		} else {
			fp << "(";
			local is_first = true;
			for (local x: t.Ttypes) {
				if (!is_first) fp << ", ";
				is_first = false;
				printTypeExpr(fp, x);
			}
			fp << ")";
		}
		break;

	case "X": {
		local is_first = true;
		for (local x: t.Xtypes) {
			if (!is_first) fp << " | ";
			is_first = false;
			printTypeExpr(fp, x);
		}
	}	break;

	case "S":
		fp << "{";
		printTypeExpr(fp,t.Stype);
		fp << "...}";
		break;

	default:
		fp	<< "<div class=\"BrokenLink\"><i>"
			<< escapeSpecialHtmlCharacters(t.docstring)
			<< "</i></div>";
		break;
	}
}

global final DEEMON_KEYWORD_CSS_CLASSES = {
	"pack" : "h_kwd", "str" : "h_kwd", "repr" : "h_kwd", "copy" : "h_kwd",
	"deepcopy" : "h_kwd", "type" : "h_kwd", "try" : "h_kwd", "catch" : "h_kwd",
	"throw" : "h_kwd", "finally" : "h_kwd", "in" : "h_kwd", "is" : "h_kwd",
	"as" : "h_kwd", "from" : "h_kwd", "import" : "h_kwd", "print" : "h_kwd",
	"del" : "h_kwd", "return" : "h_kwd", "yield" : "h_kwd", "break" : "h_kwd",
	"continue" : "h_kwd", "goto" : "h_kwd", "for" : "h_kwd", "foreach" : "h_kwd",
	"while" : "h_kwd", "do" : "h_kwd", "switch" : "h_kwd", "case" : "h_kwd",
	"default" : "h_kwd", "assert" : "h_kwd", "with" : "h_kwd", "if" : "h_kwd",
	"else" : "h_kwd", "elif" : "h_kwd", "true" : "h_kwd", "false" : "h_kwd",
	"none" : "h_kwd", "this" : "h_kwd", "super" : "h_kwd", "bound" : "h_kwd",

	"function" : "h_kwd2", "global" : "h_kwd2", "local" : "h_kwd2", "static" : "h_kwd2",
	"__nth" : "h_kwd2", "__stack" : "h_kwd2", "final" : "h_kwd2", "class" : "h_kwd2",
	"extends" : "h_kwd2", "private" : "h_kwd2", "public" : "h_kwd2",
	"operator" : "h_kwd2", "property" : "h_kwd2", "member" : "h_kwd2",
};

function checkDeecodeSourceCodePartForOperator(text: string): (string | none, string) {
	for (local ch: text) {
		if (ch in [
			"=", "<", ">", "?", ":", "+", "-", "*", "/", "%", ".", ",", ";", 
			"#", "(", ")", "[", "]", "{", "}", "~", "@", "&", "|", "^", "!"])
			return ("h_symbol", text);
		if (!ch.isspace())
			break;
	}
	return (none, text);
}

@@Split deemon source code into its individual tokens,
@@returning a pair of `(CSS_CLASS, TOKEN_REPR)`.
@@If some token is just a user-defined literal, return @none as `CSS_CLASS`
function splitDeemonSourceCodeTokens(text: string): {(string | none, string)...} {
	text = text.unifylines().expandtabs(4);
	local end = #text;
	local i = 0;
	local flushStart = 0;
#define FLUSHTO(pos)                                                             \
	{                                                                            \
		if (flushStart < (pos))                                                  \
			yield checkDeecodeSourceCodePartForOperator(text[flushStart:(pos)]); \
	}
	while (i < end) {
		local tokStart = i;
		local ch = text[i];
		++i;
		if (ch == "r" && i < end) {
			local endch = text[i];
			if (endch in ["\"", "\'"]) {
				/* Raw string literal */
				local strend = text.find(endch, i + 1);
				if (strend >= 0) {
					i = strend + 1;
					FLUSHTO(tokStart);
					yield ("h_rawstring", text[tokStart:i]);
					flushStart = i;
					continue;
				}
			}
		}
		/* Check for identifiers */
		if (ch.issymstrt()) {
			while (i < end && text.issymcont(i))
				++i;
			local ident = text[tokStart:i];
			FLUSHTO(tokStart);
			yield (DEEMON_KEYWORD_CSS_CLASSES.get(ident), ident);
			flushStart = i;
			continue;
		}
		if (ch.isdecimal()) {
continue_decimal:
			while (i < end && text.isalnum(i))
				++i;
			if (i + 1 < end && text[i] == "." && text.isalnum(i + 1)) {
				i += 2;
				goto continue_decimal;
			}
			FLUSHTO(tokStart);
			yield ("h_number", text[tokStart:i]);
			flushStart = i;
			continue;
		}
		if (ch in ["\"", "\'"]) {
			for (;;) {
				if (i >= end)
					goto not_a_string;
				local ch2 = text[i];
				++i;
				if (ch2 == ch)
					break;
				if (ch2 == "\\")
					++i;
			}
			FLUSHTO(tokStart);
			yield ("h_string", text[tokStart:i]);
			flushStart = i;
			continue;
		}
not_a_string:
		if (ch == "/" && i < end) {
			/* Check for comments. */
			ch = text[i];
			if (ch == "*") {
				local commentEnd = text.find("*/", i + 1, end);
				if (commentEnd >= 0) {
					commentEnd += 2;
					FLUSHTO(tokStart);
					yield ("h_comment", text[tokStart:commentEnd]);
					flushStart = commentEnd;
					i = commentEnd;
					continue;
				}
			} else if (ch == "/") {
				local commentEnd = text.find("\n", i + 1, end);
				if (commentEnd < 0)
					commentEnd = end;
				FLUSHTO(tokStart);
				yield ("h_comment", text[tokStart:commentEnd]);
				flushStart = commentEnd;
				i = commentEnd;
				continue;
			}
		}
	}
	if (flushStart < end)
		yield checkDeecodeSourceCodePartForOperator(text[flushStart:end]);
}

@@Print deemon code with syntax highlighting
function doPrintDeemonCodeBlock(fp: File, body: string) {
	for (local cssClass, text: splitDeemonSourceCodeTokens(body)) {
		text = escapeSpecialHtmlCharactersWithSpace(text);
		if (cssClass !is none) {
			fp << "<var class=\"" << cssClass << "\">" << text << "</var>";
		} else {
			fp << text;
		}
	}
}

@@Print deemon code with syntax highlighting
function printDeemonCodeBlock(fp: File, body: string, isLongBody: bool) {
	if (isLongBody) {
		fp << "<div class=\"Source\">";
		doPrintDeemonCodeBlock(fp, body);
		fp << "</div>";
	} else {
		fp << "<code class=\"InlineSource\">";
		doPrintDeemonCodeBlock(fp, body);
		fp << "</code>";
	}
}

@@Print a doc expression
function printExpression(fp: File, t: Expression) {
	/* XXX: Could this be done better? */
	//fp << escapeSpecialHtmlCharacters(str t);
	doPrintDeemonCodeBlock(fp, str(t));
}

@@Print Declaration parameters (if any), as well as the return type
function printDeclarationParameters(fp: File, decl: Declaration) {
	if (decl.isdeleted) {
		fp << " = del";
		return;
	}
	if (decl.isinherited) {
		fp << " = super";
		return;
	}
	local params = decl.parameters;
	if (params !is none) {
		fp << "(";
		local is_first = true;
		for (local par: params) {
			if (!is_first) fp << ", ";
			is_first = false;
			if (par.isvarkwds)
				fp << "**";
			fp << "<i>" << escapeSpecialHtmlCharacters(par.name) << "</i>";
			if (par.isvarargs) {
				fp << "...";
			} else if (par.isoptional) {
				fp << "?";
			}
			fp << ": ";
			printTypeExpr(fp, par.typ);
			local def = par.defexpr;
			if (def !is none) {
				fp << " = ";
				printExpression(fp, def);
			}
		}
		fp << ")";
	}
	local ret = decl.ret;
	if (decl.istypeexplicit || !ret.isnone) {
		fp << ": ";
		printTypeExpr(fp, ret);
	}
}

global printTextSegmentElement;
global printTextSegmentElements;

@@Print a text segment element, which is either a
@@string, or one of the special types from @doctext
function printTextSegmentElement(fp: File, t: Object) {
	if (t is string) {
		fp << escapeSpecialHtmlCharacters(t.replace("\n", "\n\n"));
		return;
	}
	if (t is doctext.Code) {
		if (t.language == "deemon") {
			printDeemonCodeBlock(fp, t.body, t.indentation !is none);
			return;
		}
		/* Default case: use <code>-blocks */
		fp << "<code>";
		fp << escapeSpecialHtmlCharacters(t.body);
		fp << "</code>";
		return;
	}
	if (t is doctext.HyperLink) {
		fp << "<a href=" << repr(t.link) << ">";
		printTextSegmentElements(fp, t.body);
		fp << "</a>";
		return;
	}
	if (t is doctext.Emphasis) {
		local tag = {
			"B" : "b",
			"I" : "i",
			"S" : "strike",
		}[t.kind];
		fp << "<" << tag << ">";
		printTextSegmentElements(fp, t.body);
		fp << "</" << tag << ">";
		return;
	}
	if (t is doctext.List) {
		local commonPrefix = none;
		for (local prefix, none: t.items) {
			if (commonPrefix is none)
				commonPrefix = prefix;
			else if (commonPrefix != prefix) {
				commonPrefix = none;
				break;
			}
		}
		if (commonPrefix !is none) {
			local style = {
				"-" : "disc",
				"+" : "square",
				"*" : "circle",
			}.get(commonPrefix);
			if (style is none)
				commonPrefix = none;
			else {
				fp	<< "<ul class=\"FlowList\" style=\"list-style-type:"
					<< style << ";\">";
			}
		}
		if (commonPrefix is none)
			fp << "<ul class=\"FlowList\" style=\"list-style-type:none;\">";
		for (local prefix, body: t.items) {
			fp << "<li>";
			if (commonPrefix is none) {
				fp << "<table><tr><td><b>";
				fp << escapeSpecialHtmlCharacters(prefix);
				fp << "</b></td><td>";
				printTextSegmentElements(fp, body);
				fp << "</td></tr></table>";
			} else {
				printTextSegmentElements(fp, body);
			}
			fp << "</li>\r\n";
		}
		fp << "</ul>";
		return;
	}
	if (t is doctext.Table) {
		fp << "<table>";
		for (local rowIndex: [:t.rows]) {
			local row = t.cells[rowIndex];
			fp << "<tr>";
			local isThick = rowIndex in t.thickRows;
			for (local opt, cell: row) {
				fp << ["<td>", "<th>"][isThick];
				printTextSegmentElements(fp, cell);
				fp << ["</td>", "</th>"][isThick];
			}
			fp << "</tr>\r\n";
		}
		fp << "</table>";
		return;
	}
	if (t is doctext.Header) {
		fp << "<h" << t.size << ">";
		printTextSegmentElements(fp, t.body);
		fp << "</h" << t.size << ">";
		return;
	}
	if (t is doctext.ArgumentReference) {
		/* TODO: Highlight the same argument everywhere when hovering over one of them. */
		fp << "<code>";
		fp << escapeSpecialHtmlCharacters(t.name);
		fp << "</code>";
		return;
	}
	if (t is doctext.ExternalReference) {
		fp	<< "<code><a href=\"/modules" << t.path << "\">"
			<< t.name
			<< "</a></code>";
		return;
	}
	/* Fallback... */
	fp << escapeSpecialHtmlCharacters(str(t));
}

function printTextSegmentElements(fp: File, elems: {string | Object...}) {
	for (local e: elems)
		printTextSegmentElement(fp, e);
}

@@Print a given text segment
function printTextSegment(fp: File, t: TextSegment) {
	fp << "<div class=\"TextSegment\">";
	printTextSegmentElements(fp, t);
	fp << "</div>";
}


@@Lookup a page for the /module/ sub-directory, and write that page to @fp
@@@param: path: The already-split components of the path to lookup
function getModuleRootSubPage(fp: File, path: {string...}) {
	local d = getDocByPath("/".join(path));
	writePageHeader(fp, d.prettypath);
	fp << "<nav><ul>"
		"<li><a href=\"/\">home</a></li><li class=\"sep\">|</li>"
		"<li><a href=\"/modules\">modules</a></li>";
	local linkPath = "/modules";
	for (local x: path[:-1]) {
		linkPath = "{}/{}".format({ linkPath, x });
		local name_start = x.find(":");
		fp << "<li><a href=\"{}\">&gt;{}</a></li>".format({
			linkPath,
			name_start >= 0 ? x[name_start + 1:] : x
		});
	}
	fp << "<li><a href=\"/modules{}\">&gt;{}</a></li>".format({
		d.path,
		d.prettypathname
	});
	fp << "</ul></nav>\r\n<main>\r\n";
	fp << "<h2><b>" << d.kind << "</b>: " << d.typename;
	if (d.istype && d.object is bound) {
		local base = Type.__base__(d.object);
		if (base !is none && base !== Object) {
			base = Doc(base);
			fp << " extends <b>";
			local path = base.path;
			if (path !is none) {
				fp	<< "<a href=\"/modules"
					<< path
					<< "\">"
					<< base.prettyname
					<< "</a>";
			} else {
				fp	<< base.prettyname;
			}
			fp << "</b>";
		}
	}
	fp << "</h2><hr>\r\n<div>";
	local prettyName = d.name;
	local isFirst = true;
	for (local sect: d.docsections) {
		for (local seg: sect.segments) {
			if (seg is Declaration) {
				fp << "<div><code>" << d.kind << " ";
				fp << prettyName;
				if (!prettyName.issymcont(#prettyName - 1))
					fp << " ";
				printDeclarationParameters(fp, seg);
				fp << "</code></div>\r\n";
			} else {
				printTextSegment(fp, seg);
			}
		}
	}
	fp << "</div><hr>\r\n<div><table>";
	local children = List(d);
	children.sort();
	for (local child: children) {
		if (child.isprivate)
			continue; /* Don't enumerate private members. */
		local childLink = "/modules" + child.path;
		local prettyName = child.name;
		local hasDecl = false;
		//TODO:local tooltip = get_tooltip_text(d, text);
		for (local d: child.decls) {
			hasDecl = true;
			fp << "<tr><td>" << child.kind << "</td><td><div><code>";
			//TODO:if (tooltip !is none)
			//TODO:	fp << "<div class=\"tooltip\">";
			fp << "<a href=" << repr childLink << ">"
				<< escapeSpecialHtmlCharacters(prettyName) << "</a>";
			//TODO:if (tooltip !is none) {
			//TODO:	fp	<< "<span class=\"tooltiptext\">"
			//TODO:		<< tooltip
			//TODO:		<< "</span></div>";
			//TODO:}
			if (!prettyName.issymcont(#prettyName - 1))
				fp << " ";
			printDeclarationParameters(fp, d);
			fp << "</code></div></td></tr>\r\n";
		}
		if (!hasDecl) {
			fp << "<tr><td>" << child.kind << "</td><td><div><code>";
			fp << "<a href=" << repr childLink << ">" << escapeSpecialHtmlCharacters(prettyName) << "</a>";
			fp << "</code></div></td></tr>\r\n";
		}
	}
	fp << "</table></div></main>\r\n";
	writePageFooter(fp);
}

function listModulesInPath(
		p: string, prefix: string, showAll: bool = false): {string...} {
	import fs;
	try {
		for (local f: fs.dir(p)) {
			local path = fs.joinpath(p, f);
			if (f.startswith("_") && !showAll)
				continue; /* Hidden symbol (e.g. `_codecs') */
			if (fs.stat.isdir(path)) {
				/* Skip files found in /include-folders. */
				if (f == "include" && !showAll)
					continue;
				local new_prefix = "{}{}.".format({ prefix, f });
				for (local x: listModulesInPath(path, prefix))
					yield new_prefix + x;
				continue;
			}
			if (f.startswith(".") && f.startswith(".dec"))
				yield f[1:-4];
			else if (f.endswith(".so"))
				yield f[:-3];
			else if (f.endswith(".dll"))
				yield f[:-4];
			else if (f.endswith(".dee"))
				yield f[:-4];
		}
	} catch (...) {
	}
}

function enumerateGlobalModules(): {string...} {
	yield "deemon";
	for (local p: Module.path)
		yield listModulesInPath(p, "")...;
}

@@Print the /modules page
function getModulesPage(fp: File) {
	writePageHeader(fp, "Modules");
	fp << "<nav><ul>"
		"<li><a href=\"/\">home</a></li><li class=\"sep\">|</li>"
		"<li><a href=\"/modules\">modules</a></li>"
		"</ul></nav>\r\n<main>\r\n";
	for (local name: enumerateGlobalModules()) {
		fp	<< "<div class=\"module_item\"><a href=\"/modules/"
			<< name
			<< "\">"
			<< name
			<< "</a></div>\r\n";
	}
	fp << "</main>";
	writePageFooter(fp);
}

@@Print the root (home) page
function getHomePage(fp: File) {
	writePageHeader(fp, "Home");
	fp << "<nav><ul>"
		"<li><a href=\"/\">home</a></li><li class=\"sep\">|</li>"
		"<li><a href=\"/modules\">modules</a></li>"
		"</ul></nav><main>\r\n"
		"<h1>Deemon Documentation</h1>\r\n"
		"<a href=\"/modules\">List of all modules</a><br />\r\n"
		"</main>";
	writePageFooter(fp);
}


@@Get a page, given its @path
function getPage(fp: File, path: string) {
	path = path.strip("/").strip();
	path = path.split("/");
	if (!path)
		return getHomePage(fp);
	if (path[0] == "modules") {
		if (#path >= 2) {
			return getModuleRootSubPage(fp, path[1:]);
		}
		return getModulesPage(fp);
	}
	throw Error("Missing page: {!r}".format({ path }));
}


@@The thread main function for
function ClientThreadMain(con: socket) {
	print "New connection:", con;
	try {
		try {
			try {
				for (;;) {
					local msg = con.recv();
					if (!msg)
						break; /* The other end disconnected gracefully */
					local command = msg.splitlines()[0];
					local fp = File.Writer();
					local protocol = command[#command - 8:];
					if (!command.startswith("GET") ||
					     protocol !in ["HTTP/1.1", "HTTP/1.0"]) {
						print "Bad command:", repr command;
						fp << protocol << " 400 Bad Request\r\n";
					} else {
						command = command[3:#command - 8].strip();
						local content;
						local content_type = "text/html";
						if (command == "/style.css") {
							content = STYLE_CSS.encode("utf-8");
							content_type = "text/css";
						} else {
							content = File.Writer();
							getPage(content, command);
							content = content.string.encode("utf-8");
						}
						fp << protocol << " 200 OK\r\n"
							"Content-Length: {}\r\n"
							"Content-Type: {}; charset=UTF-8\r\n"
							"\r\n".format({ #content, content_type });
						fp.write(content);
					}
					con.send(fp.string.encode("UTF-8"));
					if (protocol == "HTTP/1.0") {
						/* Don't allow for connection re-use.
						 * If the we didn't do this, the client wouldn't get the
						 * memo on the entire document having been delivered. */
						break;
					}
				}
			} catch (e...) {
				File.Writer outputFp;
				File.Writer errorFp;
				writePageHeader(errorFp, e);
				errorFp <<
					"<main>\r\n"
					"<h2>DOC Server crashed</h2><br />"
					"<hr>";
				if (e !is string)
					errorFp << "<b>" << str(type e) << "</b>: ";
				errorFp
					<< (e is string ? e : repr e).replace("\n", "<br />\r\n")
					<< "<hr>"
					<< repr(Traceback.current).replace("\n", "<br />\r\n")
					<< "<hr></main>\r\n";
				writePageFooter(errorFp);
				errorFp = errorFp.string.encode("utf-8");
				outputFp <<
					"HTTP/1.1 200 OK\r\n"
					"Content-Length: {}\r\n"
					"Content-Type: text/html; charset=UTF-8\r\n"
					"\r\n".format({ #errorFp });
				outputFp.write(errorFp);
				con.send(outputFp.string);
				throw;
			}
		} finally {
			con.close();
			print "Disconnected:", con;
		}
	} catch (e...) {
		print "Client thread crashed:";
		print repr e;
		print repr Traceback.current;
	}

}


#ifdef __MAIN__
local s;
try {
	s = socket("INET6", none, none);
	s.bind("[::]:8080");
} catch (...) {
	s = socket("INET", none, none);
	s.bind("0.0.0.0:8080");
	print "Cannot use IPv6 to run server (using IPv4)";
}
s.listen();

print "Doc Server is up & running.";
print "Open your Web Brower and navigate to:";
print "127.0.0.1:8080";
print;
print;

try {
	for (;;) {
		local con = s.accept();
		local th = Thread(ClientThreadMain, pack con);
		th.start();
		th.detach();
	}
} finally {
	docObjectCache.clear();
}
#endif




