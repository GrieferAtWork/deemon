#!/usr/bin/deemon
/* Copyright (c) 2018-2023 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2023 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

import * from threading;
import * from deemon;

function testLock(lock: Lock, isReadLockOrRecursive: bool = false) {
	assert lock is Lock;
	assert lock.available;
	assert !lock.acquired;

	assert lock.tryacquire();
	assert isReadLockOrRecursive ? lock.available : !lock.available;
	assert lock.acquired;

	lock.release();
	assert lock.available;
	assert !lock.acquired;

	lock.acquire();
	assert isReadLockOrRecursive ? lock.available : !lock.available;
	assert lock.acquired;
	lock.release();
	assert lock.available;
	assert !lock.acquired;

	assert lock.timedacquire(0);
	assert isReadLockOrRecursive ? lock.available : !lock.available;
	assert lock.acquired;
	lock.release();
	assert lock.available;
	assert !lock.acquired;

	with (lock) {
		assert isReadLockOrRecursive ? lock.available : !lock.available;
		assert lock.acquired;
	}
	assert lock.available;
	assert !lock.acquired;
}

function testRWLock(lock: RWLock, isRecursive: bool = false) {
	assert lock is RWLock;
	assert lock.readlock is RWLockReadLock;
	assert lock.writelock is RWLockWriteLock;

	assert !lock.reading;
	assert !lock.writing;
	assert lock.canread;
	assert lock.canwrite;

	assert lock.tryread();
	assert lock.reading;
	assert !lock.writing;
	assert lock.canread;
	assert !lock.canwrite;

	assert lock.tryread();
	assert lock.reading;
	assert !lock.writing;
	assert lock.canread;
	assert !lock.canwrite;

	assert !lock.tryupgrade();
	assert lock.reading;
	assert !lock.writing;
	assert lock.canread;
	assert !lock.canwrite;

	lock.endread();
	assert lock.reading;
	assert !lock.writing;
	assert lock.canread;
	assert !lock.canwrite;

	lock.endread();
	assert !lock.reading;
	assert !lock.writing;
	assert lock.canread;
	assert lock.canwrite;

	lock.read();
	assert lock.reading;
	assert !lock.writing;
	assert lock.canread;
	assert !lock.canwrite;

	assert lock.tryupgrade();
	assert lock.reading;
	assert lock.writing;
	assert isRecursive ? lock.canread : !lock.canread;
	assert isRecursive ? lock.canwrite : !lock.canwrite;

	lock.downgrade();
	assert lock.reading;
	assert !lock.writing;
	assert lock.canread;
	assert !lock.canwrite;

	assert lock.upgrade();
	assert lock.reading;
	assert lock.writing;
	assert isRecursive ? lock.canread : !lock.canread;
	assert isRecursive ? lock.canwrite : !lock.canwrite;

	lock.downgrade();
	assert lock.reading;
	assert !lock.writing;
	assert lock.canread;
	assert !lock.canwrite;

	lock.endread();
	assert !lock.reading;
	assert !lock.writing;
	assert lock.canread;
	assert lock.canwrite;

	assert lock.trywrite();
	assert lock.reading;
	assert lock.writing;
	assert isRecursive ? lock.canread : !lock.canread;
	assert isRecursive ? lock.canwrite : !lock.canwrite;

	lock.endwrite();
	assert !lock.reading;
	assert !lock.writing;
	assert lock.canread;
	assert lock.canwrite;

	lock.read();
	assert lock.reading;
	assert !lock.writing;
	assert lock.canread;
	assert !lock.canwrite;

	lock.end();
	assert !lock.reading;
	assert !lock.writing;
	assert lock.canread;
	assert lock.canwrite;

	lock.write();
	assert lock.reading;
	assert lock.writing;
	assert isRecursive ? lock.canread : !lock.canread;
	assert isRecursive ? lock.canwrite : !lock.canwrite;

	lock.end();
	assert !lock.reading;
	assert !lock.writing;
	assert lock.canread;
	assert lock.canwrite;

	with (lock.readlock) {
		assert lock.reading;
		assert !lock.writing;
		assert lock.canread;
		assert !lock.canwrite;
	}
	assert !lock.reading;
	assert !lock.writing;
	assert lock.canread;
	assert lock.canwrite;

	with (lock.writelock) {
		assert lock.reading;
		assert lock.writing;
		assert isRecursive ? lock.canread : !lock.canread;
		assert isRecursive ? lock.canwrite : !lock.canwrite;
	}
	assert !lock.reading;
	assert !lock.writing;
	assert lock.canread;
	assert lock.canwrite;

	testLock(lock.readlock, isReadLockOrRecursive: true);
	testLock(lock.writelock, isReadLockOrRecursive: isRecursive);
}

testLock(AtomicLock());
testLock(SharedLock());
testLock(RAtomicLock(), isReadLockOrRecursive: true);
testLock(RSharedLock(), isReadLockOrRecursive: true);
testLock(Semaphore(1));
testRWLock(AtomicRWLock());
testRWLock(SharedRWLock());
testRWLock(RAtomicRWLock(), isRecursive: true);
testRWLock(RSharedRWLock(), isRecursive: true);

assert SharedLock.derivedfrom(AtomicLock);
assert RSharedLock.derivedfrom(RAtomicLock);
assert SharedRWLock.derivedfrom(AtomicRWLock);
assert RSharedRWLock.derivedfrom(RAtomicRWLock);


function testEvent(e: Event) {
	assert !e.isset;

	e.set();
	assert e.isset;

	e.clear();
	assert !e.isset;

	e.isset = true;
	assert e.isset;

	e.isset = false;
	assert !e.isset;
}

testEvent(Event());
