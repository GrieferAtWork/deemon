#!/usr/bin/deemon
/* Copyright (c) 2018-2025 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2025 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

import * from deemon;
import * from fs;

function status(message) {
	if (#message > 60)
		message = message[:57] + "...";
	print("\r", " " * 60, "\r", message),;
	File.stdout.sync();
}

function scanPath(p: string, rel: string) {
	local files;
	try {
		files = List(dir(p));
	} catch (e...) {
		print "WARNING: Broken library path", repr p;
		print ">", e;
		return;
	}
	for (local x: files) {
		local n = rel + x;
		local y = joinpath(p, x);
		if (stat.isdir(y)) {
			scanPath(y, n + ".");
		} else if (y.endswith(".dee")) {
//			local decname = joinpath(p, "." + x[:-4] + ".dec");
//			try unlink(decname); catch (...);
			n = n[:-4];
			status("\tImporting: " + repr n);
			import(n);
		}
	}
}

/* Import all modules reachable via deemon library path. */
for (local p: Module.path) {
	scanPath(p, "");
}

status("");













