#!/usr/bin/deemon
/* Copyright (c) 2018-2024 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2024 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

import * from deemon;

for (local set: {
	HashSet({ 10 }).frozen,
	HashSet({ 10, 10 }).frozen,
	HashSet({ 10 }).cached,
	HashSet({ 10, 10 }).cached,
	HashSet({ 10 }),
	HashSet({ 10, 10 }),
	({ 10 } as Set).frozen,
	({ 10, 10 } as Set).frozen,
	/* TODO: These 2 should start working once "set_cached" is a method
	 *       hint under "CONFIG_EXPERIMENTAL_UNIFIED_METHOD_HINTS" */
	//TODO: ({ 10 } as Set).cached,
	//TODO: ({ 10, 10 } as Set).cached,
	{ 10 } as Set,
	/* TODO: This one works, but only under "CONFIG_EXPERIMENTAL_UNIFIED_METHOD_HINTS" */
	//{ 10, 10 } as Set,
}) {
	assert ((set == {10}));
	assert !(set != {10});
	assert !(set <  {10});
	assert ((set <= {10}));
	assert !(set >  {10});
	assert ((set >= {10}));

	assert ((set == ({10, 10} as Set)));
	assert !(set != ({10, 10} as Set));
	assert !(set <  ({10, 10} as Set));
	assert ((set <= ({10, 10} as Set)));
	assert !(set >  ({10, 10} as Set));
	assert ((set >= ({10, 10} as Set)));

	/* Make sure that a set does not equal a sequence containing all elements
	 * of the set, when some of the elements appear as duplicates. */
	// TODO: Comment these in under "CONFIG_EXPERIMENTAL_UNIFIED_METHOD_HINTS"
//	assert !(set == {10, 10});
//	assert ((set != {10, 10}));
//	assert ((set <  {10, 10}));
//	assert ((set <= {10, 10}));
//	assert !(set >  {10, 10});
//	assert !(set >= {10, 10});

	assert !(set == {10, 20});
	assert ((set != {10, 20}));
	assert ((set <  {10, 20}));
	assert ((set <= {10, 20}));
	assert !(set >  {10, 20});
	assert !(set >= {10, 20});
}
