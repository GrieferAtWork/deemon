#!/usr/bin/deemon
/* Copyright (c) 2018-2025 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2025 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

local x = { 8, 19, 41, 57 };

assert 1 == x.find(19);
assert 2 == x.find(41);
assert 1 == x.find({19, 41}.some);

assert 1 == x.rfind(19);
assert 2 == x.rfind(41);
assert 2 == x.rfind({19, 41}.some);

assert x.some == 8;
assert x.some == 19;
assert x.some == 41;
assert x.some == 57;
assert !(x.some == 58);

assert x.some != 8, "Because there is some element that is non-equal to '8'";

/* Assert that non-equality of "some" element works properly */
assert (({0, 8}.some != 8));
assert (({8, 0}.some != 8));
assert !({8, 8}.some != 8);
assert !({8   }.some != 8);

/* Assert that sequence operators work with ".some" */
assert ((10 in { {0, 1, 2}, {5, 7, 9}, {1, 10, 1} }.some));
assert !(11 in { {0, 1, 2}, {5, 7, 9}, {1, 10, 1} }.some);
assert !(10 !in { {0, 1, 2}, {5, 7, 9}, {1, 10, 1} }.some);
assert ((11 !in { {0, 1, 2}, {5, 7, 9}, {1, 10, 1} }.some));

/* Assert that attribute function work with ".some" */
assert ({ {0, 1, 2}, {5, 7, 9}, {1, 10, 1} }.some.contains(10));
assert !{ {0, 1, 2}, {5, 7, 9}, {1, 10, 1} }.some.contains(11);

/* Assert that attribute properties work with ".some" */
assert (({ {}, {42}, {42, 43} }.some.length == 0));
assert (({ {}, {42}, {42, 43} }.some.length == 1));
assert (({ {}, {42}, {42, 43} }.some.length == 2));
assert !({ {}, {42}, {42, 43} }.some.length == 3);

/* Assert that boolean property merging (via &&) works
 * for ".each".
 *
 * Note that because "operator <=>" is implemented via
 * sequence compare for anything but first-level each-
 * wrappers, we have to write "x.__eq__(y)" instead of
 * "x == y"
 *
 * s.a. `CONFIG_HAVE_SEQEACHOPERATOR_HAS_SEQLIKE_COMPARE' */
assert !({ {}, {42}, {42, 43} }.each.length.__eq__(0));
assert !({ {}, {42}, {42, 43} }.each.length.__ne__(0));
assert !({ {}, {42}, {42, 43} }.each.length.__eq__(1));
assert !({ {}, {42}, {42, 43} }.each.length.__ne__(1));
assert !({ {}, {42}, {42, 43} }.each.length.__eq__(2));
assert !({ {}, {42}, {42, 43} }.each.length.__ne__(2));
assert !({ {}, {42}, {42, 43} }.each.length.__eq__(3));
assert (({ {}, {42}, {42, 43} }.each.length.__ne__(3)));
