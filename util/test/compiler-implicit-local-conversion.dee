#!/usr/bin/deemon
/* Copyright (c) 2018-2024 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2024 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */


import deemon;
import deemon_module = deemon;

/* Make sure import symbols can implicitly be casted to local variables
 * if they are ever written to. - Also ensure that optimization potentially
 * done in a case such as this doesn't try to optimize this incorrectly. */

local first_pass = true;
again:

function inner() {
	/* `deemon' is defined as a module-symbol, which normally wouldn't
	 * have to be referenced. - Assert that despite the write below,
	 * which turns that symbol into a local variable, we still get
	 * the original value here! */
	if (first_pass) {
		assert deemon === deemon_module;
	} else {
		/* If the optimizer tried to propagate the original value to
		 * this point, `deemon' would still evaluate to `deemon_module',
		 * despite the fact that it was re-assigned below.
		 * This asserts that the optimizer either doesn't perform such
		 * an optimization, or isn't producing incorrect code in this case. */
		assert deemon == 52;
	}
}

if (first_pass) {
	assert deemon === deemon_module;
} else {
	assert deemon == 52;
}
deemon = 52;
assert deemon == 52;

function inner2() {
	/* Similar to the other function above, only we are here to check
	 * that the symbol linked here is guarantied to be `52' */
	assert deemon == 52;
}

inner();
inner2();

if (first_pass) {
	first_pass = false;
	goto again;
}















