#!/usr/bin/deemon
/* Copyright (c) 2018-2025 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2025 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

import * from deemon;
import * from ctypes;

/* Only run this test if the implementation supports threading */
if (!Thread.supported)
	return;

struct Futex {
	.word = uintptr_t
};

global ftx = Futex();
ftx.word = 0;


global state = "init";

local t = Thread(() -> {
	while (ftx.word == 0)
		futex_wait(ftx.word.ref, 0);
	assert state == "main->thread";
	assert ftx.word == 1;
	state = "thread->main";
	ftx.word = 2;
	futex_wakeall(ftx.word.ref);
	return "OK";
});
t.start();

/* Set state="main->thread" */
assert state == "init";
state = "main->thread";
assert state == "main->thread";

/* Signal the thread via the futex */
ftx.word = 1;
futex_wakeall(ftx.word.ref);

/* Wait for the thread to signal us back. */
while (ftx.word == 1)
	futex_wait(ftx.word.ref, 1);
assert ftx.word == 2;
assert state == "thread->main";

assert t.join() == "OK";

