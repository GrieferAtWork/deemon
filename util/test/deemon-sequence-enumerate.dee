#!/usr/bin/deemon
/* Copyright (c) 2018-2024 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2024 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

import * from deemon;
import * from collections;

local seq = FixedList(4);
seq[1] = "foo";
seq[3] = "bar";

function assertEqualSequence(expected, actual) {
	assert expected == actual;
	assert expected == Tuple(actual);
}

/* Make sure that enumerate() returns the expected 2-pair sequence */
assertEqualSequence({(1, "foo"), (3, "bar")}, seq.enumerate());
assertEqualSequence({(1, "foo"), (3, "bar")}, seq.enumerate(0));
assertEqualSequence({(1, "foo"), (3, "bar")}, seq.enumerate(0, 4));
assertEqualSequence({(1, "foo"), (3, "bar")}, seq.enumerate(0, end: 4));
assertEqualSequence({(1, "foo"), (3, "bar")}, seq.enumerate(start: 0, end: 4));
assertEqualSequence({(1, "foo"), (3, "bar")}, seq.enumerate(1));
assertEqualSequence({(1, "foo"), (3, "bar")}, seq.enumerate(1, 4));
assertEqualSequence({(1, "foo"), (3, "bar")}, seq.enumerate(1, end: 4));
assertEqualSequence({(1, "foo"), (3, "bar")}, seq.enumerate(start: 1, end: 4));
assertEqualSequence({(1, "foo")}, seq.enumerate(1, 3));
assertEqualSequence({(1, "foo")}, seq.enumerate(1, end: 3));
assertEqualSequence({(1, "foo")}, seq.enumerate(start: 1, end: 3));

/* Make sure that enumerate() can be used to enumerate unbound items. */
local items = [];
seq.enumerate((index, value?) -> {
	items.append((index, value is bound ? value : none));
});
assert {(0, none), (1, "foo"), (2, none), (3, "bar")} == items;

/* Make sure that when the enumerate callback returns something
 * other than "none", enumeration stops and that non-none value
 * gets propagated as return value of "enumerate()" */
local items = [];
assert "foo" == seq.enumerate((index, value?) -> {
	items.append((index, value is bound ? value : none));
	if (value is bound)
		return "foo";
});
assert {(0, none), (1, "foo")} == items;
