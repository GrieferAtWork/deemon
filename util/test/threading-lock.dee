#!/usr/bin/deemon
/* Copyright (c) 2018-2024 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2024 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

import * from threading;
import * from deemon;

function testLock(lock: Lock,
		testLocks: {Lock...} = none,
		isReadLockOrRecursive: bool = false) {
	if (testLocks is none)
		testLocks = {lock};
#define testLocks_all(attr) (testLocks.each.attr && ...)
#define testLocks_any(attr) (testLocks.each.attr || ...)
	assert lock is Lock;
	assert testLocks_all(available);
	assert lock.timedwaitfor(0);
	assert !testLocks_any(acquired);

	assert lock.tryacquire();
	assert isReadLockOrRecursive ? testLocks_all(available) : !testLocks_any(available);
	assert isReadLockOrRecursive ? lock.timedwaitfor(0) : !lock.timedwaitfor(0);
	assert testLocks_all(acquired);

	lock.release();
	assert testLocks_all(available);
	assert lock.timedwaitfor(0);
	assert !testLocks_any(acquired);

	lock.acquire();
	assert isReadLockOrRecursive ? testLocks_all(available) : !testLocks_any(available);
	assert isReadLockOrRecursive ? lock.timedwaitfor(0) : !lock.timedwaitfor(0);
	assert testLocks_all(acquired);
	lock.release();
	assert testLocks_all(available);
	assert lock.timedwaitfor(0);
	assert !testLocks_any(acquired);

	assert lock.timedacquire(0);
	assert isReadLockOrRecursive ? testLocks_all(available) : !testLocks_any(available);
	assert isReadLockOrRecursive ? lock.timedwaitfor(0) : !lock.timedwaitfor(0);
	assert testLocks_all(acquired);
	lock.release();
	assert testLocks_all(available);
	assert lock.timedwaitfor(0);
	assert !testLocks_any(acquired);

	with (lock) {
		assert isReadLockOrRecursive ? testLocks_all(available) : !testLocks_any(available);
		assert isReadLockOrRecursive ? lock.timedwaitfor(0) : !lock.timedwaitfor(0);
		assert testLocks_all(acquired);
	}
	assert testLocks_all(available);
	assert lock.timedwaitfor(0);
	assert !testLocks_any(acquired);
}

function testRWLock(lock: RWLock, isRecursive: bool = false) {
	assert lock is RWLock;
	assert lock.readlock is RWLockReadLock;
	assert lock.writelock is RWLockWriteLock;

	assert !lock.reading;
	assert !lock.writing;
	assert lock.canread;
	assert lock.timedwaitread(0);
	assert lock.canwrite;
	assert lock.timedwaitwrite(0);

	assert lock.timedread(0); /* read=0 -> read=1 */
	assert lock.reading;
	assert !lock.writing;
	assert lock.canread;
	assert lock.timedwaitread(0);
	assert !lock.canwrite;
	assert !lock.timedwaitwrite(0);

	lock.endread(); /* read=1 -> read=0 */
	assert !lock.reading;
	assert !lock.writing;
	assert lock.canread;
	assert lock.timedwaitread(0);
	assert lock.canwrite;
	assert lock.timedwaitwrite(0);

	assert lock.tryread(); /* read=0 -> read=1 */
	assert lock.reading;
	assert !lock.writing;
	assert lock.canread;
	assert lock.timedwaitread(0);
	assert !lock.canwrite;
	assert !lock.timedwaitwrite(0);

	assert lock.tryread(); /* read=1 -> read=2 */
	assert lock.reading;
	assert !lock.writing;
	assert lock.canread;
	assert lock.timedwaitread(0);
	assert !lock.canwrite;
	assert !lock.timedwaitwrite(0);

	assert !lock.tryupgrade();
	assert lock.reading;
	assert !lock.writing;
	assert lock.canread;
	assert lock.timedwaitread(0);
	assert !lock.canwrite;
	assert !lock.timedwaitwrite(0);

	lock.endread(); /* read=2 -> read=1 */
	assert lock.reading;
	assert !lock.writing;
	assert lock.canread;
	assert lock.timedwaitread(0);
	assert !lock.canwrite;
	assert !lock.timedwaitwrite(0);

	lock.read(); /* read=1 -> read=2 */
	assert lock.reading;
	assert !lock.writing;
	assert lock.canread;
	assert lock.timedwaitread(0);
	assert !lock.canwrite;
	assert !lock.timedwaitwrite(0);

	lock.endread(); /* read=2 -> read=1 */
	assert lock.reading;
	assert !lock.writing;
	assert lock.canread;
	assert lock.timedwaitread(0);
	assert !lock.canwrite;
	assert !lock.timedwaitwrite(0);

	assert lock.timedread(0); /* read=1 -> read=2 */
	assert lock.reading;
	assert !lock.writing;
	assert lock.canread;
	assert lock.timedwaitread(0);
	assert !lock.canwrite;
	assert !lock.timedwaitwrite(0);

	lock.endread(); /* read=2 -> read=1 */
	assert lock.reading;
	assert !lock.writing;
	assert lock.canread;
	assert lock.timedwaitread(0);
	assert !lock.canwrite;
	assert !lock.timedwaitwrite(0);

	lock.endread(); /* read=1 -> read=0 */
	assert !lock.reading;
	assert !lock.writing;
	assert lock.canread;
	assert lock.timedwaitread(0);
	assert lock.canwrite;
	assert lock.timedwaitwrite(0);

	lock.read(); /* read=0 -> read=1 */
	assert lock.reading;
	assert !lock.writing;
	assert lock.canread;
	assert lock.timedwaitread(0);
	assert !lock.canwrite;
	assert !lock.timedwaitwrite(0);

	assert lock.tryupgrade(); /* read=1 -> write */
	assert lock.reading;
	assert lock.writing;
	assert isRecursive ? lock.canread : !lock.canread;
	assert isRecursive ? lock.timedwaitread(0) : !lock.timedwaitread(0);
	assert isRecursive ? lock.canwrite : !lock.canwrite;
	assert isRecursive ? lock.timedwaitwrite(0) : !lock.timedwaitwrite(0);

	lock.downgrade(); /* write -> read=1 */
	assert lock.reading;
	assert !lock.writing;
	assert lock.canread;
	assert lock.timedwaitread(0);
	assert !lock.canwrite;
	assert !lock.timedwaitwrite(0);

	assert lock.upgrade(); /* read=1 -> write */
	assert lock.reading;
	assert lock.writing;
	assert isRecursive ? lock.canread : !lock.canread;
	assert isRecursive ? lock.timedwaitread(0) : !lock.timedwaitread(0);
	assert isRecursive ? lock.canwrite : !lock.canwrite;
	assert isRecursive ? lock.timedwaitwrite(0) : !lock.timedwaitwrite(0);

	lock.downgrade(); /* write -> read=1 */
	assert lock.reading;
	assert !lock.writing;
	assert lock.canread;
	assert lock.timedwaitread(0);
	assert !lock.canwrite;
	assert !lock.timedwaitwrite(0);

	lock.endread(); /* read=1 -> read=0 */
	assert !lock.reading;
	assert !lock.writing;
	assert lock.canread;
	assert lock.timedwaitread(0);
	assert lock.canwrite;
	assert lock.timedwaitwrite(0);

	assert lock.trywrite(); /* read=0 -> write */
	assert lock.reading;
	assert lock.writing;
	assert isRecursive ? lock.canread : !lock.canread;
	assert isRecursive ? lock.timedwaitread(0) : !lock.timedwaitread(0);
	assert isRecursive ? lock.canwrite : !lock.canwrite;
	assert isRecursive ? lock.timedwaitwrite(0) : !lock.timedwaitwrite(0);

	lock.endwrite(); /* write -> read=0 */
	assert !lock.reading;
	assert !lock.writing;
	assert lock.canread;
	assert lock.timedwaitread(0);
	assert lock.canwrite;
	assert lock.timedwaitwrite(0);

	lock.read(); /* read=0 -> read=1 */
	assert lock.reading;
	assert !lock.writing;
	assert lock.canread;
	assert lock.timedwaitread(0);
	assert !lock.canwrite;
	assert !lock.timedwaitwrite(0);

	lock.end(); /* read=1 -> read=0 */
	assert !lock.reading;
	assert !lock.writing;
	assert lock.canread;
	assert lock.timedwaitread(0);
	assert lock.canwrite;
	assert lock.timedwaitwrite(0);

	lock.write(); /* read=0 -> write */
	assert lock.reading;
	assert lock.writing;
	assert isRecursive ? lock.canread : !lock.canread;
	assert isRecursive ? lock.timedwaitread(0) : !lock.timedwaitread(0);
	assert isRecursive ? lock.canwrite : !lock.canwrite;
	assert isRecursive ? lock.timedwaitwrite(0) : !lock.timedwaitwrite(0);

	lock.end(); /* write -> read=0 */
	assert !lock.reading;
	assert !lock.writing;
	assert lock.canread;
	assert lock.timedwaitread(0);
	assert lock.canwrite;
	assert lock.timedwaitwrite(0);

	assert lock.timedwrite(0); /* read=0 -> write */
	assert lock.reading;
	assert lock.writing;
	assert isRecursive ? lock.canread : !lock.canread;
	assert isRecursive ? lock.timedwaitread(0) : !lock.timedwaitread(0);
	assert isRecursive ? lock.canwrite : !lock.canwrite;
	assert isRecursive ? lock.timedwaitwrite(0) : !lock.timedwaitwrite(0);

	lock.endwrite(); /* write -> read=0 */
	assert !lock.reading;
	assert !lock.writing;
	assert lock.canread;
	assert lock.timedwaitread(0);
	assert lock.canwrite;
	assert lock.timedwaitwrite(0);

	with (lock.readlock) {
		assert lock.reading;
		assert !lock.writing;
		assert lock.canread;
		assert lock.timedwaitread(0);
		assert !lock.canwrite;
		assert !lock.timedwaitwrite(0);
	}
	assert !lock.reading;
	assert !lock.writing;
	assert lock.canread;
	assert lock.timedwaitread(0);
	assert lock.canwrite;
	assert lock.timedwaitwrite(0);

	with (lock.readlock) {
		assert lock.reading;
		assert !lock.writing;
		assert lock.canread;
		assert lock.timedwaitread(0);
		assert !lock.canwrite;
		assert !lock.timedwaitwrite(0);
		/* Read-locks must always allow for recursion */
		with (lock.readlock) {
			assert lock.reading;
			assert !lock.writing;
			assert lock.canread;
			assert lock.timedwaitread(0);
			assert !lock.canwrite;
			assert !lock.timedwaitwrite(0);
		}
		assert lock.reading;
		assert !lock.writing;
		assert lock.canread;
		assert lock.timedwaitread(0);
		assert !lock.canwrite;
		assert !lock.timedwaitwrite(0);
	}
	assert !lock.reading;
	assert !lock.writing;
	assert lock.canread;
	assert lock.timedwaitread(0);
	assert lock.canwrite;
	assert lock.timedwaitwrite(0);

	with (lock.writelock) {
		assert !lock.tryupgrade(), "write-lock can't be upgraded";
		assert lock.reading;
		assert lock.writing;
		assert isRecursive ? lock.canread : !lock.canread;
		assert isRecursive ? lock.timedwaitread(0) : !lock.timedwaitread(0);
		assert isRecursive ? lock.canwrite : !lock.canwrite;
		assert isRecursive ? lock.timedwaitwrite(0) : !lock.timedwaitwrite(0);
	}
	assert !lock.reading;
	assert !lock.writing;
	assert lock.canread;
	assert lock.timedwaitread(0);
	assert lock.canwrite;
	assert lock.timedwaitwrite(0);

	/* Recursive RWLocks must allow for read-after-write */
	if (isRecursive) {
		with (lock.writelock) {
			assert lock.reading;
			assert lock.writing;
			assert lock.canread;
			assert lock.timedwaitread(0);
			assert lock.canwrite;
			assert lock.timedwaitwrite(0);
			with (lock.readlock) {
				assert lock.reading;
				assert lock.writing;
				assert lock.canread;
				assert lock.timedwaitread(0);
				assert lock.canwrite;
				assert lock.timedwaitwrite(0);
				assert !lock.tryupgrade(), "write-lock can't be upgraded";
			}

			with (lock.writelock) { /* Write-locks are recursive here! */
				assert lock.reading;
				assert lock.writing;
				assert lock.canread;
				assert lock.timedwaitread(0);
				assert lock.canwrite;
				assert lock.timedwaitwrite(0);
			}

			lock.read(); /* Read-after-write must behave the same as write-after-write */
			assert lock.reading;
			assert lock.writing;
			assert lock.canread;
			assert lock.timedwaitread(0);
			assert lock.canwrite;
			assert lock.timedwaitwrite(0);
			lock.endread();

			lock.write();
			assert lock.reading;
			assert lock.writing;
			assert lock.canread;
			assert lock.timedwaitread(0);
			assert lock.canwrite;
			assert lock.timedwaitwrite(0);
			lock.endwrite();

			lock.timedread(0);
			assert lock.reading;
			assert lock.writing;
			assert lock.canread;
			assert lock.timedwaitread(0);
			assert lock.canwrite;
			assert lock.timedwaitwrite(0);
			lock.endread();

			lock.timedwrite(0);
			assert lock.reading;
			assert lock.writing;
			assert lock.canread;
			assert lock.timedwaitread(0);
			assert lock.canwrite;
			assert lock.timedwaitwrite(0);
			lock.endwrite();

			lock.read();
			assert lock.reading;
			assert lock.writing;
			assert lock.canread;
			assert lock.timedwaitread(0);
			assert lock.canwrite;
			assert lock.timedwaitwrite(0);
			lock.end();

			lock.write();
			assert lock.reading;
			assert lock.writing;
			assert lock.canread;
			assert lock.timedwaitread(0);
			assert lock.canwrite;
			assert lock.timedwaitwrite(0);
			lock.end();

			assert lock.reading;
			assert lock.writing;
			assert lock.canread;
			assert lock.timedwaitread(0);
			assert lock.canwrite;
			assert lock.timedwaitwrite(0);
		}
		assert !lock.reading;
		assert !lock.writing;
		assert lock.canread;
		assert lock.timedwaitread(0);
		assert lock.canwrite;
		assert lock.timedwaitwrite(0);
	}

	testLock(lock.readlock, isReadLockOrRecursive: true);
	testLock(lock.writelock, isReadLockOrRecursive: isRecursive);
	testLock(all(lock.readlock), isReadLockOrRecursive: true);
	testLock(all(lock.writelock), isReadLockOrRecursive: isRecursive);
}

testLock(AtomicLock());
testLock(SharedLock());
testLock(RAtomicLock(), isReadLockOrRecursive: true);
testLock(RSharedLock(), isReadLockOrRecursive: true);
testLock(Semaphore(1));
testRWLock(AtomicRWLock());
testRWLock(SharedRWLock());
testRWLock(RAtomicRWLock(), isRecursive: true);
testRWLock(RSharedRWLock(), isRecursive: true);

local lock = AtomicLock();
assert all(lock) === lock,
	"When given a single argument, `threading.all' should re-return that argument";

/* Test `LockUnion()' with multiple locks (and
 * assert that it correctly affects referenced
 * locks) */
for (local locks: {
	{ AtomicLock(), AtomicLock() },
	{ AtomicLock(), SharedLock() },
}) {
	testLock(all(locks...));
	testLock(all(locks...), testLocks: locks);
	testLock(LockUnion(locks));
	testLock(LockUnion(locks), testLocks: locks);
	local allLock = all(locks...);
	assert allLock is LockUnion;
	testLock(allLock, testLocks: { allLock, locks... });
}

/* Assert that built-in lock types are derived from each other in a proper manner. */
assert LockUnion.derivedfrom(Lock);
assert AtomicLock.derivedfrom(Lock);
assert SharedLock.derivedfrom(Lock);
assert SharedLock.derivedfrom(AtomicLock);
assert RAtomicLock.derivedfrom(Lock);
assert RSharedLock.derivedfrom(Lock);
assert RSharedLock.derivedfrom(RAtomicLock);
assert AtomicRWLock.derivedfrom(RWLock);
assert SharedRWLock.derivedfrom(RWLock);
assert SharedRWLock.derivedfrom(AtomicRWLock);
assert RAtomicRWLock.derivedfrom(RWLock);
assert RSharedRWLock.derivedfrom(RWLock);
assert RSharedRWLock.derivedfrom(RAtomicRWLock);


function testEvent(e: Event) {
	assert !e.isset;

	e.set();
	assert e.isset;

	e.clear();
	assert !e.isset;

	e.isset = true;
	assert e.isset;

	e.isset = false;
	assert !e.isset;
}

testEvent(Event());
