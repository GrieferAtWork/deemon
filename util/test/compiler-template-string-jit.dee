#!/usr/bin/deemon
/* Copyright (c) 2018-2023 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2023 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

import * from deemon;

/* Same as the normal template-string test, but for the JIT compiler. */

local x = 42;
assert exec('F"before{x + 2}after"', globals: { .x = x }) == "before44after";
assert exec('f"before{x + 2}after"', globals: { .x = x }) == "before44after";
assert exec("f'before{x + 2}after'", globals: { .x = x }) == "before44after";
assert exec("f\"before{'abc' + x}after\"", globals: { .x = x }) == "beforeabc42after";
assert exec('f\'before{"abc" + x}after\'', globals: { .x = x }) == "beforeabc42after";
assert exec('f"before{"abc" + x}after"', globals: { .x = x }) == "beforeabc42after";
assert exec("f'before{'abc' + x}after'", globals: { .x = x }) == "beforeabc42after";
assert exec('f"before{\'"\' + x}after"', globals: { .x = x }) == "before\"42after";
assert exec("f'before{\"'\" + x}after'", globals: { .x = x }) == "before\'42after";
assert exec(r"f'\{'") == '{';
assert exec(r"f'\}'") == '}';
assert exec("f'{{'") == '{';
assert exec("f'}}'") == '}';

assert exec('f"before{x + 2}after".ljust(60)', globals: { .x = x }) == "before44after".ljust(60);
assert exec("f'before{x + 2}after'.ljust(60)", globals: { .x = x }) == "before44after".ljust(60);
assert exec("f\"before{'abc' + x}after\".ljust(60)", globals: { .x = x }) == "beforeabc42after".ljust(60);
assert exec('f\'before{"abc" + x}after\'.ljust(60)', globals: { .x = x }) == "beforeabc42after".ljust(60);
assert exec('f"before{"abc" + x}after".ljust(60)', globals: { .x = x }) == "beforeabc42after".ljust(60);
assert exec("f'before{'abc' + x}after'.ljust(60)", globals: { .x = x }) == "beforeabc42after".ljust(60);
assert exec('f"before{\'"\' + x}after".ljust(60)', globals: { .x = x }) == "before\"42after".ljust(60);
assert exec("f'before{\"'\" + x}after'.ljust(60)", globals: { .x = x }) == "before\'42after".ljust(60);
assert exec(r"f'\{'.ljust(60)") == '{'.ljust(60);
assert exec(r"f'\}'.ljust(60)") == '}'.ljust(60);
assert exec("f'{{'.ljust(60)") == '{'.ljust(60);
assert exec("f'}}'.ljust(60)") == '}'.ljust(60);

