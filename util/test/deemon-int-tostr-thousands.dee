#!/usr/bin/deemon
/* Copyright (c) 2018-2023 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2023 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */
import * from deemon;

/* Assert that the integer tostr function works for thousands groupings
 * Note that for this purpose, a leading '_' separating the radix prefix
 * is NOT included (as it is not considered to be canonical, even though
 * the compiler and standard explicitly state that it is acceptable) */
function assertToStrHex(i: int, precision: int, expected: string) {
	assert i.tostr(16, precision, "_") == expected;
	assert i.tostr(16, precision, "X_") == expected.upper();
	assert i.tostr(16, precision, "#_") == "0x" + expected;
	assert i.tostr(16, precision, "#X_") == "0X" + expected.upper();
	assert i.tostr(16, precision, "+_") == "+" + expected;
	assert i.tostr(16, precision, "+X_") == "+" + expected.upper();
	assert i.tostr(16, precision, "+#_") == "+0x" + expected;
	assert i.tostr(16, precision, "+#X_") == "+0X" + expected.upper();
	assert (-i).tostr(16, precision, "_") == "-" + expected;
	assert (-i).tostr(16, precision, "X_") == "-" + expected.upper();
	assert (-i).tostr(16, precision, "#_") == "-0x" + expected;
	assert (-i).tostr(16, precision, "#X_") == "-0X" + expected.upper();
	assert (-i).tostr(16, precision, "+_") == "-" + expected;
	assert (-i).tostr(16, precision, "+X_") == "-" + expected.upper();
	assert (-i).tostr(16, precision, "+#_") == "-0x" + expected;
	assert (-i).tostr(16, precision, "+#X_") == "-0X" + expected.upper();
}

function assertToStrDec(i: int, precision: int, expected: string) {
	assert i.tostr(10, precision, "_") == expected;
	assert i.tostr(10, precision, "+_") == "+" + expected;
	assert (-i).tostr(10, precision, "_") == "-" + expected;
	assert (-i).tostr(10, precision, "+_") == "-" + expected;
}

for (local i: [:9])
	assertToStrHex(0xffffffff, i, "ffff_ffff");
for (local i: [:17])
	assertToStrHex(0x12345678ffffffff, i, "1234_5678_ffff_ffff");
assertToStrHex(0xffffffff, 9, "0_ffff_ffff");
assertToStrHex(0xffffffff, 10, "00_ffff_ffff");
assertToStrHex(0xffffffff, 11, "000_ffff_ffff");
assertToStrHex(0xffffffff, 12, "0000_ffff_ffff");
assertToStrHex(0xffffffff, 13, "0_0000_ffff_ffff");
assertToStrHex(0xffffffff, 14, "00_0000_ffff_ffff");
assertToStrHex(0xffffffff, 15, "000_0000_ffff_ffff");
assertToStrHex(0xffffffff, 16, "0000_0000_ffff_ffff");

for (local i: [:2])
	assertToStrHex(0x1, i, "1");
for (local i: [:3])
	assertToStrHex(0x12, i, "12");
for (local i: [:4])
	assertToStrHex(0x123, i, "123");
for (local i: [:5])
	assertToStrHex(0x1234, i, "1234");
for (local i: [:6])
	assertToStrHex(0x12345, i, "1_2345");
for (local i: [:7])
	assertToStrHex(0x123456, i, "12_3456");
for (local i: [:8])
	assertToStrHex(0x1234567, i, "123_4567");
for (local i: [:9])
	assertToStrHex(0x12345678, i, "1234_5678");

assertToStrHex(0x1, 2, "01");
assertToStrHex(0x1, 3, "001");
assertToStrHex(0x1, 4, "0001");
assertToStrHex(0x1, 5, "0_0001");
assertToStrHex(0x1, 6, "00_0001");
assertToStrHex(0x1, 7, "000_0001");
assertToStrHex(0x1, 8, "0000_0001");
assertToStrHex(0x1, 9, "0_0000_0001");

assertToStrHex(0x12, 3, "012");
assertToStrHex(0x12, 4, "0012");
assertToStrHex(0x12, 5, "0_0012");
assertToStrHex(0x12, 6, "00_0012");
assertToStrHex(0x12, 7, "000_0012");
assertToStrHex(0x12, 8, "0000_0012");
assertToStrHex(0x12, 9, "0_0000_0012");

assertToStrHex(0x123, 4, "0123");
assertToStrHex(0x123, 5, "0_0123");
assertToStrHex(0x123, 6, "00_0123");
assertToStrHex(0x123, 7, "000_0123");
assertToStrHex(0x123, 8, "0000_0123");
assertToStrHex(0x123, 9, "0_0000_0123");

assertToStrHex(0x1234, 5, "0_1234");
assertToStrHex(0x1234, 6, "00_1234");
assertToStrHex(0x1234, 7, "000_1234");
assertToStrHex(0x1234, 8, "0000_1234");
assertToStrHex(0x1234, 9, "0_0000_1234");

assertToStrHex(0x12345, 6, "01_2345");
assertToStrHex(0x12345, 7, "001_2345");
assertToStrHex(0x12345, 8, "0001_2345");
assertToStrHex(0x12345, 9, "0_0001_2345");

assertToStrHex(0x123456, 7, "012_3456");
assertToStrHex(0x123456, 8, "0012_3456");
assertToStrHex(0x123456, 9, "0_0012_3456");

assertToStrHex(0x1234567, 8, "0123_4567");
assertToStrHex(0x1234567, 9, "0_0123_4567");

assertToStrHex(0x12345678, 9, "0_1234_5678");


assertToStrDec(1, 0, "1");
assertToStrDec(1, 1, "1");
assertToStrDec(1, 2, "01");
assertToStrDec(1, 3, "001");
assertToStrDec(1, 4, "0_001");
assertToStrDec(1, 5, "00_001");
assertToStrDec(1, 6, "000_001");
assertToStrDec(1, 7, "0_000_001");
assertToStrDec(1, 8, "00_000_001");
assertToStrDec(1, 9, "000_000_001");
assertToStrDec(1, 10, "0_000_000_001");

assertToStrDec(12, 0, "12");
assertToStrDec(12, 1, "12");
assertToStrDec(12, 2, "12");
assertToStrDec(12, 3, "012");
assertToStrDec(12, 4, "0_012");
assertToStrDec(12, 5, "00_012");
assertToStrDec(12, 6, "000_012");
assertToStrDec(12, 7, "0_000_012");
assertToStrDec(12, 8, "00_000_012");
assertToStrDec(12, 9, "000_000_012");
assertToStrDec(12, 10, "0_000_000_012");

assertToStrDec(123, 0, "123");
assertToStrDec(123, 1, "123");
assertToStrDec(123, 2, "123");
assertToStrDec(123, 3, "123");
assertToStrDec(123, 4, "0_123");
assertToStrDec(123, 5, "00_123");
assertToStrDec(123, 6, "000_123");
assertToStrDec(123, 7, "0_000_123");
assertToStrDec(123, 8, "00_000_123");
assertToStrDec(123, 9, "000_000_123");
assertToStrDec(123, 10, "0_000_000_123");

assertToStrDec(1234, 0, "1_234");
assertToStrDec(1234, 1, "1_234");
assertToStrDec(1234, 2, "1_234");
assertToStrDec(1234, 3, "1_234");
assertToStrDec(1234, 4, "1_234");
assertToStrDec(1234, 5, "01_234");
assertToStrDec(1234, 6, "001_234");
assertToStrDec(1234, 7, "0_001_234");
assertToStrDec(1234, 8, "00_001_234");
assertToStrDec(1234, 9, "000_001_234");
assertToStrDec(1234, 10, "0_000_001_234");

assertToStrDec(12345, 0, "12_345");
assertToStrDec(12345, 1, "12_345");
assertToStrDec(12345, 2, "12_345");
assertToStrDec(12345, 3, "12_345");
assertToStrDec(12345, 4, "12_345");
assertToStrDec(12345, 5, "12_345");
assertToStrDec(12345, 6, "012_345");
assertToStrDec(12345, 7, "0_012_345");
assertToStrDec(12345, 8, "00_012_345");
assertToStrDec(12345, 9, "000_012_345");
assertToStrDec(12345, 10, "0_000_012_345");

assertToStrDec(123456, 0, "123_456");
assertToStrDec(123456, 1, "123_456");
assertToStrDec(123456, 2, "123_456");
assertToStrDec(123456, 3, "123_456");
assertToStrDec(123456, 4, "123_456");
assertToStrDec(123456, 5, "123_456");
assertToStrDec(123456, 6, "123_456");
assertToStrDec(123456, 7, "0_123_456");
assertToStrDec(123456, 8, "00_123_456");
assertToStrDec(123456, 9, "000_123_456");
assertToStrDec(123456, 10, "0_000_123_456");

assertToStrDec(1234567, 0, "1_234_567");
assertToStrDec(1234567, 1, "1_234_567");
assertToStrDec(1234567, 2, "1_234_567");
assertToStrDec(1234567, 3, "1_234_567");
assertToStrDec(1234567, 4, "1_234_567");
assertToStrDec(1234567, 5, "1_234_567");
assertToStrDec(1234567, 6, "1_234_567");
assertToStrDec(1234567, 7, "1_234_567");
assertToStrDec(1234567, 8, "01_234_567");
assertToStrDec(1234567, 9, "001_234_567");
assertToStrDec(1234567, 10, "0_001_234_567");

assertToStrDec(12345678, 0, "12_345_678");
assertToStrDec(12345678, 1, "12_345_678");
assertToStrDec(12345678, 2, "12_345_678");
assertToStrDec(12345678, 3, "12_345_678");
assertToStrDec(12345678, 4, "12_345_678");
assertToStrDec(12345678, 5, "12_345_678");
assertToStrDec(12345678, 6, "12_345_678");
assertToStrDec(12345678, 7, "12_345_678");
assertToStrDec(12345678, 8, "12_345_678");
assertToStrDec(12345678, 9, "012_345_678");
assertToStrDec(12345678, 10, "0_012_345_678");

assertToStrDec(123456789, 0, "123_456_789");
assertToStrDec(123456789, 1, "123_456_789");
assertToStrDec(123456789, 2, "123_456_789");
assertToStrDec(123456789, 3, "123_456_789");
assertToStrDec(123456789, 4, "123_456_789");
assertToStrDec(123456789, 5, "123_456_789");
assertToStrDec(123456789, 6, "123_456_789");
assertToStrDec(123456789, 7, "123_456_789");
assertToStrDec(123456789, 8, "123_456_789");
assertToStrDec(123456789, 9, "123_456_789");
assertToStrDec(123456789, 10, "0_123_456_789");

assertToStrDec(1234567890, 0, "1_234_567_890");
assertToStrDec(1234567890, 1, "1_234_567_890");
assertToStrDec(1234567890, 2, "1_234_567_890");
assertToStrDec(1234567890, 3, "1_234_567_890");
assertToStrDec(1234567890, 4, "1_234_567_890");
assertToStrDec(1234567890, 5, "1_234_567_890");
assertToStrDec(1234567890, 6, "1_234_567_890");
assertToStrDec(1234567890, 7, "1_234_567_890");
assertToStrDec(1234567890, 8, "1_234_567_890");
assertToStrDec(1234567890, 9, "1_234_567_890");
assertToStrDec(1234567890, 10, "1_234_567_890");
