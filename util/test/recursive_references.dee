#!/usr/bin/deemon
/* Copyright (c) 2019 Griefer@Work                                            *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement in the product documentation would be  *
 *    appreciated but is not required.                                        *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */
#define PREVENT_OPTIMIZATIONS(x) __asm__("" : "+x" (x))

/* With the introduction of the new symbol system, symbol references are
 * handled implicitly internally. Because of this, the assembler must be
 * able to recursively remember previous indices of referenced variables
 * when the scope using them is located more than a single scope below
 * an outer function also using them. */

local a = "a";
local b = "b";
local c = "c";

/* Prevent variables from being propagated, as them being turned into
 * constants would really test the validity of recursively referenced
 * symbol. */
PREVENT_OPTIMIZATIONS(a);
PREVENT_OPTIMIZATIONS(b);
PREVENT_OPTIMIZATIONS(c);

function outer() {
	assert a == "a";
	assert b == "b";
	assert c == "c";
	function inner() {
		function inner2() {
			/* Access referenced symbols in reverse order, thus
			 * teasing the assembler to change the internally used
			 * reference indices, overwriting their previous values,
			 * thus allowing the use by an outer scope below to ensure
			 * that upon return from inner functions, the original
			 * reference indices are being restored. */
			assert c == "c";
			assert b == "b";
			assert a == "a";
		}
		PREVENT_OPTIMIZATIONS(inner2);
		inner2();
	}
	PREVENT_OPTIMIZATIONS(inner);
	inner();
	function inner2() {
		assert c == "c";
		assert b == "b";
		assert a == "a";
	}
	PREVENT_OPTIMIZATIONS(inner2);
	inner2();
	/* Make sure that the compiler didn't mess up referece indices. */
	assert a == "a";
	assert b == "b";
	assert c == "c";
}
PREVENT_OPTIMIZATIONS(outer);

outer();


