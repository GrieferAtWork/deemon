#!/usr/bin/deemon
/* Copyright (c) 2018-2024 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2024 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */
import * from deemon;

global final testvar1 = Dict(() -> {
	yield ("DEB", 1);
	yield ("NDEB", 2);
	yield ("3", 3);
	yield ("4", 4);
}());

assert #testvar1 == 4;
assert #testvar1.keys == 4;
assert #testvar1.values == 4;
assert #testvar1.items == 4;
assert #List(testvar1.keys) == 4;
assert #List(testvar1.values) == 4;
assert #List(testvar1.items) == 4;



global final testvar2 = Dict.Frozen(() -> {
	yield ("DEB", 1);
	yield ("NDEB", 2);
	yield ("3", 3);
	yield ("4", 4);
}());

assert #testvar2 == 4;
assert #testvar2.keys == 4;
assert #testvar2.values == 4;
assert #testvar2.items == 4;
assert #List(testvar2.keys) == 4;
assert #List(testvar2.values) == 4;
assert #List(testvar2.items) == 4;



global final testvar3 = HashSet(() -> {
	yield "DEB";
	yield "NDEB";
	yield "3";
	yield "4";
}());

assert #testvar3 == 4;
assert #List(testvar3) == 4;



global final testvar4 = HashSet.Frozen(() -> {
	yield "DEB";
	yield "NDEB";
	yield "3";
	yield "4";
}());

assert #testvar4 == 4;
assert #List(testvar4) == 4;
