#!/usr/bin/deemon
/* Copyright (c) 2018-2025 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2025 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

import * from deemon;
import rt;

function assertEquals(a, b) {
	assert equals(a, b);
	assert equals(b, a);
	assert a == b;
	assert b == a;
	assert !(a != b);
	assert !(b != a);
}



local withValue = Mapping.fromkeys(
	keys: { 10, 20, 30, 10 },
	value: "value"
);
local withValuefor = Mapping.fromkeys(
	keys: { 10, 20, 30, 10 },
	valuefor: key -> str(100 + key)
);

assert withValue is rt.MapFromKeysAndValue;
assert withValuefor is rt.MapFromKeysAndCallback;

assertEquals(withValue, {
	10: "value",
	20: "value",
	30: "value",
});

assertEquals(withValuefor, {
	10: "110",
	20: "120",
	30: "130",
});
