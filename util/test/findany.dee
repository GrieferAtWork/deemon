#!/usr/bin/deemon
/* Copyright (c) 2018-2021 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2021 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

local text = "*+#";

/* findany: Find the lowest position of any of the given sub-strings. */
assert text.findany({ }) is none;
assert text.findany({ "" }) is none;
assert text.findany({ "", "+" }) == 1;
assert text.findany({ "+", "" }) == 1;
assert text.findany({ "*" }) == 0;
assert text.findany({ "+" }) == 1;
assert text.findany({ "#" }) == 2;
assert text.findany({ "+#" }) == 1;
assert text.findany({ "#+" }) is none;
assert text.findany({ "#+", "#" }) == 2;
assert text.findany({ "+#", "#" }) == 1;
assert text.findany({ "#", "#+" }) == 2;
assert text.findany({ "#", "+#" }) == 1;
assert text.findany({ "*+", "*" }) == 0;
assert text.findany({ "+*", "*" }) == 0;
assert text.findany({ "*", "*+" }) == 0;
assert text.findany({ "*", "+*" }) == 0;
assert text.findany({ "*+", "+" }) == 0;
assert text.findany({ "+*", "+" }) == 1;
assert text.findany({ "+", "*+" }) == 0;
assert text.findany({ "+", "+*" }) == 1;

assert text.rfindany({ }) is none;
assert text.rfindany({ "" }) is none;
assert text.rfindany({ "", "+" }) == 1;
assert text.rfindany({ "+", "" }) == 1;
assert text.rfindany({ "*" }) == 0;
assert text.rfindany({ "+" }) == 1;
assert text.rfindany({ "#" }) == 2;
assert text.rfindany({ "+#" }) == 1;
assert text.rfindany({ "#+" }) is none;
assert text.rfindany({ "#+", "#" }) == 2;
assert text.rfindany({ "+#", "#" }) == 2;
assert text.rfindany({ "#", "#+" }) == 2;
assert text.rfindany({ "#", "+#" }) == 2;
assert text.rfindany({ "*+", "*" }) == 0;
assert text.rfindany({ "+*", "*" }) == 0;
assert text.rfindany({ "*", "*+" }) == 0;
assert text.rfindany({ "*", "+*" }) == 0;
assert text.rfindany({ "*+", "+" }) == 1;
assert text.rfindany({ "+*", "+" }) == 1;
assert text.rfindany({ "+", "*+" }) == 1;
assert text.rfindany({ "+", "+*" }) == 1;

assert text.casefindany({ }) is none;
assert text.casefindany({ "" }) is none;
assert text.casefindany({ "", "+" }) == (1, 2);
assert text.casefindany({ "+", "" }) == (1, 2);
assert text.casefindany({ "*" }) == (0, 1);
assert text.casefindany({ "+" }) == (1, 2);
assert text.casefindany({ "#" }) == (2, 3);
assert text.casefindany({ "+#" }) == (1, 3);
assert text.casefindany({ "#+" }) is none;
assert text.casefindany({ "#+", "#" }) == (2, 3);
assert text.casefindany({ "+#", "#" }) == (1, 3);
assert text.casefindany({ "#", "#+" }) == (2, 3);
assert text.casefindany({ "#", "+#" }) == (1, 3);
assert text.casefindany({ "*+", "*" }) == (0, 2);
assert text.casefindany({ "+*", "*" }) == (0, 1);
assert text.casefindany({ "*", "*+" }) == (0, 1);
assert text.casefindany({ "*", "+*" }) == (0, 1);
assert text.casefindany({ "*+", "+" }) == (0, 2);
assert text.casefindany({ "+*", "+" }) == (1, 2);
assert text.casefindany({ "+", "*+" }) == (0, 2);
assert text.casefindany({ "+", "+*" }) == (1, 2);

assert text.caserfindany({ }) is none;
assert text.caserfindany({ "" }) is none;
assert text.caserfindany({ "", "+" }) == (1, 2);
assert text.caserfindany({ "+", "" }) == (1, 2);
assert text.caserfindany({ "*" }) == (0, 1);
assert text.caserfindany({ "+" }) == (1, 2);
assert text.caserfindany({ "#" }) == (2, 3);
assert text.caserfindany({ "+#" }) == (1, 3);
assert text.caserfindany({ "#+" }) is none;
assert text.caserfindany({ "#+", "#" }) == (2, 3);
assert text.caserfindany({ "+#", "#" }) == (2, 3);
assert text.caserfindany({ "#", "#+" }) == (2, 3);
assert text.caserfindany({ "#", "+#" }) == (2, 3);
assert text.caserfindany({ "*+", "*" }) == (0, 1);
assert text.caserfindany({ "+*", "*" }) == (0, 1);
assert text.caserfindany({ "*", "*+" }) == (0, 2);
assert text.caserfindany({ "*", "+*" }) == (0, 1);
assert text.caserfindany({ "*+", "+" }) == (1, 2);
assert text.caserfindany({ "+*", "+" }) == (1, 2);
assert text.caserfindany({ "+", "*+" }) == (1, 2);
assert text.caserfindany({ "+", "+*" }) == (1, 2);
















