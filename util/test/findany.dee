#!/usr/bin/deemon
/* Copyright (c) 2018-2022 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2022 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

import * from deemon;

local text  = "*+#";
local bytes = text.bytes();

function callFindAnyFunctions(name: string, needles: {string...}) {
	local a = text.operator . (name)(needles);
	local b = bytes.operator . (name)(needles);
	assert a == b;
	local c = bytes.operator . (name)(for (local s: needles) s.bytes());
	assert a == c;
	local indexName = name.replace("find", "index");
	if (a !is none) {
		local ia = text.operator . (indexName)(needles);
		assert a == ia;
		local ib = bytes.operator . (indexName)(needles);
		assert a == ib;
		local ic = bytes.operator . (indexName)(for (local s: needles) s.bytes());
		assert a == ic;
	} else {
		import IndexError from errors;
		local ia = try ({ text.operator . (indexName)(needles); false; }) catch (IndexError) none;
		assert ia is none;
		local ib = try ({ bytes.operator . (indexName)(needles); false; }) catch (IndexError) none;
		assert ib is none;
		local ic = try ({ bytes.operator . (indexName)(for (local s: needles) s.bytes()); false; }) catch (IndexError) none;
		assert ic is none;
	}
	return a;
}

/* findany: Find the lowest position of any of the given sub-strings. */
assert callFindAnyFunctions("findany", { }) is none;
assert callFindAnyFunctions("findany", { "" }) is none;
assert callFindAnyFunctions("findany", { "", "+" }) == 1;
assert callFindAnyFunctions("findany", { "+", "" }) == 1;
assert callFindAnyFunctions("findany", { "*" }) == 0;
assert callFindAnyFunctions("findany", { "+" }) == 1;
assert callFindAnyFunctions("findany", { "#" }) == 2;
assert callFindAnyFunctions("findany", { "+#" }) == 1;
assert callFindAnyFunctions("findany", { "#+" }) is none;
assert callFindAnyFunctions("findany", { "#+", "#" }) == 2;
assert callFindAnyFunctions("findany", { "+#", "#" }) == 1;
assert callFindAnyFunctions("findany", { "#", "#+" }) == 2;
assert callFindAnyFunctions("findany", { "#", "+#" }) == 1;
assert callFindAnyFunctions("findany", { "*+", "*" }) == 0;
assert callFindAnyFunctions("findany", { "+*", "*" }) == 0;
assert callFindAnyFunctions("findany", { "*", "*+" }) == 0;
assert callFindAnyFunctions("findany", { "*", "+*" }) == 0;
assert callFindAnyFunctions("findany", { "*+", "+" }) == 0;
assert callFindAnyFunctions("findany", { "+*", "+" }) == 1;
assert callFindAnyFunctions("findany", { "+", "*+" }) == 0;
assert callFindAnyFunctions("findany", { "+", "+*" }) == 1;

assert callFindAnyFunctions("rfindany", { }) is none;
assert callFindAnyFunctions("rfindany", { "" }) is none;
assert callFindAnyFunctions("rfindany", { "", "+" }) == 1;
assert callFindAnyFunctions("rfindany", { "+", "" }) == 1;
assert callFindAnyFunctions("rfindany", { "*" }) == 0;
assert callFindAnyFunctions("rfindany", { "+" }) == 1;
assert callFindAnyFunctions("rfindany", { "#" }) == 2;
assert callFindAnyFunctions("rfindany", { "+#" }) == 1;
assert callFindAnyFunctions("rfindany", { "#+" }) is none;
assert callFindAnyFunctions("rfindany", { "#+", "#" }) == 2;
assert callFindAnyFunctions("rfindany", { "+#", "#" }) == 2;
assert callFindAnyFunctions("rfindany", { "#", "#+" }) == 2;
assert callFindAnyFunctions("rfindany", { "#", "+#" }) == 2;
assert callFindAnyFunctions("rfindany", { "*+", "*" }) == 0;
assert callFindAnyFunctions("rfindany", { "+*", "*" }) == 0;
assert callFindAnyFunctions("rfindany", { "*", "*+" }) == 0;
assert callFindAnyFunctions("rfindany", { "*", "+*" }) == 0;
assert callFindAnyFunctions("rfindany", { "*+", "+" }) == 1;
assert callFindAnyFunctions("rfindany", { "+*", "+" }) == 1;
assert callFindAnyFunctions("rfindany", { "+", "*+" }) == 1;
assert callFindAnyFunctions("rfindany", { "+", "+*" }) == 1;

assert callFindAnyFunctions("casefindany", { }) is none;
assert callFindAnyFunctions("casefindany", { "" }) is none;
assert callFindAnyFunctions("casefindany", { "", "+" }) == (1, 2);
assert callFindAnyFunctions("casefindany", { "+", "" }) == (1, 2);
assert callFindAnyFunctions("casefindany", { "*" }) == (0, 1);
assert callFindAnyFunctions("casefindany", { "+" }) == (1, 2);
assert callFindAnyFunctions("casefindany", { "#" }) == (2, 3);
assert callFindAnyFunctions("casefindany", { "+#" }) == (1, 3);
assert callFindAnyFunctions("casefindany", { "#+" }) is none;
assert callFindAnyFunctions("casefindany", { "#+", "#" }) == (2, 3);
assert callFindAnyFunctions("casefindany", { "+#", "#" }) == (1, 3);
assert callFindAnyFunctions("casefindany", { "#", "#+" }) == (2, 3);
assert callFindAnyFunctions("casefindany", { "#", "+#" }) == (1, 3);
assert callFindAnyFunctions("casefindany", { "*+", "*" }) == (0, 2);
assert callFindAnyFunctions("casefindany", { "+*", "*" }) == (0, 1);
assert callFindAnyFunctions("casefindany", { "*", "*+" }) == (0, 1);
assert callFindAnyFunctions("casefindany", { "*", "+*" }) == (0, 1);
assert callFindAnyFunctions("casefindany", { "*+", "+" }) == (0, 2);
assert callFindAnyFunctions("casefindany", { "+*", "+" }) == (1, 2);
assert callFindAnyFunctions("casefindany", { "+", "*+" }) == (0, 2);
assert callFindAnyFunctions("casefindany", { "+", "+*" }) == (1, 2);

assert callFindAnyFunctions("caserfindany", { }) is none;
assert callFindAnyFunctions("caserfindany", { "" }) is none;
assert callFindAnyFunctions("caserfindany", { "", "+" }) == (1, 2);
assert callFindAnyFunctions("caserfindany", { "+", "" }) == (1, 2);
assert callFindAnyFunctions("caserfindany", { "*" }) == (0, 1);
assert callFindAnyFunctions("caserfindany", { "+" }) == (1, 2);
assert callFindAnyFunctions("caserfindany", { "#" }) == (2, 3);
assert callFindAnyFunctions("caserfindany", { "+#" }) == (1, 3);
assert callFindAnyFunctions("caserfindany", { "#+" }) is none;
assert callFindAnyFunctions("caserfindany", { "#+", "#" }) == (2, 3);
assert callFindAnyFunctions("caserfindany", { "+#", "#" }) == (2, 3);
assert callFindAnyFunctions("caserfindany", { "#", "#+" }) == (2, 3);
assert callFindAnyFunctions("caserfindany", { "#", "+#" }) == (2, 3);
assert callFindAnyFunctions("caserfindany", { "*+", "*" }) == (0, 1);
assert callFindAnyFunctions("caserfindany", { "+*", "*" }) == (0, 1);
assert callFindAnyFunctions("caserfindany", { "*", "*+" }) == (0, 2);
assert callFindAnyFunctions("caserfindany", { "*", "+*" }) == (0, 1);
assert callFindAnyFunctions("caserfindany", { "*+", "+" }) == (1, 2);
assert callFindAnyFunctions("caserfindany", { "+*", "+" }) == (1, 2);
assert callFindAnyFunctions("caserfindany", { "+", "*+" }) == (1, 2);
assert callFindAnyFunctions("caserfindany", { "+", "+*" }) == (1, 2);
















