#!/usr/bin/deemon
/* Copyright (c) 2019 Griefer@Work                                            *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement in the product documentation would be  *
 *    appreciated but is not required.                                        *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

import * from deemon;

function assert_range(r,e) {
	assert r == e;
	assert (!!r) == (!!e), "{!r}, {!r}".format({
		r as Sequence,
		e as Sequence
	});
	local n = #e;
	assert #r == n;
	for (local i = 0; i < n; ++i)
		assert r[i] == e[i];
	for (local x: e)
		assert x in r;
}

class IntWrapper: Numeric {
	public final member i: int = 0;
	this = default;
	operator ++ () { return IntWrapper(i + 1); }
	operator -- () { return IntWrapper(i - 1); }
	operator bool(): bool {
		return !!i;
	}
	operator + (): IntWrapper -> IntWrapper(+i);
	operator - (): IntWrapper -> IntWrapper(-i);
	operator + (x: IntWrapper): IntWrapper -> IntWrapper(i + (x is IntWrapper ? x.i : x));
	operator - (x: IntWrapper): IntWrapper -> IntWrapper(i - (x is IntWrapper ? x.i : x));
	operator * (x: IntWrapper): IntWrapper -> IntWrapper(i * (x is IntWrapper ? x.i : x));
	operator / (x: IntWrapper): IntWrapper -> IntWrapper(i / (x is IntWrapper ? x.i : x));
	operator % (x: IntWrapper): IntWrapper -> IntWrapper(i % (x is IntWrapper ? x.i : x));
	operator <  (x: IntWrapper): bool -> i <  (x is IntWrapper ? x.i : x);
	operator <= (x: IntWrapper): bool -> i <= (x is IntWrapper ? x.i : x);
	operator == (x: IntWrapper): bool -> i == (x is IntWrapper ? x.i : x);
	operator != (x: IntWrapper): bool -> i != (x is IntWrapper ? x.i : x);
	operator >  (x: IntWrapper): bool -> i >  (x is IntWrapper ? x.i : x);
	operator >= (x: IntWrapper): bool -> i >= (x is IntWrapper ? x.i : x);
}

#define iw  IntWrapper

assert_range([0:7],{0,1,2,3,4,5,6});
assert_range([0:7,1],{0,1,2,3,4,5,6});
assert_range([0:7,2],{0,2,4,6});
assert_range([0:7,3],{0,3,6});
assert_range([0:7,-1],{});
assert_range([0:7,-2],{});
assert_range([0:7,-3],{});
assert_range([7:0],{});
assert_range([7:0,1],{});
assert_range([7:0,2],{});
assert_range([7:0,3],{});
assert_range([7:0,-1],{7,6,5,4,3,2,1});
assert_range([7:0,-2],{7,5,3,1});
assert_range([7:0,-3],{7,4,1});

assert_range([iw(0):iw(7)],{0,1,2,3,4,5,6});
assert_range([iw(0):iw(7),iw(1)],{0,1,2,3,4,5,6});
assert_range([iw(0):iw(7),iw(2)],{0,2,4,6});
assert_range([iw(0):iw(7),iw(3)],{0,3,6});
assert_range([iw(0):iw(7),iw(-1)],{});
assert_range([iw(0):iw(7),iw(-2)],{});
assert_range([iw(0):iw(7),iw(-3)],{});
assert_range([iw(7):iw(0)],{});
assert_range([iw(7):iw(0),iw(1)],{});
assert_range([iw(7):iw(0),iw(2)],{});
assert_range([iw(7):iw(0),iw(3)],{});
assert_range([iw(7):iw(0),iw(-1)],{7,6,5,4,3,2,1});
assert_range([iw(7):iw(0),iw(-2)],{7,5,3,1});
assert_range([iw(7):iw(0),iw(-3)],{7,4,1});

/* Assert sub-range expressions allowed to range expressions */
assert [10:200][3:]      == [13:200];
assert [10:200][3:9]     == [13:19];
assert [10:200,10][3:]   == [40:200,10];
assert [10:200,10][3:9]  == [40:100,10];
assert [10:200,10][:-1]  == [10:190,10];
assert [200:10,-10][3:]  == [170:10,-10];
assert [200:10,-10][3:9] == [170:110,-10];
assert [200:10,-10][:-1] == [200:20,-10];

assert [iw(10):iw(200)][3:]          == [iw(13):iw(200)];
assert [iw(10):iw(200)][3:9]         == [iw(13):iw(19)];
assert [iw(10):iw(200),iw(10)][3:]   == [iw(40):iw(200),iw(10)];
assert [iw(10):iw(200),iw(10)][3:9]  == [iw(40):iw(100),iw(10)];
assert [iw(10):iw(200),iw(10)][:-1]  == [iw(10):iw(190),iw(10)];
assert [iw(10):iw(200),iw(10)][0:-1] == [iw(10):iw(190),iw(10)];
assert [iw(200):iw(10),iw(-10)][3:]  == [iw(170):iw(10),iw(-10)];
assert [iw(200):iw(10),iw(-10)][3:9] == [iw(170):iw(110),iw(-10)];
assert [iw(200):iw(10),iw(-10)][:-1] == [iw(200):iw(20),iw(-10)];













