#!/usr/bin/deemon
/* Copyright (c) 2018-2025 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2025 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

import * from deemon;
import * from errors;

#define TRY(x) (try x catch (e...) e)

/* Assert that "IntegerOverflow" errors can be compared to check for equality */
assert IntegerOverflow(positive: true).positive == true;
assert IntegerOverflow(positive: false).positive == false;
assert IntegerOverflow().positive == false;
assert IntegerOverflow(value: 1, minval: 2, maxval: 3, positive: true) == IntegerOverflow(value: 1, minval: 2, maxval: 3, positive: true);
assert IntegerOverflow(value: 1, minval: 2, maxval: 3, positive: true) != IntegerOverflow(value: 1, minval: 2, maxval: 3, positive: false);
assert IntegerOverflow(value: 1, minval: 2, maxval: 3, positive: true) != IntegerOverflow(value: 1, minval: 2, maxval: 4, positive: true);
assert IntegerOverflow(value: 1, minval: 2, maxval: 3, positive: true) != IntegerOverflow(value: 1, minval: 5, maxval: 3, positive: true);
assert IntegerOverflow(value: 1, minval: 2, maxval: 3, positive: true) != IntegerOverflow(value: 6, minval: 2, maxval: 3, positive: true);

/* Assert that "int.tobytes()" produces the expected "IntegerOverflow" errors when values are bad. */
assert { 0xff } == (0xff).tobytes(1);
assert { 0xff, 0xff } == (0xffff).tobytes(2);
assert IntegerOverflow(value: 0x1ff, minval: 0, maxval: 0xff, positive: true) == TRY((0x1ff).tobytes(1));
assert IntegerOverflow(value: -0x1ff, minval: 0, maxval: 0xff, positive: false) == TRY((-0x1ff).tobytes(1));
assert IntegerOverflow(value: -0xffff, minval: 0, maxval: 0xffff, positive: false) == TRY((-0xffff).tobytes(2));
assert IntegerOverflow(value: 0x1ffff, minval: 0, maxval: 0xffff, positive: true) == TRY((0x1ffff).tobytes(2));
