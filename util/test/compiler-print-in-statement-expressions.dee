#!/usr/bin/deemon
/* Copyright (c) 2018-2024 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2024 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */


import * from deemon;

local oldStdout = File.stdout;

local newStdout = File.Writer();
File.stdout = newStdout;
print "Line #1";
File.stdout = oldStdout;

assert newStdout.string == "Line #1\n";

local newStdout = File.Writer();
File.stdout = newStdout;

/* There used to be a parser bug that caused print (and a couple of
 * other) statementents at the start of a ({ })-hybrid statement to
 * be skipped without being parsed (causing the compiler to see the
 * next statement as: `({ "Line #2"; });' instead)
 *
 * hybrid because `({ a(), b(), c() })' is a 3-
 * element sequence, while `({ a(), b(), c(); })'
 * is a statement-in-expression construct that
 * evaluates to the value of `c()' */
({
	print "Line #2";
});
File.stdout = oldStdout;

assert newStdout.string == "Line #2\n";



