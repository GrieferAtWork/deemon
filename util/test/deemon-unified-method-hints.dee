/* Copyright (c) 2018-2025 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2025 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

import * from deemon;
import * from errors;
import rt;

/* Tests for stuff that only works under "CONFIG_EXPERIMENTAL_UNIFIED_METHOD_HINTS" */
if (!hasattr(rt, "SeqEnumWithSeqOperatorSizeAndGetItemIndexFast"))
	return; // "CONFIG_EXPERIMENTAL_UNIFIED_METHOD_HINTS" isn't enabled; don't run this test


class MyClass1 {
	this = default;
	final member mySize; /* "final" so "__seq_size__" needs a ref to "MyClass1" */
	__seq_size__() -> mySize;
}
class MyClass2: MyClass1 {
	this = super;
	__seq_size__() -> 42;
}

local a = MyClass1(10);
local b = MyClass2(20);

assert Sequence.length(a) == 10;
assert Sequence.length(b) == 42;
assert Sequence.length(b as MyClass1) == 20;

class MyClassWithIter1 {
	__seq_iter__() -> {10, 20}.operator iter();
}
class MyClassWithIter2 {
	operator iter() -> {10, 20}.operator iter();
}
class MyClassWithIter3: Sequence {
	operator iter() -> {10, 20}.operator iter();
}

#define TRY(x...) (try x catch (_e...) _e)
assert TRY({10,20} == (MyClassWithIter1() as Sequence)) === true;
assert TRY({10,20} == (MyClassWithIter2() as Sequence)) === true;
assert TRY({10,20} == (MyClassWithIter3() as Sequence)) === true;
assert TRY({10,20} == MyClassWithIter1()) is NotImplemented;
assert TRY({10,20} == MyClassWithIter2()) === true;
assert TRY({10,20} == MyClassWithIter3()) === true;

assert !({10} == ({10, 10}            ));
assert !({10} == ({10, 10} as Sequence));
assert (({10} == ({10, 10} as Set     )));

assert !(({10, 10}            ) == {10});
assert !(({10, 10} as Sequence) == {10});
assert ((({10, 10} as Set     ) == {10}));

class MySet1: Set {}
class MySet2: MySet1 { __set_add__(rhs) -> "Works!"; }
class MySet3: MySet2 {}

assert (MySet1() | {10}) is SetUnion from rt;
assert (MySet2() | {10}) == "Works!";
assert (MySet3() | {10}) == "Works!";

/* Make sure that a "raw" Sequence-instance is empty. */
assert !Sequence();
assert #Sequence() == 0;
assert TRY(Sequence()[0]) is IndexError;
assert Sequence().find("foo") == -1;
assert Sequence().rfind("foo") == -1;
assert Sequence().enumerate() == {};

/* Make sure that a Sequence sub-class that doesn't provide any way */
class UnsupportedSeq: Sequence {}
assert TRY(UnsupportedSeq().operator iter()) is NotImplemented;
assert TRY(UnsupportedSeq().find("foo")) is NotImplemented;
assert TRY(UnsupportedSeq()[42]) is NotImplemented;
assert TRY(#UnsupportedSeq()) is NotImplemented;


/* Make sure that a Sequence sub-class that *does* provide
 * operators has those operators used for everything */
class SupportedSeq: Sequence {
	@@A `__seq_getitem__` function is all it takes for us to implement all
	@@read-only sequence operations. Even `operator iter` is supported, which
	@@simply calls this function with incrementing integers until @IndexError
	@@is thrown
	public __seq_getitem__(index: int): string {
		switch (index) {
		case 0: return "first";
		case 1: return "second";
		case 2: return "third";
		default:
			throw IndexError();
		}
	}
}

/* FIXME: This doesn't work because user-classes define default compare operators :(
 *        Figure out a way to resolve this issue (which is actually intended behavior
 *        right now) */
//assert SupportedSeq() == {"first", "second", "third"};
/* vvv Not even this works, because "Sequence" thinks that the "operator ==" impl of
 *     SupportedSeq complies with "Sequence", meaning it invokes the generate operator. */
//assert (SupportedSeq() as Sequence) == {"first", "second", "third"};
/* vvv This also doesn't work since method hints select the "this != {}" impl as it
 *     thinks that "SupportedSeq" supports sequence compare operators. */
//assert SupportedSeq();
assert (SupportedSeq() as Set) == {"first", "second", "third"};
assert SupportedSeq().enumerate() == {(0, "first"), (1, "second"), (2, "third")};
assert #SupportedSeq() == 3;
assert SupportedSeq()[0] == "first";
assert SupportedSeq()[1] == "second";
assert SupportedSeq()[2] == "third";
assert SupportedSeq().find("second") == 1;
assert SupportedSeq().find("fourth") == -1;
assert "third" in SupportedSeq();
assert "fourth" !in SupportedSeq();


