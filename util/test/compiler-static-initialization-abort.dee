#!/usr/bin/deemon
/* Copyright (c) 2018-2024 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2024 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

#if 1 /* #ifdef CONFIG_EXPERIMENTAL_STATIC_IN_FUNCTION */
global initCalls = 0;
global nonInitCalls = 0;

function abortStaticInitWithReturn() {
	static local x = ({ ++initCalls; return "return"; });
	++nonInitCalls;
	return x;
}

function abortStaticInitWithThrow() {
	static local x = ({ ++initCalls; throw "throw"; });
	++nonInitCalls;
	return x;
}

function abortStaticInitWithGoto() {
	static local x = ({ ++initCalls; goto foo; });
	++nonInitCalls;
	return x;
foo:
	return "goto";
}

#define TRY(x) (try x catch (e...) e)

assert initCalls == 0;
assert nonInitCalls == 0;
assert abortStaticInitWithReturn.__statics__[0] !is bound;
assert abortStaticInitWithReturn() == "return";
assert abortStaticInitWithReturn() == "return";
assert abortStaticInitWithReturn.__statics__[0] !is bound;
assert initCalls == 2;
assert nonInitCalls == 0;
abortStaticInitWithReturn.__statics__[0] = "foo";
assert abortStaticInitWithReturn.__statics__[0] == "foo";
assert abortStaticInitWithReturn() == "foo";
assert abortStaticInitWithReturn() == "foo";
assert abortStaticInitWithReturn.__statics__[0] == "foo";
assert initCalls == 2;
assert nonInitCalls == 2;

assert abortStaticInitWithThrow.__statics__[0] !is bound;
assert TRY(abortStaticInitWithThrow()) == "throw";
assert TRY(abortStaticInitWithThrow()) == "throw";
assert abortStaticInitWithThrow.__statics__[0] !is bound;
assert initCalls == 4;
assert nonInitCalls == 2;
abortStaticInitWithThrow.__statics__[0] = "bar";
assert abortStaticInitWithThrow.__statics__[0] == "bar";
assert abortStaticInitWithThrow() == "bar";
assert abortStaticInitWithThrow() == "bar";
assert abortStaticInitWithThrow.__statics__[0] == "bar";
assert initCalls == 4;
assert nonInitCalls == 4;

assert abortStaticInitWithGoto.__statics__[0] !is bound;
assert abortStaticInitWithGoto() == "goto";
assert abortStaticInitWithGoto() == "goto";
assert abortStaticInitWithGoto.__statics__[0] !is bound;
assert initCalls == 6;
assert nonInitCalls == 4;
abortStaticInitWithGoto.__statics__[0] = "baz";
assert abortStaticInitWithGoto.__statics__[0] == "baz";
assert abortStaticInitWithGoto() == "baz";
assert abortStaticInitWithGoto() == "baz";
assert abortStaticInitWithGoto.__statics__[0] == "baz";
assert initCalls == 6;
assert nonInitCalls == 6;

#endif
