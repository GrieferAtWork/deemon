#!/usr/bin/deemon
/* Copyright (c) 2018-2024 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2024 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

import * from deemon;

/* Check if "CONFIG_EXPERIMENTAL_ORDERED_DICTS" was enabled when building deemon.
 * TODO: Remove this check once "CONFIG_EXPERIMENTAL_ORDERED_DICTS" becomes mandatory */ 
if (!hasattr(Dict, "__hdxio__"))
	return;

/* A simple test */
local d = Dict({ "foo": 1, "bar": 2, "foo": 3, true: "yes", false: "no" });
assert { ("bar", 2), ("foo", 3), (true, "yes"), (false, "no") } == d;

/* A test where items are added to the dict individually */
local d = Dict();
assert !d;
d["first"] = 10;
assert d;
d["second"] = 17;
assert d;
d["third"] = 9;
assert d;

/* The order of insertion is remembered here! */
assert { ("first", 10), ("second", 17), ("third", 9) } == d;
assert { ("first", 10), ("third", 9), ("second", 17) } != d;
assert (d as Sequence) == { ("first", 10), ("second", 17), ("third", 9) };
assert (d as Sequence) != { ("first", 10), ("third", 9), ("second", 17) };
assert (d            ) == { ("first", 10), ("third", 9), ("second", 17) };
assert { "first", "second", "third" } == d.keys;
assert { "first", "third", "second" } != d.keys;
assert (d.keys            ) == { "first", "second", "third" };
assert (d.keys            ) == { "first", "third", "second" };
assert (d.keys as Sequence) != { "first", "third", "second" };
assert { 10, 17, 9 } == d.values;
assert { 10, 9, 17 } != d.values;
assert #d == 3;
assert d.first == ("first", 10);
assert d.firstkey == "first";
assert d.firstvalue == 10;
assert d.last == ("third", 9);
assert d.lastkey == "third";
assert d.lastvalue == 9;

/* Test to ensure that the [first|last][value|key] properties are writable. */
d.firstvalue = 11;
d.lastvalue = 3;
d.firstkey = "first!";
d.lastkey = "third!";
assert { ("first!", 11), ("second", 17), ("third!", 3) } == d;
assert { "first!", "second", "third!" } == d.keys;
assert { 11, 17, 3 } == d.values;

/* When overwriting some existing key's value, the new key gets
 * re-added at the end by default (see below for how to control
 * where an item is added). */
d["second"] = 18;
assert { ("first!", 11), ("third!", 3), ("second", 18) } == d;
assert { ("first!", 11), ("second", 18), ("third!", 3) } != d;
assert { "first!", "third!", "second" } == d.keys;
assert { "first!", "second", "third!" } != d.keys;
assert { 11, 3, 18 } == d.values;
assert { 11, 18, 3 } != d.values;
assert #d == 3;
d.first = ("_first", 9);
d.last = ("_third", 4);
assert { ("_first", 9), ("third!", 3), ("_third", 4) } == d;
assert { "_first", "third!", "_third" } == d.keys;
assert { 9, 3, 4 } == d.values;
assert #d == 3;

/* Test that deleting keys words */
del d["third!"];
assert { ("_first", 9), ("_third", 4) } == d;
assert { "_first", "_third" } == d.keys;
assert { 9, 4 } == d.values;
assert #d == 2;
del d["third!"]; /* Delete non-present key must be a no-op */
assert !d.remove("third!");
assert { ("_first", 9), ("_third", 4) } == d;
assert { "_first", "_third" } == d.keys;
assert { 9, 4 } == d.values;
assert #d == 2;
d.first = ("_first", 8);
d.last = ("_third", 5);

/* You can even use Sequence-style functions to put items at specific positions */
d.insert(0, ("huh?", "yes"));
assert { ("huh?", "yes"), ("_first", 8), ("_third", 5) } == d;
assert { "huh?", "_first", "_third" } == d.keys;
assert { "yes", 8, 5 } == d.values;
assert #d == 3;

/* Trying to insert a key that already exists requires the previous instance to be
 * deleted automatically. Note how that the given index "2" is evaluated *before*
 * this delete happens. */
d.insert(2, ("huh?", "no"));
assert { ("_first", 8), ("huh?", "no"), ("_third", 5) } == d;
assert { "_first", "huh?", "_third" } == d.keys;
assert { 8, "no", 5 } == d.values;
assert #d == 3;

assert d.remove("huh?");
assert { ("_first", 8), ("_third", 5) } == d;
assert { "_first", "_third" } == d.keys;
assert { 8, 5 } == d.values;
assert #d == 2;
assert !d.remove("huh?");
assert { ("_first", 8), ("_third", 5) } == d;
assert { "_first", "_third" } == d.keys;
assert { 8, 5 } == d.values;
assert #d == 2;

/* Dict even implements Sequence's reverse() function */
d.reverse();
assert { ("_third", 5), ("_first", 8) } == d;
assert { "_third", "_first" } == d.keys;
assert { 5, 8 } == d.values;
assert #d == 2;


d.clear();


/* Something simple and easy to debug (because hash(int) == int) */
for (local i: [:1024]) {
	assert d.__vused__ == i;
	assert d.__vsize__ == i;
	assert hash(i) == i;
	d[i] = f"Jo! {i * 2}";
}
assert #d == 1024;
local expected = 0;
for (local key, value: d) {
	assert (expected) == key;
	assert f"Jo! {expected * 2}" == value;
	++expected;
}
d.clear();


/* The same test again, but more complicated (because hash(str(int)) != int) */
for (local i: [:1024]) {
	assert d.__vused__ == i;
	assert d.__vsize__ == i;
	d[str i] = f"Jo! {i * 2}";
}
assert #d == 1024;
local expected = 0;
for (local key, value: d) {
	assert str(expected) == key;
	assert expected == int(key);
	assert f"Jo! {expected * 2}" == value;
	++expected;
}
d.clear();

/* And the same test *yet* again, but be evil and constantly shrink the
 * dict, thereby constantly forcing the runtime to reallocate tables. */
for (local i: [:1024]) {
	d[str i] = f"Jo! {i * 2}";
	d.shrink();
	assert d.__valloc__ == d.__vused__, "This is what shrink() should ensure";
}
assert #d == 1024;
local expected = 0;
for (local key, value: d) {
	assert str(expected) == key;
	assert expected == int(key);
	assert f"Jo! {expected * 2}" == value;
	++expected;
}
d.clear();

/* Why not: assert attributes of an empty dict. */
assert !d;
assert !#d;
assert !d.__valloc__;
assert !d.__vsize__;
assert !d.__vused__;
assert !d.__hmask__;
assert !d.__hdxio__;
