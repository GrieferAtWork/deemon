#!/usr/bin/deemon
/* Copyright (c) 2018-2024 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2024 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

/* Assert correct evaluation of sequence-each expressions. */

{
	/* The simple case: transform all elements of a
	 * sequence, thus creating a new sequence */
	local x = { "Foo", "Bar", "Foobar" };
	assert x.each.lower() == { "foo", "bar", "foobar" };
	assert x.each.upper() == { "FOO", "BAR", "FOOBAR" };
}

{
	/* A bit more complex cases, where we modify the elements
	 * of the sequence in question. */
	local lists = { [10, 20, 30], [1, 2, 3], [19, 41, 57] };
	assert lists == { { 10, 20, 30 }, { 1, 2, 3 }, { 19, 41, 57 } };

	/* Modifying member function.
	 * -> To force function evaluation, the generate proxy
	 *    sequence needs to be expanded (thus explaining the `...')
	 * HINT:
	 *    For this, the compiler generates assembly is equivalent to:
	 * >> for (none: lists.each.insert(0, 9)) {} */
	lists.each.insert(0, 9)...;
	assert lists == { { 9, 10, 20, 30 }, { 9, 1, 2, 3 }, { 9, 19, 41, 57 } };

	/* Assign elements. */
	lists.each[0] = 8;
	assert lists == { { 8, 10, 20, 30 }, { 8, 1, 2, 3 }, { 8, 19, 41, 57 } };

	/* Inplace operations (w/ singleton objects). */
	lists.each[0] += 2;
	assert lists == { { 10, 10, 20, 30 }, { 10, 1, 2, 3 }, { 10, 19, 41, 57 } };

	/* Delete elements. */
	del lists.each[0];
	assert lists == { { 10, 20, 30 }, { 1, 2, 3 }, { 19, 41, 57 } };
}

{
	/* Really cool: The whole thing works recursively, so you
	 *              can just as easily apply transformations
	 *              to the elements of all elements of all ...
	 *              You get my point. */
	local x = { { "foo", "bar" }, { "foobar" } };
	assert x.each.each.upper() == { { "FOO", "BAR" }, { "FOOBAR" } };
}














