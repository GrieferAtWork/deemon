#!/usr/bin/deemon
/* Copyright (c) 2018-2024 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2024 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

import * from doc;
import * from deemon;

@@This is my test function.
@@
@@This function takes 1 argument @x, which should be
@@an @int or @float, allowing it to then return a @string
function foo(x: int | float): string {
	return str x;
}



local d = Doc(foo);

/* Ensure that parameter information got decoded properly */
assert d.decls[0].parameters[0].name == "x";
assert d.decls[0].parameters[0].typ.Xtypes[0].Etyperef.typ === int;
assert d.decls[0].parameters[0].typ.Xtypes[1].Etyperef.typ === float;
assert d.decls[0].ret.Etyperef.typ === string;

/* Assert that we can properly deduce if a
 * given argument is accepted by the function. */
assert d.isaccepted(1234) == true;
assert d.isaccepted(1.0) == true;
assert d.isaccepted("foo") == false;








