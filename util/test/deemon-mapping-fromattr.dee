#!/usr/bin/deemon
/* Copyright (c) 2018-2025 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2025 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

import * from deemon;
import * from errors;

class Foo {
	this = default;
	public member a;
	public member b;
	public member c;
};

local x = Foo(10, 20);

local map = Mapping.fromattr(x);
assert map.keys.contains("a");
assert map.keys.contains("b");
assert map.keys.contains("c");
assert !map.keys.contains("d");

function assertIterCopyable() {
	/* Assert that attribute enumeration iterators are copyable */
	local it = map.keys.operator iter();
	local first = it.operator next();
	local second = it.operator next();
	local itCopy = copy it;
	local third = it.operator next();
	local third2 = itCopy.operator next();
	assert ({first, second, third} as Set) == { "a", "b", "c" };
	assert third == third2;

	local it = enumattr(x).operator iter();
	local first = it.operator next().name;
	local second = it.operator next().name;
	local itCopy = copy it;
	local third = it.operator next().name;
	local third2 = itCopy.operator next().name;
	assert ({first, second, third} as Set) == { "a", "b", "c" };
	assert third == third2;
}

/* Assert that attribute enumeration iterators are copyable. */
assertIterCopyable();

assert hasitem(map, "a");
assert hasitem(map, "b");
assert hasitem(map, "c");
assert !hasitem(map, "d");

assert map["a"] is bound;
assert map["b"] is bound;
assert map["c"] !is bound;
assert map["d"] !is bound;

#define TRY(x) (try (x) catch (_e...) _e)
assert TRY(map["a"]) == 10;
assert TRY(map["b"]) == 20;
assert TRY(map["c"]) is UnboundItem;
assert TRY(map["d"]) is KeyError;

x.b = 42;
x.c = 7;

assert TRY(map["a"]) == 10;
assert TRY(map["b"]) == 42;
assert TRY(map["c"]) == 7;
assert TRY(map["d"]) is KeyError;


/* Make sure that "fromattr" is able to perfectly undo "byattr" */
local x = { "a": 10, "b": 20 }.byattr;
assert Mapping.fromattr(x) == { "a": 10, "b": 20 };
