/* Copyright (c) 2018-2025 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2025 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

import * from deemon;
import * from errors;
import * from "rt.hints.method";
import * from "rt.hints.operator";
import int, * from ctypes;
import deemon;
import ipc;
import rt;

/* Tests for stuff that only works under "CONFIG_EXPERIMENTAL_UNIFIED_METHOD_HINTS" */
if (!hasattr(rt, "SeqEnumWithSeqOperatorSizeAndGetItemIndexFast"))
	return; // "CONFIG_EXPERIMENTAL_UNIFIED_METHOD_HINTS" isn't enabled; don't run this test


local final DeeObject_ptr = void.ptr;
local final Dee_funptr_t = try void.func(void).ptr catch (NotImplemented) ({
	/* NotImplemented: ctypes was built without C-functions being enabled */
	return;
});
local final deemonExe = ShLib(ipc.Process.current.exe);
local final DeeType_GetMethodHint = (Dee_funptr_t(DeeObject_ptr, int).ptr)(
	Mapping.get(deemonExe, "DeeType_GetMethodHint") ??
	Mapping.get(deemonExe, "_DeeType_GetMethodHint") ??
	Mapping.get(deemonExe, "DeeType_GetMethodHint@8") ??
	Mapping.get(deemonExe, "_DeeType_GetMethodHint@8") ??
	none
);

local final DeeType_GetNativeOperatorWithoutUnsupported = (Dee_funptr_t(DeeObject_ptr, int).ptr)(
	Mapping.get(deemonExe, "DeeType_GetNativeOperatorWithoutUnsupported") ??
	Mapping.get(deemonExe, "_DeeType_GetNativeOperatorWithoutUnsupported") ??
	Mapping.get(deemonExe, "DeeType_GetNativeOperatorWithoutUnsupported@8") ??
	Mapping.get(deemonExe, "_DeeType_GetNativeOperatorWithoutUnsupported@8") ??
	none
);

/* If neither of these methods could be loaded, then don't run this test. */
if (!DeeType_GetMethodHint && !DeeType_GetNativeOperatorWithoutUnsupported)
	return;

function _addr2name(addr: void.ptr): string | none {
	if (!addr)
		return "NULL";
	local nameAndDelta: (string, int) | none = ShLib.addr2name(addr);
	if (nameAndDelta is none)
		return none;
	local name, delta = nameAndDelta...;
	if (delta == 0)
		return name;
	return none;
}

@@Returns the name of the function used to implement method hint @hint of @type
@@If name cannot be determined (e.g. debug info not available/supported), return @none
@@If the hint isn't supported, return @"NULL"
function _Type_getMethodHintName(typ: Type, hint: string): string | none {
	if (!DeeType_GetMethodHint)
		return none;
	local typAddr: void.ptr = rt.ctypes_addrof(typ);
	local hintAddr = DeeType_GetMethodHint(typAddr, TMH_BYNAME[hint]);
	return _addr2name(hintAddr);
}


@@Returns the name of the function used to implement native operator @op of @type
@@If name cannot be determined (e.g. debug info not available/supported), return @none
@@If the operator isn't supported, return @"NULL"
function _Type_getNativeOperatorName(typ: Type, op: string): string | none {
	if (!DeeType_GetNativeOperatorWithoutUnsupported)
		return none;
	local typAddr: void.ptr = rt.ctypes_addrof(typ);
	local hintAddr = DeeType_GetNativeOperatorWithoutUnsupported(typAddr, TNO_BYNAME[op]);
	return _addr2name(hintAddr);
}


@@Combination of @_Type_getMethodHintName and @_Type_getNativeOperatorName
function Type_getImplName(typ: Type, hintOrOperator: string): string | none {
	if (hintOrOperator.startswith("tp_"))
		return _Type_getNativeOperatorName(typ, hintOrOperator[3:]);
	if (hintOrOperator.startswith("mh_"))
		return _Type_getMethodHintName(typ, hintOrOperator[3:]);
	return none;
}

function Type_assert(typ: Type, impls: {string: string}) {
	local wrongImpls = [];
	for (local hintOrOperator, expectedImpl: impls) {
		local actualImpl: string | none = Type_getImplName(typ, hintOrOperator);
		if (actualImpl !is none) {
			if (!(
				expectedImpl is string
					? expectedImpl in actualImpl
					: (for (local x: expectedImpl) x in actualImpl) || ...
			)) {
				wrongImpls.append((hintOrOperator, expectedImpl, actualImpl));
			}
		}
	}
	if (wrongImpls) {
		local longestHintOrOperator = wrongImpls.each[0].length > ...;
		local longestActualImpl = wrongImpls.each[2].length > ...;
		throw AssertionError((
			for (local hintOrOperator, expectedImpl, actualImpl: wrongImpls)
				f"\n{typ}.<native>.{hintOrOperator.ljust(longestHintOrOperator)} = "
				f"{actualImpl.ljust(longestActualImpl)} (should be {expectedImpl})"
		) + ...);
	}
}


#ifndef __MAIN__

/* Assert that operators that are inherited also have their  */

//@[nobuiltin] // TODO: New compiler tag
class MyCell: Cell {
	this = super;
}
Type_assert(MyCell, {
	"tp_compare":       "cell_compare",
	"tp_compare_eq":    "cell_compare", /* Used to be "default__compare_eq__with__compare" */
	"tp_trycompare_eq": "cell_trycompare_eq", /* Used to be "default__trycompare_eq__with__compare_eq" */
	"tp_eq":            "default__eq__with__compare_eq",
	"tp_ne":            "default__ne__with__compare_eq",
	"tp_lo":            "default__lo__with__compare",
	"tp_le":            "default__le__with__compare",
	"tp_gr":            "default__gr__with__compare",
	"tp_ge":            "default__ge__with__compare",
});


// TODO: Set "Set.<native>.tp_mul     = default__mul__unsupported"      (delete "Sequence.operator mul")
// TODO: Set "Set.<native>.tp_compare = default__compare__unsupported"  (delete "Sequence.operator compare")
// TODO: Set "Mapping.<native>.tp_inv = default__inv__unsupported"      (delete "Set.operator inv")

Type_assert(deemon.List, {
	"tp_assign":                                  "list_assign",
	"tp_move_assign":                             "list_moveassign",
	"tp_str":                                     "object_str",
	"tp_print":                                   "default__print__with__str",
	"tp_repr":                                    "default__repr__with__printrepr",
	"tp_printrepr":                               "list_printrepr",
	"tp_bool":                                    "list_bool",
	"tp_hash":                                    "list_hash",
	"tp_compare_eq":                              "list_compare_eq",
	"tp_compare":                                 "list_compare",
	"tp_trycompare_eq":                           "default__trycompare_eq__with__compare_eq",
	"tp_eq":                                      "default__eq__with__compare_eq",
	"tp_ne":                                      "default__ne__with__compare_eq",
	"tp_lo":                                      "default__lo__with__compare",
	"tp_le":                                      "default__le__with__compare",
	"tp_gr":                                      "default__gr__with__compare",
	"tp_ge":                                      "default__ge__with__compare",
	"tp_iter":                                    "list_iter",
	"tp_foreach":                                 "list_foreach",
	"tp_foreach_pair":                            "default__foreach_pair__with__foreach",
	"tp_sizeob":                                  "list_sizeob",
	"tp_size":                                    "list_size",
	"tp_size_fast":                               "list_size",
	"tp_contains":                                "list_contains",
	"tp_getitem_index_fast":                      "list_getitem_index_fast",
	"tp_getitem":                                 "list_getitem",
	"tp_getitem_index":                           "list_getitem_index",
	"tp_trygetitem":                              "default__trygetitem__with__getitem",
	"tp_trygetitem_index":                        "default__trygetitem_index__with__size__and__getitem_index_fast",
	"tp_bounditem":                               "default__bounditem__with__size__and__getitem_index_fast",
	"tp_bounditem_index":                         "list_bounditem_index",
	"tp_hasitem":                                 "default__hasitem__with__hasitem_index",
	"tp_hasitem_index":                           "list_hasitem_index",
	"tp_delitem":                                 "list_delitem",
	"tp_delitem_index":                           "list_delitem_index",
	"tp_setitem":                                 "list_setitem",
	"tp_setitem_index":                           "list_setitem_index",
	"tp_getrange":                                "list_getrange",
	"tp_getrange_index":                          "list_getrange_index",
	"tp_getrange_index_n":                        "list_getrange_index_n",
	"tp_delrange":                                "list_delrange",
	"tp_delrange_index":                          "list_delrange_index",
	"tp_delrange_index_n":                        "list_delrange_index_n",
	"tp_setrange":                                "list_setrange",
	"tp_setrange_index":                          "list_setrange_index",
	"tp_setrange_index_n":                        "list_setrange_index_n",
	"tp_add":                                     "list_add",
	"tp_inplace_add":                             "list_inplace_add",
	"tp_mul":                                     "list_mul",
	"tp_inplace_mul":                             "list_inplace_mul",
	"mh_seq_operator_bool":                       "list_bool",
	"mh_seq_operator_sizeob":                     "list_sizeob",
	"mh_seq_operator_size":                       "list_size",
	"mh_seq_operator_iter":                       "list_iter",
	"mh_seq_operator_foreach":                    "list_foreach",
	"mh_seq_operator_foreach_pair":               "default__seq_operator_foreach_pair__with__seq_operator_foreach",
	"mh_seq_operator_getitem":                    "list_getitem",
	"mh_seq_operator_getitem_index":              "list_getitem_index",
	"mh_seq_operator_trygetitem":                 "default__seq_operator_trygetitem__with__seq_operator_getitem",
	"mh_seq_operator_trygetitem_index":           "default__seq_operator_trygetitem_index__with__seq_operator_getitem_index",
	"mh_seq_operator_hasitem":                    "default__seq_operator_hasitem__with__seq_operator_hasitem_index",
	"mh_seq_operator_hasitem_index":              "list_hasitem_index",
	"mh_seq_operator_bounditem":                  "default__seq_operator_bounditem__with__seq_operator_bounditem_index",
	"mh_seq_operator_bounditem_index":            "list_bounditem_index",
	"mh_seq_operator_delitem":                    "list_delitem",
	"mh_seq_operator_delitem_index":              "list_delitem_index",
	"mh_seq_operator_setitem":                    "list_setitem",
	"mh_seq_operator_setitem_index":              "list_setitem_index",
	"mh_seq_operator_getrange":                   "list_getrange",
	"mh_seq_operator_getrange_index":             "list_getrange_index",
	"mh_seq_operator_getrange_index_n":           "list_getrange_index_n",
	"mh_seq_operator_delrange":                   "list_delrange",
	"mh_seq_operator_delrange_index":             "list_delrange_index",
	"mh_seq_operator_delrange_index_n":           "list_delrange_index_n",
	"mh_seq_operator_setrange":                   "list_setrange",
	"mh_seq_operator_setrange_index":             "list_setrange_index",
	"mh_seq_operator_setrange_index_n":           "list_setrange_index_n",
	"mh_seq_operator_assign":                     "list_assign",
	"mh_seq_operator_hash":                       "list_hash",
	"mh_seq_operator_compare":                    "list_compare",
	"mh_seq_operator_compare_eq":                 "list_compare_eq",
	"mh_seq_operator_trycompare_eq":              "default__seq_operator_trycompare_eq__with__seq_operator_compare_eq",
	"mh_seq_operator_eq":                         "default__seq_operator_eq__with__seq_operator_compare_eq",
	"mh_seq_operator_ne":                         "default__seq_operator_ne__with__seq_operator_compare_eq",
	"mh_seq_operator_lo":                         "default__seq_operator_lo__with__seq_operator_compare",
	"mh_seq_operator_le":                         "default__seq_operator_le__with__seq_operator_compare",
	"mh_seq_operator_gr":                         "default__seq_operator_gr__with__seq_operator_compare",
	"mh_seq_operator_ge":                         "default__seq_operator_ge__with__seq_operator_compare",
	"mh_seq_operator_inplace_add":                "list_inplace_add",
	"mh_seq_operator_inplace_mul":                "list_inplace_mul",
	"mh_seq_enumerate":                           "default__seq_enumerate__with__seq_operator_size__and__operator_getitem_index_fast",
	"mh_seq_enumerate_index":                     "default__seq_enumerate_index__with__seq_operator_size__and__operator_getitem_index_fast",
	"mh_seq_makeenumeration":                     "default__seq_makeenumeration__with__seq_operator_size__and__operator_getitem_index_fast",
	"mh_seq_makeenumeration_with_range":          "default__seq_makeenumeration_with_range__with__seq_makeenumeration_with_intrange",
	"mh_seq_makeenumeration_with_intrange":       "default__seq_makeenumeration_with_intrange__with__seq_operator_size__and__operator_getitem_index_fast",
	"mh_seq_foreach_reverse":                     "default__seq_foreach_reverse__with__seq_operator_size__and__operator_getitem_index_fast",
	"mh_seq_enumerate_index_reverse":             "default__seq_enumerate_index_reverse__with__seq_operator_size__and__operator_getitem_index_fast",
	"mh_seq_unpack":                              "default__seq_unpack__with__tp_asvector",
	"mh_seq_unpack_ex":                           "default__seq_unpack_ex__with__tp_asvector",
	"mh_seq_unpack_ub":                           "default__seq_unpack_ex__with__tp_asvector",
	"mh_seq_trygetfirst":                         "default__seq_trygetfirst__with__seq_getfirst",
	"mh_seq_getfirst":                            "list_get_first",
	"mh_seq_boundfirst":                          "default__seq_boundfirst__with_callattr_first",
	"mh_seq_delfirst":                            "list_del_first",
	"mh_seq_setfirst":                            "list_set_first",
	"mh_seq_trygetlast":                          "default__seq_trygetlast__with__seq_getlast",
	"mh_seq_getlast":                             "list_get_last",
	"mh_seq_boundlast":                           "default__seq_boundlast__with_callattr_last",
	"mh_seq_dellast":                             "list_del_last",
	"mh_seq_setlast":                             "list_set_last",
	"mh_seq_cached":                              "DeeObject_NewRef",
	"mh_seq_frozen":                              "list_get_frozen",
	"mh_seq_any":                                 "default__seq_any__with__seq_operator_foreach",
	"mh_seq_any_with_key":                        "default__seq_any_with_key__with__seq_operator_foreach",
	"mh_seq_any_with_range":                      "default__seq_any_with_range__with__seq_enumerate_index",
	"mh_seq_any_with_range_and_key":              "default__seq_any_with_range_and_key__with__seq_enumerate_index",
	"mh_seq_all":                                 "default__seq_all__with__seq_operator_foreach",
	"mh_seq_all_with_key":                        "default__seq_all_with_key__with__seq_operator_foreach",
	"mh_seq_all_with_range":                      "default__seq_all_with_range__with__seq_enumerate_index",
	"mh_seq_all_with_range_and_key":              "default__seq_all_with_range_and_key__with__seq_enumerate_index",
	"mh_seq_parity":                              "default__seq_parity__with__seq_operator_foreach",
	"mh_seq_parity_with_key":                     "default__seq_parity_with_key__with__seq_operator_foreach",
	"mh_seq_parity_with_range":                   "default__seq_parity_with_range__with__seq_enumerate_index",
	"mh_seq_parity_with_range_and_key":           "default__seq_parity_with_range_and_key__with__seq_enumerate_index",
	"mh_seq_reduce":                              "default__seq_reduce__with__seq_operator_foreach",
	"mh_seq_reduce_with_init":                    "default__seq_reduce_with_init__with__seq_operator_foreach",
	"mh_seq_reduce_with_range":                   "default__seq_reduce_with_range__with__seq_enumerate_index",
	"mh_seq_reduce_with_range_and_init":          "default__seq_reduce_with_range_and_init__with__seq_enumerate_index",
	"mh_seq_min":                                 "default__seq_min__with__seq_operator_foreach",
	"mh_seq_min_with_key":                        "default__seq_min_with_key__with__seq_operator_foreach",
	"mh_seq_min_with_range":                      "default__seq_min_with_range__with__seq_enumerate_index",
	"mh_seq_min_with_range_and_key":              "default__seq_min_with_range_and_key__with__seq_enumerate_index",
	"mh_seq_max":                                 "default__seq_max__with__seq_operator_foreach",
	"mh_seq_max_with_key":                        "default__seq_max_with_key__with__seq_operator_foreach",
	"mh_seq_max_with_range":                      "default__seq_max_with_range__with__seq_enumerate_index",
	"mh_seq_max_with_range_and_key":              "default__seq_max_with_range_and_key__with__seq_enumerate_index",
	"mh_seq_sum":                                 "default__seq_sum__with__seq_operator_foreach",
	"mh_seq_sum_with_range":                      "default__seq_sum_with_range__with__seq_enumerate_index",
	"mh_seq_count":                               "default__seq_count__with__seq_find",
	"mh_seq_count_with_key":                      "default__seq_count_with_key__with__seq_find_with_key",
	"mh_seq_count_with_range":                    "default__seq_count_with_range__with__seq_find",
	"mh_seq_count_with_range_and_key":            "default__seq_count_with_range_and_key__with__seq_find_with_key",
	"mh_seq_contains":                            "default__seq_contains__with__seq_operator_contains",
	"mh_seq_contains_with_key":                   "default__seq_contains_with_key__with__seq_find_with_key",
	"mh_seq_contains_with_range":                 "default__seq_contains_with_range__with__seq_find",
	"mh_seq_contains_with_range_and_key":         "default__seq_contains_with_range_and_key__with__seq_find_with_key",
	"mh_seq_operator_contains":                   "list_contains",
	"mh_seq_locate":                              "default__seq_locate__with__seq_operator_foreach",
	"mh_seq_locate_with_range":                   "default__seq_locate_with_range__with__seq_enumerate_index",
	"mh_seq_rlocate":                             "default__seq_rlocate__with__seq_foreach_reverse",
	"mh_seq_rlocate_with_range":                  "default__seq_rlocate_with_range__with__seq_enumerate_index_reverse",
	"mh_seq_startswith":                          "default__seq_startswith__with__seq_trygetfirst",
	"mh_seq_startswith_with_key":                 "default__seq_startswith_with_key__with__seq_trygetfirst",
	"mh_seq_startswith_with_range":               "default__seq_startswith_with_range__with__seq_operator_trygetitem_index",
	"mh_seq_startswith_with_range_and_key":       "default__seq_startswith_with_range_and_key__with__seq_operator_trygetitem_index",
	"mh_seq_endswith":                            "default__seq_endswith__with__seq_trygetlast",
	"mh_seq_endswith_with_key":                   "default__seq_endswith_with_key__with__seq_trygetlast",
	"mh_seq_endswith_with_range":                 "default__seq_endswith_with_range__with__seq_operator_size__and__operator_trygetitem_index",
	"mh_seq_endswith_with_range_and_key":         "default__seq_endswith_with_range_and_key__with__seq_operator_size__and__operator_trygetitem_index",
	"mh_seq_find":                                "list_mh_find",
	"mh_seq_find_with_key":                       "list_mh_find_with_key",
	"mh_seq_rfind":                               "list_mh_rfind",
	"mh_seq_rfind_with_key":                      "list_mh_rfind_with_key",
	"mh_seq_erase":                               "DeeList_Erase",
	"mh_seq_insert":                              "DeeList_Insert",
	"mh_seq_insertall":                           "DeeList_InsertSequence",
	"mh_seq_pushfront":                           "default__seq_pushfront__with__seq_insert",
	"mh_seq_append":                              "DeeList_Append",
	"mh_seq_extend":                              "DeeList_AppendSequence",
	"mh_seq_xchitem_index":                       "list_xchitem_index",
	"mh_seq_clear":                               "list_mh_clear",
	"mh_seq_pop":                                 "DeeList_Pop",
	"mh_seq_remove":                              "list_mh_remove",
	"mh_seq_remove_with_key":                     "list_mh_remove_with_key",
	"mh_seq_rremove":                             "list_mh_rremove",
	"mh_seq_rremove_with_key":                    "list_mh_rremove_with_key",
	"mh_seq_removeall":                           "list_mh_removeall",
	"mh_seq_removeall_with_key":                  "list_mh_removeall_with_key",
	"mh_seq_removeif":                            "DeeList_RemoveIf",
	"mh_seq_resize":                              "DeeList_Resize",
	"mh_seq_fill":                                "list_mh_fill",
	"mh_seq_reverse":                             "list_mh_reverse",
	"mh_seq_reversed":                            "default__seq_reversed__with__seq_operator_size__and__operator_getitem_index_fast",
	"mh_seq_sort":                                "list_mh_sort",
	"mh_seq_sort_with_key":                       "DeeList_Sort",
	"mh_seq_sorted":                              "list_mh_sorted",
	"mh_seq_sorted_with_key":                     "list_mh_sorted_with_key",
	"mh_seq_bfind":                               "default__seq_bfind__with__seq_operator_size__and__seq_operator_trygetitem_index",
	"mh_seq_bfind_with_key":                      "default__seq_bfind_with_key__with__seq_operator_size__and__seq_operator_trygetitem_index",
	"mh_seq_bposition":                           "default__seq_bposition__with__seq_operator_size__and__seq_operator_trygetitem_index",
	"mh_seq_bposition_with_key":                  "default__seq_bposition_with_key__with__seq_operator_size__and__seq_operator_trygetitem_index",
	"mh_seq_brange":                              "default__seq_brange__with__seq_operator_size__and__seq_operator_trygetitem_index",
	"mh_seq_brange_with_key":                     "default__seq_brange_with_key__with__seq_operator_size__and__seq_operator_trygetitem_index",
	"mh_set_operator_iter":                       "default__set_operator_iter__with__seq_operator_iter",
	"mh_set_operator_foreach":                    "default__set_operator_foreach__with__seq_operator_foreach",
	"mh_set_operator_sizeob":                     "default__set_operator_sizeob__with__set_operator_size",
	"mh_set_operator_size":                       "default__set_operator_size__with__set_operator_foreach",
	"mh_set_operator_hash":                       "default__set_operator_hash__with__set_operator_foreach",
	"mh_set_operator_compare_eq":                 "default__set_operator_compare_eq__with__set_operator_foreach",
	"mh_set_operator_trycompare_eq":              "default__set_operator_trycompare_eq__with__set_operator_compare_eq",
	"mh_set_operator_eq":                         "default__set_operator_eq__with__set_operator_compare_eq",
	"mh_set_operator_ne":                         "default__set_operator_ne__with__set_operator_compare_eq",
	"mh_set_operator_lo":                         "default__set_operator_lo__with__set_operator_foreach",
	"mh_set_operator_le":                         "default__set_operator_le__with__set_operator_foreach",
	"mh_set_operator_gr":                         "default__set_operator_gr__with__set_operator_foreach",
	"mh_set_operator_ge":                         "default__set_operator_ge__with__set_operator_foreach",
	"mh_set_operator_inv":                        "default__set_operator_inv__unsupported",
	"mh_set_operator_add":                        "default__set_operator_add__unsupported",
	"mh_set_operator_sub":                        "default__set_operator_sub__unsupported",
	"mh_set_operator_and":                        "default__set_operator_and__unsupported",
	"mh_set_operator_xor":                        "default__set_operator_xor__unsupported",
	"mh_set_operator_inplace_add":                "default__set_operator_inplace_add__with__set_insertall",
	"mh_set_operator_inplace_sub":                "default__set_operator_inplace_sub__with__set_operator_foreach__and__set_removeall",
	"mh_set_operator_inplace_and":                "default__set_operator_inplace_and__with__set_operator_foreach__and__set_removeall",
	"mh_set_operator_inplace_xor":                "default__set_operator_inplace_xor__with__set_operator_foreach__and__set_insertall__and__set_removeall",
	"mh_set_frozen":                              "DeeRoSet_FromSequence",
	"mh_set_unify":                               "default__set_unify__with__seq_operator_foreach__and__seq_append",
	"mh_set_insert":                              "default__set_insert__with__seq_contains__and__seq_append",
	"mh_set_insertall":                           "default__set_insertall__with__set_insert",
	"mh_set_remove":                              "default__set_remove__with__seq_removeall",
	"mh_set_removeall":                           "default__set_removeall__with__set_remove",
	"mh_set_pop":                                 "default__set_pop__with__seq_pop",
	"mh_set_pop_with_default":                    "default__set_pop_with_default__with__seq_pop",
	"mh_map_operator_iter":                       "default__map_operator_iter__with__seq_operator_iter",
	"mh_map_operator_foreach_pair":               "default__map_operator_foreach_pair__with__seq_operator_foreach_pair",
	"mh_map_operator_sizeob":                     "default__map_operator_sizeob__with__map_operator_size",
	"mh_map_operator_size":                       "default__map_operator_size__with__map_operator_foreach_pair",
	"mh_map_operator_getitem":                    "default__map_operator_getitem__with__map_enumerate",
	"mh_map_operator_getitem_index":              "default__map_operator_getitem_index__with__map_operator_getitem",
	"mh_map_operator_getitem_string_hash":        "default__map_operator_getitem_string_hash__with__map_enumerate",
	"mh_map_operator_getitem_string_len_hash":    "default__map_operator_getitem_string_len_hash__with__map_enumerate",
	"mh_map_operator_trygetitem":                 "default__map_operator_trygetitem__with__map_enumerate",
	"mh_map_operator_trygetitem_index":           "default__map_operator_trygetitem_index__with__map_operator_trygetitem",
	"mh_map_operator_trygetitem_string_hash":     "default__map_operator_trygetitem_string_hash__with__map_enumerate",
	"mh_map_operator_trygetitem_string_len_hash": "default__map_operator_trygetitem_string_len_hash__with__map_enumerate",
	"mh_map_operator_bounditem":                  "default__map_operator_bounditem__with__map_enumerate",
	"mh_map_operator_bounditem_index":            "default__map_operator_bounditem_index__with__map_operator_bounditem",
	"mh_map_operator_bounditem_string_hash":      "default__map_operator_bounditem_string_hash__with__map_operator_bounditem",
	"mh_map_operator_bounditem_string_len_hash":  "default__map_operator_bounditem_string_len_hash__with__map_operator_bounditem",
	"mh_map_operator_hasitem":                    "default__map_operator_hasitem__with__map_operator_bounditem",
	"mh_map_operator_hasitem_index":              "default__map_operator_hasitem_index__with__map_operator_bounditem_index",
	"mh_map_operator_hasitem_string_hash":        "default__map_operator_hasitem_string_hash__with__map_operator_bounditem_string_hash",
	"mh_map_operator_hasitem_string_len_hash":    "default__map_operator_hasitem_string_len_hash__with__map_operator_bounditem_string_len_hash",
	"mh_map_operator_delitem":                    "default__map_operator_delitem__with__map_remove",
	"mh_map_operator_delitem_index":              "default__map_operator_delitem_index__with__map_operator_delitem",
	"mh_map_operator_delitem_string_hash":        "default__map_operator_delitem_string_hash__with__map_operator_delitem",
	"mh_map_operator_delitem_string_len_hash":    "default__map_operator_delitem_string_len_hash__with__map_operator_delitem",
	"mh_map_operator_setitem":                    "default__map_operator_setitem__with__seq_enumerate__and__seq_operator_setitem__and__seq_append",
	"mh_map_operator_setitem_index":              "default__map_operator_setitem_index__with__map_operator_setitem",
	"mh_map_operator_setitem_string_hash":        "default__map_operator_setitem_string_hash__with__map_operator_setitem",
	"mh_map_operator_setitem_string_len_hash":    "default__map_operator_setitem_string_len_hash__with__map_operator_setitem",
	"mh_map_operator_contains":                   "default__map_operator_contains__with__map_operator_bounditem",
	"mh_map_keys":                                "default__map_keys__with__map_iterkeys",
	"mh_map_iterkeys":                            "default__map_iterkeys__with__map_operator_iter",
	"mh_map_values":                              "default__map_values__with__map_itervalues",
	"mh_map_itervalues":                          "default__map_itervalues__with__map_operator_iter",
	"mh_map_enumerate":                           "default__map_operator_foreach_pair__with__seq_operator_foreach_pair",
	"mh_map_enumerate_range":                     "default__map_enumerate_range__with__map_enumerate",
	"mh_map_makeenumeration":                     "default__map_makeenumeration__with__map_operator_iter",
	"mh_map_makeenumeration_with_range":          "default__map_makeenumeration_with_range__with__map_operator_iter",
	"mh_map_operator_compare_eq":                 "default__map_operator_compare_eq__with__map_operator_foreach_pair",
	"mh_map_operator_trycompare_eq":              "default__map_operator_trycompare_eq__with__map_operator_compare_eq",
	"mh_map_operator_eq":                         "default__map_operator_eq__with__map_operator_compare_eq",
	"mh_map_operator_ne":                         "default__map_operator_ne__with__map_operator_compare_eq",
	"mh_map_operator_lo":                         "default__map_operator_lo__with__map_operator_foreach_pair",
	"mh_map_operator_le":                         "default__map_operator_le__with__map_operator_foreach_pair",
	"mh_map_operator_gr":                         "default__map_operator_gr__with__map_operator_foreach_pair",
	"mh_map_operator_ge":                         "default__map_operator_ge__with__map_operator_foreach_pair",
	"mh_map_operator_add":                        "default__map_operator_add__unsupported",
	"mh_map_operator_sub":                        "default__map_operator_sub__unsupported",
	"mh_map_operator_and":                        "default__map_operator_and__unsupported",
	"mh_map_operator_xor":                        "default__map_operator_xor__unsupported",
	"mh_map_operator_inplace_add":                "default__map_operator_inplace_add__with__map_update",
	"mh_map_operator_inplace_sub":                "default__map_operator_inplace_sub__with__map_removekeys",
	"mh_map_operator_inplace_and":                "default__map_operator_inplace_and__with__map_operator_foreach_pair__and__map_removekeys",
	"mh_map_operator_inplace_xor":                "default__map_operator_inplace_xor__with__map_operator_foreach_pair__and__map_update__and__map_removekeys",
	"mh_map_frozen":                              "DeeRoDict_FromSequence",
	"mh_map_setold":                              "default__map_setold__with__map_setold_ex",
	"mh_map_setold_ex":                           "default__map_setold_ex__with__seq_enumerate__and__seq_operator_setitem",
	"mh_map_setnew":                              "default__map_setnew__with__map_setnew_ex",
	"mh_map_setnew_ex":                           "default__map_setnew_ex__with__map_operator_trygetitem__and__seq_append",
	"mh_map_setdefault":                          "default__map_setdefault__with__map_setnew_ex",
	"mh_map_update":                              "default__map_update__with__map_operator_setitem",
	"mh_map_remove":                              "default__map_remove__with__seq_enumerate__and__seq_operator_delitem",
	"mh_map_removekeys":                          "default__map_removekeys__with__map_remove",
	"mh_map_pop":                                 "default__map_pop__with__seq_enumerate__and__seq_operator_delitem",
	"mh_map_pop_with_default":                    "default__map_pop_with_default__with__seq_enumerate__and__seq_operator_delitem",
	"mh_map_popitem":                             "default__map_popitem__with__seq_pop",
});


Type_assert(deemon.HashSet, {
	"tp_assign":                                  "NULL", // TODO: This should be assigned!
	"tp_move_assign":                             "NULL", // TODO: This should be assigned!
	"tp_str":                                     "object_str",
	"tp_print":                                   "default__print__with__str",
	"tp_repr":                                    "hashset_repr",
	"tp_printrepr":                               "hashset_printrepr",
	"tp_bool":                                    "hashset_bool",
	"tp_hash":                                    "default__set_operator_hash__with__set_operator_foreach",
	"tp_compare_eq":                              "default__set_operator_compare_eq__with__set_operator_foreach",
	"tp_compare":                                 "NULL", // TODO: Should be default__compare__with__eq__and__lo
	"tp_trycompare_eq":                           "default__set_operator_trycompare_eq__with__set_operator_compare_eq",
	"tp_eq":                                      "default__set_operator_eq__with__set_operator_compare_eq",
	"tp_ne":                                      "default__set_operator_ne__with__set_operator_compare_eq",
	"tp_lo":                                      "default__set_operator_lo__with__set_operator_foreach",
	"tp_le":                                      "default__set_operator_le__with__set_operator_foreach",
	"tp_gr":                                      "default__set_operator_gr__with__set_operator_foreach",
	"tp_ge":                                      "default__set_operator_ge__with__set_operator_foreach",
	"tp_iter":                                    "hashset_iter",
	"tp_foreach":                                 "hashset_foreach",
	"tp_foreach_pair":                            "default__foreach_pair__with__foreach",
	"tp_sizeob":                                  "default__sizeob__with__size",
	"tp_size":                                    "hashset_size",
	"tp_size_fast":                               "hashset_size",
	"tp_contains":                                "hashset_contains",
	"tp_getitem":                                 "NULL",
	"tp_trygetitem":                              "NULL",
	"tp_bounditem":                               "NULL",
	"tp_hasitem":                                 "NULL",
	"tp_delitem":                                 "NULL",
	"tp_setitem":                                 "NULL",
	"tp_getrange":                                "NULL",
	"tp_delrange":                                "NULL",
	"tp_setrange":                                "NULL",
	"tp_inv":                                     "default__set_operator_inv__unsupported",
	"tp_add":                                     "default__set_operator_add__unsupported",
	"tp_inplace_add":                             "default__set_operator_inplace_add__with__set_insertall",
	"tp_sub":                                     "default__set_operator_sub__unsupported",
	"tp_inplace_sub":                             "default__set_operator_inplace_sub__with__set_operator_foreach__and__set_removeall",
	"tp_mul":                                     "NULL",
	"tp_inplace_mul":                             "NULL",
	"tp_and":                                     "default__set_operator_and__unsupported",
	"tp_inplace_and":                             "default__set_operator_inplace_and__with__set_operator_foreach__and__set_removeall",
	"tp_or":                                      "default__set_operator_add__unsupported",
	"tp_inplace_or":                              "default__set_operator_inplace_add__with__set_insertall",
	"tp_xor":                                     "default__set_operator_xor__unsupported",
	"tp_inplace_xor":                             "default__set_operator_inplace_xor__with__set_operator_foreach__and__set_insertall__and__set_removeall",
	"mh_seq_operator_bool":                       "hashset_bool",
	"mh_seq_operator_sizeob":                     "default__set_operator_sizeob__with__set_operator_size",
	"mh_seq_operator_size":                       "hashset_size",
	"mh_seq_operator_iter":                       "hashset_iter",
	"mh_seq_operator_foreach":                    "hashset_foreach",
	"mh_seq_operator_foreach_pair":               "default__seq_operator_foreach_pair__with__seq_operator_foreach",
	"mh_seq_operator_getitem":                    "default__seq_operator_getitem__with__seq_operator_getitem_index",
	"mh_seq_operator_getitem_index":              "default__seq_operator_getitem_index__with__seq_operator_foreach",
	"mh_seq_operator_trygetitem":                 "default__seq_operator_trygetitem__with__seq_operator_trygetitem_index",
	"mh_seq_operator_trygetitem_index":           "default__seq_operator_trygetitem_index__with__seq_operator_foreach",
	"mh_seq_operator_hasitem":                    "default__seq_operator_hasitem__with__seq_operator_sizeob",
	"mh_seq_operator_hasitem_index":              "default__seq_operator_hasitem_index__with__seq_operator_size",
	"mh_seq_operator_bounditem":                  "default__seq_operator_bounditem__with__seq_operator_getitem",
	"mh_seq_operator_bounditem_index":            "default__seq_operator_bounditem_index__with__seq_operator_getitem_index",
	"mh_seq_operator_delitem":                    "default__seq_operator_delitem__unsupported", // TODO: Shouldn't be *__unsupported
	"mh_seq_operator_delitem_index":              "default__seq_operator_delitem_index__unsupported", // TODO: Shouldn't be *__unsupported
	"mh_seq_operator_setitem":                    "default__seq_operator_setitem__unsupported",
	"mh_seq_operator_setitem_index":              "default__seq_operator_setitem_index__unsupported",
	"mh_seq_operator_getrange":                   "default__seq_operator_getrange__with__seq_operator_getrange_index__and__seq_operator_getrange_index_n",
	"mh_seq_operator_getrange_index":             "default__seq_operator_getrange_index__with__seq_operator_size__and__seq_operator_iter",
	"mh_seq_operator_getrange_index_n":           "default__seq_operator_getrange_index_n__with__seq_operator_size__and__seq_operator_iter",
	"mh_seq_operator_delrange":                   "default__seq_operator_delrange__unsupported", // TODO: Shouldn't be *__unsupported
	"mh_seq_operator_delrange_index":             "default__seq_operator_delrange_index__unsupported", // TODO: Shouldn't be *__unsupported
	"mh_seq_operator_delrange_index_n":           "default__seq_operator_delrange_index_n__unsupported", // TODO: Shouldn't be *__unsupported
	"mh_seq_operator_setrange":                   "default__seq_operator_setrange__unsupported",
	"mh_seq_operator_setrange_index":             "default__seq_operator_setrange_index__unsupported",
	"mh_seq_operator_setrange_index_n":           "default__seq_operator_setrange_index_n__unsupported",
	"mh_seq_operator_assign":                     "default__seq_operator_assign__unsupported", // TODO: Shouldn't be *__unsupported
	"mh_seq_operator_hash":                       "default__seq_operator_hash__with__seq_operator_foreach",
	"mh_seq_operator_compare":                    "default__seq_operator_compare__with__seq_operator_foreach",
	"mh_seq_operator_compare_eq":                 "default__seq_operator_compare_eq__with__seq_operator_foreach",
	"mh_seq_operator_trycompare_eq":              "default__seq_operator_trycompare_eq__with__seq_operator_compare_eq",
	"mh_seq_operator_eq":                         "default__seq_operator_eq__with__seq_operator_compare_eq",
	"mh_seq_operator_ne":                         "default__seq_operator_ne__with__seq_operator_compare_eq",
	"mh_seq_operator_lo":                         "default__seq_operator_lo__with__seq_operator_compare",
	"mh_seq_operator_le":                         "default__seq_operator_le__with__seq_operator_compare",
	"mh_seq_operator_gr":                         "default__seq_operator_gr__with__seq_operator_compare",
	"mh_seq_operator_ge":                         "default__seq_operator_ge__with__seq_operator_compare",
	"mh_seq_operator_add":                        "DeeSeq_Concat",
	"mh_seq_operator_mul":                        "default__seq_operator_mul__with__DeeSeq_Repeat",
	"mh_seq_operator_inplace_add":                "default__seq_operator_inplace_add__with__seq_operator_add",
	"mh_seq_operator_inplace_mul":                "default__seq_operator_inplace_mul__with__seq_operator_mul",
	"mh_seq_enumerate":                           "default__seq_enumerate__with__seq_operator_foreach__and__counter",
	"mh_seq_enumerate_index":                     "default__seq_enumerate_index__with__seq_operator_foreach__and__counter",
	"mh_seq_makeenumeration":                     "default__seq_makeenumeration__with__seq_operator_iter__and__counter",
	"mh_seq_makeenumeration_with_range":          "default__seq_makeenumeration_with_range__with__seq_makeenumeration_with_intrange",
	"mh_seq_makeenumeration_with_intrange":       "default__seq_makeenumeration_with_intrange__with__seq_operator_iter__and__counter",
	"mh_seq_foreach_reverse":                     "NULL", // TODO: Add custom impl once HashSet is re-written to be order-sensitive
	"mh_seq_enumerate_index_reverse":             "NULL", // TODO: Add custom impl once HashSet is re-written to be order-sensitive
	"mh_seq_unpack":                              "default__seq_unpack__with__tp_asvector",
	"mh_seq_unpack_ex":                           "default__seq_unpack_ex__with__tp_asvector",
	"mh_seq_unpack_ub":                           "default__seq_unpack_ex__with__tp_asvector",
	"mh_seq_trygetfirst":                         "default__seq_trygetfirst__with__seq_operator_foreach", // TODO: Optimized impl in HashSet
	"mh_seq_getfirst":                            "default__seq_getfirst__with__seq_trygetfirst", // TODO: Optimized impl in HashSet
	"mh_seq_boundfirst":                          "default__seq_boundfirst__with__seq_trygetfirst", // TODO: Optimized impl in HashSet
	"mh_seq_delfirst":                            "default__seq_delfirst__unsupported", // TODO: Shouldn't be *__unsupported
	"mh_seq_setfirst":                            "default__seq_setfirst__unsupported",
	"mh_seq_trygetlast":                          "default__seq_trygetlast__with__seq_operator_foreach", // TODO: Optimized impl in HashSet
	"mh_seq_getlast":                             "default__seq_getlast__with__seq_trygetlast", // TODO: Optimized impl in HashSet
	"mh_seq_boundlast":                           "default__seq_boundlast__with__seq_trygetlast", // TODO: Optimized impl in HashSet
	"mh_seq_dellast":                             "default__seq_dellast__unsupported", // TODO: Shouldn't be *__unsupported
	"mh_seq_setlast":                             "default__seq_setlast__unsupported",
	"mh_seq_cached":                              "default__seq_cached__with__seq_operator_iter",
	"mh_seq_frozen":                              "default__seq_frozen__with__set_frozen",
	"mh_seq_any":                                 "default__seq_any__with__seq_operator_foreach",
	"mh_seq_any_with_key":                        "default__seq_any_with_key__with__seq_operator_foreach",
	"mh_seq_any_with_range":                      "default__seq_any_with_range__with__seq_enumerate_index",
	"mh_seq_any_with_range_and_key":              "default__seq_any_with_range_and_key__with__seq_enumerate_index",
	"mh_seq_all":                                 "default__seq_all__with__seq_operator_foreach",
	"mh_seq_all_with_key":                        "default__seq_all_with_key__with__seq_operator_foreach",
	"mh_seq_all_with_range":                      "default__seq_all_with_range__with__seq_enumerate_index",
	"mh_seq_all_with_range_and_key":              "default__seq_all_with_range_and_key__with__seq_enumerate_index",
	"mh_seq_parity":                              "default__seq_parity__with__seq_count",
	"mh_seq_parity_with_key":                     "default__seq_parity_with_key__with__seq_operator_foreach",
	"mh_seq_parity_with_range":                   "default__seq_parity_with_range__with__seq_enumerate_index",
	"mh_seq_parity_with_range_and_key":           "default__seq_parity_with_range_and_key__with__seq_enumerate_index",
	"mh_seq_reduce":                              "default__seq_reduce__with__seq_operator_foreach",
	"mh_seq_reduce_with_init":                    "default__seq_reduce_with_init__with__seq_operator_foreach",
	"mh_seq_reduce_with_range":                   "default__seq_reduce_with_range__with__seq_enumerate_index",
	"mh_seq_reduce_with_range_and_init":          "default__seq_reduce_with_range_and_init__with__seq_enumerate_index",
	"mh_seq_min":                                 "default__seq_min__with__seq_operator_foreach",
	"mh_seq_min_with_key":                        "default__seq_min_with_key__with__seq_operator_foreach",
	"mh_seq_min_with_range":                      "default__seq_min_with_range__with__seq_enumerate_index",
	"mh_seq_min_with_range_and_key":              "default__seq_min_with_range_and_key__with__seq_enumerate_index",
	"mh_seq_max":                                 "default__seq_max__with__seq_operator_foreach",
	"mh_seq_max_with_key":                        "default__seq_max_with_key__with__seq_operator_foreach",
	"mh_seq_max_with_range":                      "default__seq_max_with_range__with__seq_enumerate_index",
	"mh_seq_max_with_range_and_key":              "default__seq_max_with_range_and_key__with__seq_enumerate_index",
	"mh_seq_sum":                                 "default__seq_sum__with__seq_operator_foreach",
	"mh_seq_sum_with_range":                      "default__seq_sum_with_range__with__seq_enumerate_index",
	"mh_seq_count":                               "default__seq_count__with__set_operator_contains",
	"mh_seq_count_with_key":                      "default__seq_count_with_key__with__seq_operator_foreach",
	"mh_seq_count_with_range":                    "default__seq_count_with_range__with__seq_enumerate_index",
	"mh_seq_count_with_range_and_key":            "default__seq_count_with_range_and_key__with__seq_enumerate_index",
	"mh_seq_contains":                            "default__seq_contains__with__seq_operator_foreach", // TODO: Why doesn't this use "mh_seq_operator_contains" ("hashset_contains") ?
	"mh_seq_contains_with_key":                   "default__seq_contains_with_key__with__seq_operator_foreach",
	"mh_seq_contains_with_range":                 "default__seq_contains_with_range__with__seq_enumerate_index",
	"mh_seq_contains_with_range_and_key":         "default__seq_contains_with_range_and_key__with__seq_enumerate_index",
	"mh_seq_operator_contains":                   "default__seq_operator_contains__with__seq_contains", // TODO: Why isn't this "hashset_contains" ?
	"mh_seq_locate":                              "default__seq_locate__with__seq_operator_foreach",
	"mh_seq_locate_with_range":                   "default__seq_locate_with_range__with__seq_enumerate_index",
	"mh_seq_rlocate":                             "default__seq_rlocate__with__seq_operator_foreach",
	"mh_seq_rlocate_with_range":                  "default__seq_rlocate_with_range__with__seq_enumerate_index",
	"mh_seq_startswith":                          "default__seq_startswith__with__seq_trygetfirst",
	"mh_seq_startswith_with_key":                 "default__seq_startswith_with_key__with__seq_trygetfirst",
	"mh_seq_startswith_with_range":               "default__seq_startswith_with_range__with__seq_operator_trygetitem_index",
	"mh_seq_startswith_with_range_and_key":       "default__seq_startswith_with_range_and_key__with__seq_operator_trygetitem_index",
	"mh_seq_endswith":                            "default__seq_endswith__with__seq_trygetlast",
	"mh_seq_endswith_with_key":                   "default__seq_endswith_with_key__with__seq_trygetlast",
	"mh_seq_endswith_with_range":                 "default__seq_endswith_with_range__with__seq_operator_size__and__operator_trygetitem_index",
	"mh_seq_endswith_with_range_and_key":         "default__seq_endswith_with_range_and_key__with__seq_operator_size__and__operator_trygetitem_index",
	"mh_seq_find":                                "default__seq_find__with__seq_enumerate_index", // TODO: Optimized impl in HashSet
	"mh_seq_find_with_key":                       "default__seq_find_with_key__with__seq_enumerate_index",
	"mh_seq_rfind":                               "default__seq_rfind__with__seq_enumerate_index", // TODO: Optimized impl in HashSet
	"mh_seq_rfind_with_key":                      "default__seq_rfind_with_key__with__seq_enumerate_index",
	"mh_seq_erase":                               "default__seq_erase__unsupported", // TODO: Shouldn't be *__unsupported
	"mh_seq_insert":                              "default__seq_insert__unsupported",
	"mh_seq_insertall":                           "default__seq_insertall__unsupported",
	"mh_seq_pushfront":                           "default__seq_pushfront__unsupported",
	"mh_seq_append":                              "default__seq_append__unsupported",
	"mh_seq_extend":                              "default__seq_extend__unsupported",
	"mh_seq_xchitem_index":                       "default__seq_xchitem_index__unsupported",
	"mh_seq_clear":                               "hashset_mh_clear",
	"mh_seq_pop":                                 "default__seq_pop__unsupported", // TODO: Shouldn't be *__unsupported
	"mh_seq_remove":                              "default__seq_remove__unsupported", // TODO: Impl using "mh_set_remove"
	"mh_seq_remove_with_key":                     "default__seq_remove_with_key__unsupported", // TODO: Shouldn't be *__unsupported
	"mh_seq_rremove":                             "default__seq_rremove__unsupported", // TODO: Impl using "mh_set_remove"
	"mh_seq_rremove_with_key":                    "default__seq_rremove_with_key__unsupported", // TODO: Shouldn't be *__unsupported
	"mh_seq_removeall":                           "default__seq_removeall__unsupported", // TODO: Impl using "mh_set_remove"
	"mh_seq_removeall_with_key":                  "default__seq_removeall_with_key__unsupported", // TODO: Shouldn't be *__unsupported
	"mh_seq_removeif":                            "default__seq_removeif__unsupported", // TODO: Shouldn't be *__unsupported
	"mh_seq_resize":                              "default__seq_resize__unsupported",
	"mh_seq_fill":                                "default__seq_fill__unsupported",
	"mh_seq_reverse":                             "default__seq_reverse__unsupported",
	"mh_seq_reversed":                            "default__seq_reversed__with__seq_operator_size__and__seq_operator_trygetitem_index",
	"mh_seq_sort":                                "default__seq_sort__unsupported",
	"mh_seq_sort_with_key":                       "default__seq_sort_with_key__unsupported",
	"mh_seq_sorted":                              "default__seq_sorted__with__seq_operator_size__and__seq_operator_trygetitem_index",
	"mh_seq_sorted_with_key":                     "default__seq_sorted_with_key__with__seq_operator_size__and__seq_operator_trygetitem_index",
	"mh_seq_bfind":                               "default__seq_bfind__with__seq_operator_size__and__seq_operator_trygetitem_index",
	"mh_seq_bfind_with_key":                      "default__seq_bfind_with_key__with__seq_operator_size__and__seq_operator_trygetitem_index",
	"mh_seq_bposition":                           "default__seq_bposition__with__seq_operator_size__and__seq_operator_trygetitem_index",
	"mh_seq_bposition_with_key":                  "default__seq_bposition_with_key__with__seq_operator_size__and__seq_operator_trygetitem_index",
	"mh_seq_brange":                              "default__seq_brange__with__seq_operator_size__and__seq_operator_trygetitem_index",
	"mh_seq_brange_with_key":                     "default__seq_brange_with_key__with__seq_operator_size__and__seq_operator_trygetitem_index",
	"mh_set_operator_iter":                       "hashset_iter",
	"mh_set_operator_foreach":                    "hashset_foreach",
	"mh_set_operator_sizeob":                     "default__set_operator_sizeob__with__set_operator_size",
	"mh_set_operator_size":                       "hashset_size",
	"mh_set_operator_hash":                       "default__set_operator_hash__with__set_operator_foreach",
	"mh_set_operator_compare_eq":                 "default__set_operator_compare_eq__with__set_operator_foreach",
	"mh_set_operator_trycompare_eq":              "default__set_operator_trycompare_eq__with__set_operator_compare_eq",
	"mh_set_operator_eq":                         "default__set_operator_eq__with__set_operator_compare_eq",
	"mh_set_operator_ne":                         "default__set_operator_ne__with__set_operator_compare_eq",
	"mh_set_operator_lo":                         "default__set_operator_lo__with__set_operator_foreach",
	"mh_set_operator_le":                         "default__set_operator_le__with__set_operator_foreach",
	"mh_set_operator_gr":                         "default__set_operator_gr__with__set_operator_foreach",
	"mh_set_operator_ge":                         "default__set_operator_ge__with__set_operator_foreach",
	"mh_set_operator_inv":                        "default__set_operator_inv__unsupported",
	"mh_set_operator_add":                        "default__set_operator_add__unsupported",
	"mh_set_operator_sub":                        "default__set_operator_sub__unsupported",
	"mh_set_operator_and":                        "default__set_operator_and__unsupported",
	"mh_set_operator_xor":                        "default__set_operator_xor__unsupported",
	"mh_set_operator_inplace_add":                "default__set_operator_inplace_add__with__set_insertall",
	"mh_set_operator_inplace_sub":                "default__set_operator_inplace_sub__with__set_operator_foreach__and__set_removeall",
	"mh_set_operator_inplace_and":                "default__set_operator_inplace_and__with__set_operator_foreach__and__set_removeall",
	"mh_set_operator_inplace_xor":                "default__set_operator_inplace_xor__with__set_operator_foreach__and__set_insertall__and__set_removeall",
	"mh_set_frozen":                              "DeeRoSet_FromSequence",
	"mh_set_unify":                               "DeeHashSet_Unify",
	"mh_set_insert":                              "DeeHashSet_Insert",
	"mh_set_insertall":                           "default__set_insertall__with__set_insert",
	"mh_set_remove":                              "DeeHashSet_Remove",
	"mh_set_removeall":                           "default__set_removeall__with__set_remove",
	"mh_set_pop":                                 "hashset_mh_pop",
	"mh_set_pop_with_default":                    "default__set_pop_with_default__with_callattr_pop",
	"mh_map_operator_iter":                       "default__map_operator_iter__with__seq_operator_iter",
	"mh_map_operator_foreach_pair":               "default__map_operator_foreach_pair__with__seq_operator_foreach_pair",
	"mh_map_operator_sizeob":                     "default__map_operator_sizeob__with__map_operator_size",
	"mh_map_operator_size":                       "default__map_operator_size__with__map_operator_foreach_pair",
	"mh_map_operator_getitem":                    "default__map_operator_getitem__with__map_enumerate",
	"mh_map_operator_trygetitem":                 "default__map_operator_trygetitem__with__map_enumerate",
	"mh_map_operator_getitem_index":              "default__map_operator_getitem_index__with__map_operator_getitem",
	"mh_map_operator_trygetitem_index":           "default__map_operator_trygetitem_index__with__map_operator_trygetitem",
	"mh_map_operator_getitem_string_hash":        "default__map_operator_getitem_string_hash__with__map_enumerate",
	"mh_map_operator_trygetitem_string_hash":     "default__map_operator_trygetitem_string_hash__with__map_enumerate",
	"mh_map_operator_getitem_string_len_hash":    "default__map_operator_getitem_string_len_hash__with__map_enumerate",
	"mh_map_operator_trygetitem_string_len_hash": "default__map_operator_trygetitem_string_len_hash__with__map_enumerate",
	"mh_map_operator_bounditem":                  "default__map_operator_bounditem__with__map_enumerate",
	"mh_map_operator_bounditem_index":            "default__map_operator_bounditem_index__with__map_operator_bounditem",
	"mh_map_operator_bounditem_string_hash":      "default__map_operator_bounditem_string_hash__with__map_operator_bounditem",
	"mh_map_operator_bounditem_string_len_hash":  "default__map_operator_bounditem_string_len_hash__with__map_operator_bounditem",
	"mh_map_operator_hasitem":                    "default__map_operator_hasitem__with__map_operator_bounditem",
	"mh_map_operator_hasitem_index":              "default__map_operator_hasitem_index__with__map_operator_bounditem_index",
	"mh_map_operator_hasitem_string_hash":        "default__map_operator_hasitem_string_hash__with__map_operator_bounditem_string_hash",
	"mh_map_operator_hasitem_string_len_hash":    "default__map_operator_hasitem_string_len_hash__with__map_operator_bounditem_string_len_hash",
	"mh_map_operator_delitem":                    "default__map_operator_delitem__unsupported", // TODO: Shouldn't be *__unsupported
	"mh_map_operator_delitem_index":              "default__map_operator_delitem_index__unsupported", // TODO: Shouldn't be *__unsupported
	"mh_map_operator_delitem_string_hash":        "default__map_operator_delitem_string_hash__unsupported", // TODO: Shouldn't be *__unsupported
	"mh_map_operator_delitem_string_len_hash":    "default__map_operator_delitem_string_len_hash__unsupported", // TODO: Shouldn't be *__unsupported
	"mh_map_operator_setitem":                    "default__map_operator_setitem__unsupported",
	"mh_map_operator_setitem_index":              "default__map_operator_setitem_index__unsupported",
	"mh_map_operator_setitem_string_hash":        "default__map_operator_setitem_string_hash__unsupported",
	"mh_map_operator_setitem_string_len_hash":    "default__map_operator_setitem_string_len_hash__unsupported",
	"mh_map_operator_contains":                   "default__map_operator_contains__with__map_operator_bounditem",
	"mh_map_keys":                                "default__map_keys__with__map_iterkeys",
	"mh_map_iterkeys":                            "default__map_iterkeys__with__map_operator_iter",
	"mh_map_values":                              "default__map_values__with__map_itervalues",
	"mh_map_itervalues":                          "default__map_itervalues__with__map_operator_iter",
	"mh_map_enumerate":                           "default__map_operator_foreach_pair__with__seq_operator_foreach_pair",
	"mh_map_enumerate_range":                     "default__map_enumerate_range__with__map_enumerate",
	"mh_map_makeenumeration":                     "default__map_makeenumeration__with__map_operator_iter",
	"mh_map_makeenumeration_with_range":          "default__map_makeenumeration_with_range__with__map_operator_iter",
	"mh_map_operator_compare_eq":                 "default__map_operator_compare_eq__with__map_operator_foreach_pair",
	"mh_map_operator_trycompare_eq":              "default__map_operator_trycompare_eq__with__map_operator_compare_eq",
	"mh_map_operator_eq":                         "default__map_operator_eq__with__map_operator_compare_eq",
	"mh_map_operator_ne":                         "default__map_operator_ne__with__map_operator_compare_eq",
	"mh_map_operator_lo":                         "default__map_operator_lo__with__map_operator_foreach_pair",
	"mh_map_operator_le":                         "default__map_operator_le__with__map_operator_foreach_pair",
	"mh_map_operator_gr":                         "default__map_operator_gr__with__map_operator_foreach_pair",
	"mh_map_operator_ge":                         "default__map_operator_ge__with__map_operator_foreach_pair",
	"mh_map_operator_add":                        "default__map_operator_add__unsupported",
	"mh_map_operator_sub":                        "default__map_operator_sub__unsupported",
	"mh_map_operator_and":                        "default__map_operator_and__unsupported",
	"mh_map_operator_xor":                        "default__map_operator_xor__unsupported",
	"mh_map_operator_inplace_add":                "default__map_operator_inplace_add__unsupported",
	"mh_map_operator_inplace_sub":                "default__map_operator_inplace_sub__unsupported",
	"mh_map_operator_inplace_and":                "default__map_operator_inplace_and__unsupported",
	"mh_map_operator_inplace_xor":                "default__map_operator_inplace_xor__unsupported",
	"mh_map_frozen":                              "DeeRoDict_FromSequence",
	"mh_map_setold":                              "default__map_setold__unsupported",
	"mh_map_setold_ex":                           "default__map_setold_ex__unsupported",
	"mh_map_setnew":                              "default__map_setnew__unsupported",
	"mh_map_setnew_ex":                           "default__map_setnew_ex__unsupported",
	"mh_map_setdefault":                          "default__map_setdefault__unsupported",
	"mh_map_update":                              "default__map_update__unsupported",
	"mh_map_remove":                              "default__map_remove__unsupported", // TODO: Shouldn't be *__unsupported
	"mh_map_removekeys":                          "default__map_removekeys__unsupported", // TODO: Shouldn't be *__unsupported
	"mh_map_pop":                                 "default__map_pop__unsupported", // TODO: Shouldn't be *__unsupported
	"mh_map_pop_with_default":                    "default__map_pop_with_default__unsupported", // TODO: Shouldn't be *__unsupported
	"mh_map_popitem":                             "default__map_popitem__unsupported", // TODO: Shouldn't be *__unsupported
});


Type_assert(deemon.Dict, {
	"tp_assign":                                  "dict_assign",
	"tp_move_assign":                             "dict_moveassign",
	"tp_str":                                     "object_str",
	"tp_print":                                   "default__print__with__str",
	"tp_repr":                                    "default__repr__with__printrepr",
	"tp_printrepr":                               "dict_printrepr",
	"tp_bool":                                    "dict_bool",
	"tp_hash":                                    "default__set_operator_hash__with__map_operator_foreach_pair",
	"tp_compare_eq":                              "default__map_operator_compare_eq__with__map_operator_foreach_pair",
	"tp_compare":                                 "NULL", // TODO: Should be default__compare__with__eq__and__lo
	"tp_trycompare_eq":                           "default__map_operator_trycompare_eq__with__map_operator_compare_eq",
	"tp_eq":                                      "default__map_operator_eq__with__map_operator_compare_eq",
	"tp_ne":                                      "default__map_operator_ne__with__map_operator_compare_eq",
	"tp_lo":                                      "default__map_operator_lo__with__map_operator_foreach_pair",
	"tp_le":                                      "default__map_operator_le__with__map_operator_foreach_pair",
	"tp_gr":                                      "default__map_operator_gr__with__map_operator_foreach_pair",
	"tp_ge":                                      "default__map_operator_ge__with__map_operator_foreach_pair",
	"tp_iter":                                    "dict_iter",
	"tp_foreach":                                 "dict_mh_seq_foreach",
	"tp_foreach_pair":                            "dict_foreach_pair",
	"tp_sizeob":                                  "dict_sizeob",
	"tp_size":                                    "dict_size",
	"tp_size_fast":                               "dict_size",
	"tp_contains":                                "dict_contains",
	"tp_getitem_index_fast":                      "NULL",
	"tp_getitem":                                 "dict_getitem",
	"tp_getitem_index":                           "dict_getitem_index",
	"tp_getitem_string_hash":                     "dict_getitem_string_hash",
	"tp_getitem_string_len_hash":                 "dict_getitem_string_len_hash",
	"tp_trygetitem":                              "dict_trygetitem",
	"tp_trygetitem_index":                        "dict_trygetitem_index",
	"tp_trygetitem_string_hash":                  "dict_trygetitem_string_hash",
	"tp_trygetitem_string_len_hash":              "dict_trygetitem_string_len_hash",
	"tp_bounditem":                               "dict_bounditem",
	"tp_bounditem_index":                         "dict_bounditem_index",
	"tp_bounditem_string_hash":                   "dict_bounditem_string_hash",
	"tp_bounditem_string_len_hash":               "dict_bounditem_string_len_hash",
	"tp_hasitem":                                 "dict_hasitem",
	"tp_hasitem_index":                           "dict_hasitem_index",
	"tp_hasitem_string_hash":                     "dict_hasitem_string_hash",
	"tp_hasitem_string_len_hash":                 "dict_hasitem_string_len_hash",
	"tp_delitem":                                 "dict_delitem",
	"tp_delitem_index":                           "dict_delitem_index",
	"tp_delitem_string_hash":                     "dict_delitem_string_hash",
	"tp_delitem_string_len_hash":                 "dict_delitem_string_len_hash",
	"tp_setitem":                                 "dict_setitem",
	"tp_setitem_index":                           "dict_setitem_index",
	"tp_setitem_string_hash":                     "dict_setitem_string_hash",
	"tp_setitem_string_len_hash":                 "dict_setitem_string_len_hash",
	"tp_inv":                                     "default__set_operator_inv",
	"tp_add":                                     "default__map_operator_add__unsupported",
	"tp_inplace_add":                             "default__map_operator_inplace_add__with__map_update",
	"tp_sub":                                     "default__map_operator_sub__unsupported",
	"tp_inplace_sub":                             "default__map_operator_inplace_sub__with__map_removekeys",
	"tp_and":                                     "default__map_operator_and__unsupported",
	"tp_inplace_and":                             "default__map_operator_inplace_and__with__map_operator_foreach_pair__and__map_removekeys",
	"tp_or":                                      "default__map_operator_add__unsupported",
	"tp_inplace_or":                              "default__map_operator_inplace_add__with__map_update",
	"tp_xor":                                     "default__map_operator_xor__unsupported",
	"tp_inplace_xor":                             "default__map_operator_inplace_xor__with__map_operator_foreach_pair__and__map_update__and__map_removekeys",
	"mh_seq_operator_bool":                       "dict_bool",
	"mh_seq_operator_sizeob":                     "dict_sizeob",
	"mh_seq_operator_size":                       "dict_size",
	"mh_seq_operator_iter":                       "dict_iter",
	"mh_seq_operator_foreach":                    "dict_mh_seq_foreach",
	"mh_seq_operator_foreach_pair":               "dict_foreach_pair",
	"mh_seq_operator_getitem":                    "default__seq_operator_getitem__with__seq_operator_getitem_index",
	"mh_seq_operator_getitem_index":              "dict_mh_seq_getitem_index",
	"mh_seq_operator_trygetitem":                 "default__seq_operator_trygetitem__with__seq_operator_trygetitem_index",
	"mh_seq_operator_trygetitem_index":           "dict_mh_seq_trygetitem_index",
	"mh_seq_operator_hasitem":                    "default__seq_operator_hasitem__with__seq_operator_hasitem_index",
	"mh_seq_operator_hasitem_index":              "default__seq_operator_hasitem_index__with__seq_operator_size",
	"mh_seq_operator_bounditem":                  "default__seq_operator_bounditem__with__seq_operator_bounditem_index",
	"mh_seq_operator_bounditem_index":            "default__seq_operator_bounditem_index__with__seq_operator_getitem_index", // TODO: This can be optimized!
	"mh_seq_operator_delitem":                    "default__seq_operator_delitem__with__seq_operator_delitem_index",
	"mh_seq_operator_delitem_index":              "dict_mh_seq_delitem_index",
	"mh_seq_operator_setitem":                    "default__seq_operator_setitem__with__seq_operator_setitem_index",
	"mh_seq_operator_setitem_index":              "dict_mh_seq_setitem_index",
	"mh_seq_operator_getrange":                   "default__seq_operator_getrange__with__seq_operator_getrange_index__and__seq_operator_getrange_index_n",
	"mh_seq_operator_getrange_index":             "default__seq_operator_getrange_index__with__seq_operator_size__and__seq_operator_trygetitem_index",
	"mh_seq_operator_getrange_index_n":           "default__seq_operator_getrange_index_n__with__seq_operator_size__and__seq_operator_trygetitem_index",
	"mh_seq_operator_delrange":                   "default__seq_operator_delrange__with__seq_operator_delrange_index__and__seq_operator_delrange_index_n",
	"mh_seq_operator_delrange_index":             "default__seq_operator_delrange_index__with__seq_operator_size__and__seq_erase",
	"mh_seq_operator_delrange_index_n":           "default__seq_operator_delrange_index_n__with__seq_operator_size__and__seq_operator_delrange_index",
	"mh_seq_operator_setrange":                   "default__seq_operator_setrange__unsupported",
	"mh_seq_operator_setrange_index":             "default__seq_operator_setrange_index__unsupported",
	"mh_seq_operator_setrange_index_n":           "default__seq_operator_setrange_index_n__unsupported",
	"mh_seq_operator_assign":                     "dict_assign",
	"mh_seq_operator_hash":                       "default__seq_operator_hash__with__seq_operator_foreach_pair",
	"mh_seq_operator_compare":                    "dict_mh_seq_compare",
	"mh_seq_operator_compare_eq":                 "dict_mh_seq_compare_eq",
	"mh_seq_operator_trycompare_eq":              "dict_mh_seq_trycompare_eq",
	"mh_seq_operator_eq":                         "default__seq_operator_eq__with__seq_operator_compare_eq",
	"mh_seq_operator_ne":                         "default__seq_operator_ne__with__seq_operator_compare_eq",
	"mh_seq_operator_lo":                         "default__seq_operator_lo__with__seq_operator_compare",
	"mh_seq_operator_le":                         "default__seq_operator_le__with__seq_operator_compare",
	"mh_seq_operator_gr":                         "default__seq_operator_gr__with__seq_operator_compare",
	"mh_seq_operator_ge":                         "default__seq_operator_ge__with__seq_operator_compare",
	"mh_seq_operator_add":                        "DeeSeq_Concat",
	"mh_seq_operator_mul":                        "default__seq_operator_mul__with__DeeSeq_Repeat",
	"mh_seq_operator_inplace_add":                "default__seq_operator_inplace_add__with__seq_extend",
	"mh_seq_operator_inplace_mul":                "default__seq_operator_inplace_mul__with__seq_clear__and__seq_extend",
	"mh_seq_enumerate":                           "default__seq_enumerate__with__seq_enumerate_index",
	"mh_seq_enumerate_index":                     "dict_mh_seq_enumerate_index",
	"mh_seq_makeenumeration":                     "default__seq_makeenumeration__with__seq_operator_size__and__seq_operator_getitem_index",
	"mh_seq_makeenumeration_with_range":          "default__seq_makeenumeration_with_range__with__seq_makeenumeration_with_intrange",
	"mh_seq_makeenumeration_with_intrange":       "default__seq_makeenumeration_with_intrange__with__seq_operator_size__and__seq_operator_getitem_index",
	"mh_seq_foreach_reverse":                     "dict_mh_seq_foreach_reverse",
	"mh_seq_enumerate_index_reverse":             "dict_mh_seq_enumerate_index_reverse",
	"mh_seq_unpack":                              "default__seq_unpack__with__seq_operator_foreach",
	"mh_seq_unpack_ex":                           "default__seq_unpack_ex__with__seq_operator_foreach",
	"mh_seq_unpack_ub":                           "default__seq_unpack_ex__with__seq_operator_foreach",
	"mh_seq_trygetfirst":                         "dict_trygetfirst",
	"mh_seq_getfirst":                            "dict_getfirst",
	"mh_seq_boundfirst":                          "dict_nonempty_as_bound",
	"mh_seq_delfirst":                            "dict_delfirst",
	"mh_seq_setfirst":                            "dict_setfirst",
	"mh_seq_trygetlast":                          "dict_trygetlast",
	"mh_seq_getlast":                             "dict_getlast",
	"mh_seq_boundlast":                           "dict_nonempty_as_bound",
	"mh_seq_dellast":                             "dict_dellast",
	"mh_seq_setlast":                             "dict_setlast",
	"mh_seq_cached":                              "default__seq_cached__with__seq_operator_iter", // TODO: Should be "(this as Sequence)"
	"mh_seq_frozen":                              "default__seq_frozen__with__map_frozen",
	"mh_seq_any":                                 "dict_bool",
	"mh_seq_any_with_key":                        "default__seq_any_with_key__with__seq_operator_foreach",
	"mh_seq_any_with_range":                      "default__seq_any_with_range__with__seqclass_map__and__seq_operator_bool__and__map_operator_size",
	"mh_seq_any_with_range_and_key":              "default__seq_any_with_range_and_key__with__seq_enumerate_index",
	"mh_seq_all":                                 {"_DeeNone_reti1_1", "_DeeNone_reti1"},
	"mh_seq_all_with_key":                        "default__seq_all_with_key__with__seq_operator_foreach",
	"mh_seq_all_with_range":                      {"_DeeNone_reti1_3", "_DeeNone_reti1"},
	"mh_seq_all_with_range_and_key":              "default__seq_all_with_range_and_key__with__seq_enumerate_index",
	"mh_seq_parity":                              "default__seq_parity__with__seq_count",
	"mh_seq_parity_with_key":                     "default__seq_parity_with_key__with__seq_operator_foreach",
	"mh_seq_parity_with_range":                   "default__seq_parity_with_range__with__seq_enumerate_index",
	"mh_seq_parity_with_range_and_key":           "default__seq_parity_with_range_and_key__with__seq_enumerate_index",
	"mh_seq_reduce":                              "default__seq_reduce__with__seq_operator_foreach",
	"mh_seq_reduce_with_init":                    "default__seq_reduce_with_init__with__seq_operator_foreach",
	"mh_seq_reduce_with_range":                   "default__seq_reduce_with_range__with__seq_enumerate_index",
	"mh_seq_reduce_with_range_and_init":          "default__seq_reduce_with_range_and_init__with__seq_enumerate_index",
	"mh_seq_min":                                 "default__seq_min__with__seq_operator_foreach",
	"mh_seq_min_with_key":                        "default__seq_min_with_key__with__seq_operator_foreach",
	"mh_seq_min_with_range":                      "default__seq_min_with_range__with__seq_enumerate_index",
	"mh_seq_min_with_range_and_key":              "default__seq_min_with_range_and_key__with__seq_enumerate_index",
	"mh_seq_max":                                 "default__seq_max__with__seq_operator_foreach",
	"mh_seq_max_with_key":                        "default__seq_max_with_key__with__seq_operator_foreach",
	"mh_seq_max_with_range":                      "default__seq_max_with_range__with__seq_enumerate_index",
	"mh_seq_max_with_range_and_key":              "default__seq_max_with_range_and_key__with__seq_enumerate_index",
	"mh_seq_sum":                                 "default__seq_sum__with__seq_operator_foreach",
	"mh_seq_sum_with_range":                      "default__seq_sum_with_range__with__seq_enumerate_index",
	"mh_seq_count":                               "default__seq_count__with__set_operator_contains",
	"mh_seq_count_with_key":                      "default__seq_count_with_key__with__seq_operator_foreach",
	"mh_seq_count_with_range":                    "default__seq_count_with_range__with__seq_enumerate_index",
	"mh_seq_count_with_range_and_key":            "default__seq_count_with_range_and_key__with__seq_enumerate_index",
	"mh_seq_contains":                            "default__seq_contains__with__map_operator_trygetitem",
	"mh_seq_contains_with_key":                   "default__seq_contains_with_key__with__seq_operator_foreach",
	"mh_seq_contains_with_range":                 "default__seq_contains_with_range__with__seq_enumerate_index",
	"mh_seq_contains_with_range_and_key":         "default__seq_contains_with_range_and_key__with__seq_enumerate_index",
	"mh_seq_operator_contains":                   "default__seq_operator_contains__with__seq_contains",
	"mh_seq_locate":                              "default__seq_locate__with__seq_operator_foreach",
	"mh_seq_locate_with_range":                   "default__seq_locate_with_range__with__seq_enumerate_index",
	"mh_seq_rlocate":                             "default__seq_rlocate__with__seq_foreach_reverse",
	"mh_seq_rlocate_with_range":                  "default__seq_rlocate_with_range__with__seq_enumerate_index_reverse",
	"mh_seq_startswith":                          "default__seq_startswith__with__seq_trygetfirst",
	"mh_seq_startswith_with_key":                 "default__seq_startswith_with_key__with__seq_trygetfirst",
	"mh_seq_startswith_with_range":               "default__seq_startswith_with_range__with__seq_operator_trygetitem_index",
	"mh_seq_startswith_with_range_and_key":       "default__seq_startswith_with_range_and_key__with__seq_operator_trygetitem_index",
	"mh_seq_endswith":                            "default__seq_endswith__with__seq_trygetlast",
	"mh_seq_endswith_with_key":                   "default__seq_endswith_with_key__with__seq_trygetlast",
	"mh_seq_endswith_with_range":                 "default__seq_endswith_with_range__with__seq_operator_size__and__operator_trygetitem_index",
	"mh_seq_endswith_with_range_and_key":         "default__seq_endswith_with_range_and_key__with__seq_operator_size__and__operator_trygetitem_index",
	"mh_seq_find":                                "default__seq_find__with__seq_enumerate_index",
	"mh_seq_find_with_key":                       "default__seq_find_with_key__with__seq_enumerate_index",
	"mh_seq_rfind":                               "default__seq_rfind__with__seq_enumerate_index_reverse",
	"mh_seq_rfind_with_key":                      "default__seq_rfind_with_key__with__seq_enumerate_index_reverse",
	"mh_seq_erase":                               "dict_mh_seq_erase",
	"mh_seq_insert":                              "dict_mh_seq_insert",
	"mh_seq_insertall":                           "default__seq_insertall__with__seq_insert",
	"mh_seq_pushfront":                           "dict_mh_seq_pushfront",
	"mh_seq_append":                              "dict_mh_seq_append",
	"mh_seq_extend":                              "default__seq_extend__with__seq_append",
	"mh_seq_xchitem_index":                       "dict_mh_seq_xchitem_index",
	"mh_seq_clear":                               "dict_mh_clear",
	"mh_seq_pop":                                 "dict_mh_seq_pop",
	"mh_seq_remove":                              "default__seq_remove__with__seq_removeall",
	"mh_seq_remove_with_key":                     "default__seq_remove_with_key__with__seq_removeall",
	"mh_seq_rremove":                             "default__seq_rremove__with__seq_enumerate_index_reverse__and__seq_operator_delitem_index",
	"mh_seq_rremove_with_key":                    "default__seq_rremove_with_key__with__seq_enumerate_index_reverse__and__seq_operator_delitem_index",
	"mh_seq_removeall":                           "default__seq_removeall__with__seq_removeif", // TODO: This can be more efficient in Mappings
	"mh_seq_removeall_with_key":                  "default__seq_removeall_with_key__with__seq_removeif", // TODO: This can be more efficient in Mappings
	"mh_seq_removeif":                            "dict_mh_seq_removeif",
	"mh_seq_resize":                              "default__seq_resize__unsupported",
	"mh_seq_fill":                                "default__seq_fill__with__seq_enumerate_index__and__seq_operator_setitem_index", // TODO: This can be more efficient by using seq_operator_size__and__seq_operator_setitem_index
	"mh_seq_reverse":                             "dict_mh_seq_reverse",
	"mh_seq_reversed":                            "default__seq_reversed__with__seq_operator_size__and__seq_operator_trygetitem_index",
	"mh_seq_sort":                                "default__seq_sort__with__seq_operator_size__and__seq_operator_getitem_index__and__seq_operator_setitem_index",
	"mh_seq_sort_with_key":                       "default__seq_sort_with_key__with__seq_operator_size__and__seq_operator_getitem_index__and__seq_operator_setitem_index",
	"mh_seq_sorted":                              "default__seq_sorted__with__seq_operator_size__and__seq_operator_trygetitem_index",
	"mh_seq_sorted_with_key":                     "default__seq_sorted_with_key__with__seq_operator_size__and__seq_operator_trygetitem_index",
	"mh_seq_bfind":                               "default__seq_bfind__with__seq_operator_size__and__seq_operator_trygetitem_index",
	"mh_seq_bfind_with_key":                      "default__seq_bfind_with_key__with__seq_operator_size__and__seq_operator_trygetitem_index",
	"mh_seq_bposition":                           "default__seq_bposition__with__seq_operator_size__and__seq_operator_trygetitem_index",
	"mh_seq_bposition_with_key":                  "default__seq_bposition_with_key__with__seq_operator_size__and__seq_operator_trygetitem_index",
	"mh_seq_brange":                              "default__seq_brange__with__seq_operator_size__and__seq_operator_trygetitem_index",
	"mh_seq_brange_with_key":                     "default__seq_brange_with_key__with__seq_operator_size__and__seq_operator_trygetitem_index",
	"mh_set_operator_iter":                       "dict_iter",
	"mh_set_operator_foreach":                    "default__set_operator_foreach__with__map_operator_foreach_pair",
	"mh_set_operator_sizeob":                     "dict_sizeob",
	"mh_set_operator_size":                       "dict_size",
	"mh_set_operator_hash":                       "default__set_operator_hash__with__map_operator_foreach_pair",
	"mh_set_operator_compare_eq":                 "default__set_operator_compare_eq__with__set_operator_foreach",
	"mh_set_operator_trycompare_eq":              "default__set_operator_trycompare_eq__with__set_operator_compare_eq",
	"mh_set_operator_eq":                         "default__set_operator_eq__with__set_operator_compare_eq",
	"mh_set_operator_ne":                         "default__set_operator_ne__with__set_operator_compare_eq",
	"mh_set_operator_lo":                         "default__set_operator_lo__with__set_operator_foreach",
	"mh_set_operator_le":                         "default__set_operator_le__with__set_operator_foreach",
	"mh_set_operator_gr":                         "default__set_operator_gr__with__set_operator_foreach",
	"mh_set_operator_ge":                         "default__set_operator_ge__with__set_operator_foreach",
	"mh_set_operator_inv":                        "default__set_operator_inv__unsupported",
	"mh_set_operator_add":                        "default__set_operator_add__unsupported",
	"mh_set_operator_sub":                        "default__set_operator_sub__unsupported",
	"mh_set_operator_and":                        "default__set_operator_and__unsupported",
	"mh_set_operator_xor":                        "default__set_operator_xor__unsupported",
	"mh_set_operator_inplace_add":                "default__set_operator_inplace_add__with__set_insertall",
	"mh_set_operator_inplace_sub":                "default__set_operator_inplace_sub__with__set_operator_foreach__and__set_removeall",
	"mh_set_operator_inplace_and":                "default__set_operator_inplace_and__with__set_operator_foreach__and__set_removeall",
	"mh_set_operator_inplace_xor":                "default__set_operator_inplace_xor__with__set_operator_foreach__and__set_insertall__and__set_removeall",
	"mh_set_frozen":                              "default__set_frozen__with__map_frozen",
	"mh_set_unify":                               "default__set_unify__with__seq_operator_foreach__and__seq_append", // TODO: This can be made more efficient for (Mappings as Set)
	"mh_set_insert":                              "default__set_insert__with__seq_contains__and__seq_append", // TODO: This can be made more efficient for (Mappings as Set)
	"mh_set_insertall":                           "default__set_insertall__with__set_insert",
	"mh_set_remove":                              "default__set_remove__with__seq_removeall",
	"mh_set_removeall":                           "default__set_removeall__with__set_remove",
	"mh_set_pop":                                 "default__set_pop__with__map_popitem",
	"mh_set_pop_with_default":                    "default__set_pop_with_default__with__map_popitem",
	"mh_map_operator_iter":                       "dict_iter",
	"mh_map_operator_foreach_pair":               "dict_foreach_pair",
	"mh_map_operator_sizeob":                     "dict_sizeob",
	"mh_map_operator_size":                       "dict_size",
	"mh_map_operator_getitem":                    "dict_getitem",
	"mh_map_operator_trygetitem":                 "dict_trygetitem",
	"mh_map_operator_getitem_index":              "dict_getitem_index",
	"mh_map_operator_trygetitem_index":           "dict_trygetitem_index",
	"mh_map_operator_getitem_string_hash":        "dict_getitem_string_hash",
	"mh_map_operator_trygetitem_string_hash":     "dict_trygetitem_string_hash",
	"mh_map_operator_getitem_string_len_hash":    "dict_getitem_string_len_hash",
	"mh_map_operator_trygetitem_string_len_hash": "dict_trygetitem_string_len_hash",
	"mh_map_operator_bounditem":                  "dict_bounditem",
	"mh_map_operator_bounditem_index":            "dict_bounditem_index",
	"mh_map_operator_bounditem_string_hash":      "dict_bounditem_string_hash",
	"mh_map_operator_bounditem_string_len_hash":  "dict_bounditem_string_len_hash",
	"mh_map_operator_hasitem":                    "dict_hasitem",
	"mh_map_operator_hasitem_index":              "dict_hasitem_index",
	"mh_map_operator_hasitem_string_hash":        "dict_hasitem_string_hash",
	"mh_map_operator_hasitem_string_len_hash":    "dict_hasitem_string_len_hash",
	"mh_map_operator_delitem":                    "dict_delitem",
	"mh_map_operator_delitem_index":              "dict_delitem_index",
	"mh_map_operator_delitem_string_hash":        "dict_delitem_string_hash",
	"mh_map_operator_delitem_string_len_hash":    "dict_delitem_string_len_hash",
	"mh_map_operator_setitem":                    "dict_setitem",
	"mh_map_operator_setitem_index":              "dict_setitem_index",
	"mh_map_operator_setitem_string_hash":        "dict_setitem_string_hash",
	"mh_map_operator_setitem_string_len_hash":    "dict_setitem_string_len_hash",
	"mh_map_operator_contains":                   "dict_contains",
	"mh_map_keys":                                "default__map_keys__with__map_iterkeys",
	"mh_map_iterkeys":                            "default__map_iterkeys__with__map_operator_iter",
	"mh_map_values":                              "default__map_values__with__map_itervalues",
	"mh_map_itervalues":                          "default__map_itervalues__with__map_operator_iter",
	"mh_map_enumerate":                           "dict_foreach_pair",
	"mh_map_enumerate_range":                     "default__map_enumerate_range__with__map_enumerate",
	"mh_map_makeenumeration":                     "DeeObject_NewRef",
	"mh_map_makeenumeration_with_range":          "default__map_makeenumeration_with_range__with__map_operator_iter",
	"mh_map_operator_compare_eq":                 "default__map_operator_compare_eq__with__map_operator_foreach_pair",
	"mh_map_operator_trycompare_eq":              "default__map_operator_trycompare_eq__with__map_operator_compare_eq",
	"mh_map_operator_eq":                         "default__map_operator_eq__with__map_operator_compare_eq",
	"mh_map_operator_ne":                         "default__map_operator_ne__with__map_operator_compare_eq",
	"mh_map_operator_lo":                         "default__map_operator_lo__with__map_operator_foreach_pair",
	"mh_map_operator_le":                         "default__map_operator_le__with__map_operator_foreach_pair",
	"mh_map_operator_gr":                         "default__map_operator_gr__with__map_operator_foreach_pair",
	"mh_map_operator_ge":                         "default__map_operator_ge__with__map_operator_foreach_pair",
	"mh_map_operator_add":                        "default__map_operator_add__unsupported",
	"mh_map_operator_sub":                        "default__map_operator_sub__unsupported",
	"mh_map_operator_and":                        "default__map_operator_and__unsupported",
	"mh_map_operator_xor":                        "default__map_operator_xor__unsupported",
	"mh_map_operator_inplace_add":                "default__map_operator_inplace_add__with__map_update",
	"mh_map_operator_inplace_sub":                "default__map_operator_inplace_sub__with__map_removekeys",
	"mh_map_operator_inplace_and":                "default__map_operator_inplace_and__with__map_operator_foreach_pair__and__map_removekeys",
	"mh_map_operator_inplace_xor":                "default__map_operator_inplace_xor__with__map_operator_foreach_pair__and__map_update__and__map_removekeys",
	"mh_map_frozen":                              "DeeRoDict_FromDict",
	"mh_map_setold":                              "dict_mh_setold",
	"mh_map_setold_ex":                           "dict_mh_setold_ex",
	"mh_map_setnew":                              "dict_mh_setnew",
	"mh_map_setnew_ex":                           "dict_mh_setnew_ex",
	"mh_map_setdefault":                          "dict_mh_setdefault",
	"mh_map_update":                              "default__map_update__with__map_operator_setitem",
	"mh_map_remove":                              "dict_mh_remove",
	"mh_map_removekeys":                          "default__map_removekeys__with__map_remove",
	"mh_map_pop":                                 "dict_mh_pop",
	"mh_map_pop_with_default":                    "dict_mh_pop_with_default",
	"mh_map_popitem":                             "dict_mh_popitem",
});


Type_assert(deemon.Tuple, {
	"tp_assign":                                  "default__seq_operator_assign__unsupported",
	"tp_move_assign":                             "default__move_assign__with__assign",
	"tp_str":                                     "tuple_str",
	"tp_print":                                   "tuple_print",
	"tp_repr":                                    "tuple_repr",
	"tp_printrepr":                               "tuple_printrepr",
	"tp_bool":                                    "tuple_bool",
	"tp_hash":                                    "tuple_hash",
	"tp_compare_eq":                              "tuple_compare_eq",
	"tp_compare":                                 "tuple_compare",
	"tp_trycompare_eq":                           "tuple_trycompare_eq",
	"tp_eq":                                      "default__eq__with__compare_eq",
	"tp_ne":                                      "default__ne__with__compare_eq",
	"tp_lo":                                      "default__lo__with__compare",
	"tp_le":                                      "default__le__with__compare",
	"tp_gr":                                      "default__gr__with__compare",
	"tp_ge":                                      "default__ge__with__compare",
	"tp_iter":                                    "tuple_iter",
	"tp_foreach":                                 "tuple_foreach",
	"tp_foreach_pair":                            "default__foreach_pair__with__foreach",
	"tp_sizeob":                                  "tuple_sizeob",
	"tp_size":                                    "tuple_size",
	"tp_size_fast":                               "tuple_size",
	"tp_contains":                                "tuple_contains",
	"tp_getitem_index_fast":                      "tuple_getitem_index_fast",
	"tp_getitem":                                 "tuple_getitem",
	"tp_getitem_index":                           "tuple_getitem_index",
	"tp_trygetitem":                              "default__trygetitem__with__trygetitem_index",
	"tp_trygetitem_index":                        "tuple_trygetitem_index",
	"tp_bounditem":                               "default__bounditem__with__size__and__getitem_index_fast",
	"tp_bounditem_index":                         "default__bounditem_index__with__size__and__getitem_index_fast",
	"tp_hasitem":                                 "default__hasitem__with__size__and__getitem_index_fast",
	"tp_hasitem_index":                           "default__hasitem_index__with__size__and__getitem_index_fast",
	"tp_delitem":                                 "default__seq_operator_delitem__unsupported",
	"tp_delitem_index":                           "default__seq_operator_delitem_index__unsupported",
	"tp_setitem":                                 "default__seq_operator_setitem__unsupported",
	"tp_setitem_index":                           "default__seq_operator_setitem_index__unsupported",
	"tp_getrange":                                "tuple_getrange",
	"tp_getrange_index":                          "tuple_getrange_index",
	"tp_getrange_index_n":                        "tuple_getrange_index_n",
	"tp_delrange":                                "default__seq_operator_delrange__unsupported",
	"tp_delrange_index":                          "default__seq_operator_delrange_index__unsupported",
	"tp_delrange_index_n":                        "default__seq_operator_delrange_index_n__unsupported",
	"tp_setrange":                                "default__seq_operator_setrange__unsupported",
	"tp_setrange_index":                          "default__seq_operator_setrange_index__unsupported",
	"tp_setrange_index_n":                        "default__seq_operator_setrange_index_n__unsupported",
	"tp_add":                                     "tuple_concat",
	"tp_inplace_add":                             "default__inplace_add__with__add",
	"tp_sub":                                     "default__set_operator_sub", /* Not "default__set_operator_sub__unsupported" -- see blurb in "DeeType_MapTMHInTNOForInherit" */
	"tp_inplace_sub":                             "default__set_operator_inplace_sub", /* Not "default__set_operator_inplace_sub__unsupported" -- see blurb in "DeeType_MapTMHInTNOForInherit" */
	"tp_mul":                                     "tuple_repeat",
	"tp_inplace_mul":                             "default__inplace_mul__with__mul",
	"mh_seq_operator_bool":                       "tuple_bool",
	"mh_seq_operator_sizeob":                     "tuple_sizeob",
	"mh_seq_operator_size":                       "tuple_size",
	"mh_seq_operator_iter":                       "tuple_iter",
	"mh_seq_operator_foreach":                    "tuple_foreach",
	"mh_seq_operator_foreach_pair":               "default__seq_operator_foreach_pair__with__seq_operator_foreach",
	"mh_seq_operator_getitem":                    "tuple_getitem",
	"mh_seq_operator_getitem_index":              "tuple_getitem_index",
	"mh_seq_operator_trygetitem":                 "default__seq_operator_trygetitem__with__seq_operator_trygetitem_index",
	"mh_seq_operator_trygetitem_index":           "tuple_trygetitem_index",
	"mh_seq_operator_hasitem":                    "default__seq_operator_hasitem__with__seq_operator_sizeob",
	"mh_seq_operator_hasitem_index":              "default__seq_operator_hasitem_index__with__seq_operator_size",
	"mh_seq_operator_bounditem":                  "default__seq_operator_bounditem__with__seq_operator_getitem", // TODO: This can be optimized!
	"mh_seq_operator_bounditem_index":            "default__seq_operator_bounditem_index__with__seq_operator_getitem_index", // TODO: This can be optimized!
	"mh_seq_operator_delitem":                    "default__seq_operator_delitem__unsupported",
	"mh_seq_operator_delitem_index":              "default__seq_operator_delitem_index__unsupported",
	"mh_seq_operator_setitem":                    "default__seq_operator_setitem__unsupported",
	"mh_seq_operator_setitem_index":              "default__seq_operator_setitem_index__unsupported",
	"mh_seq_operator_getrange":                   "tuple_getrange",
	"mh_seq_operator_getrange_index":             "tuple_getrange_index",
	"mh_seq_operator_getrange_index_n":           "tuple_getrange_index_n",
	"mh_seq_operator_delrange":                   "default__seq_operator_delrange__unsupported",
	"mh_seq_operator_delrange_index":             "default__seq_operator_delrange_index__unsupported",
	"mh_seq_operator_delrange_index_n":           "default__seq_operator_delrange_index_n__unsupported",
	"mh_seq_operator_setrange":                   "default__seq_operator_setrange__unsupported",
	"mh_seq_operator_setrange_index":             "default__seq_operator_setrange_index__unsupported",
	"mh_seq_operator_setrange_index_n":           "default__seq_operator_setrange_index_n__unsupported",
	"mh_seq_operator_assign":                     "default__seq_operator_assign__unsupported",
	"mh_seq_operator_hash":                       "tuple_hash",
	"mh_seq_operator_compare":                    "tuple_compare",
	"mh_seq_operator_compare_eq":                 "tuple_compare_eq",
	"mh_seq_operator_trycompare_eq":              "tuple_trycompare_eq",
	"mh_seq_operator_eq":                         "default__seq_operator_eq__with__seq_operator_compare_eq",
	"mh_seq_operator_ne":                         "default__seq_operator_ne__with__seq_operator_compare_eq",
	"mh_seq_operator_lo":                         "default__seq_operator_lo__with__seq_operator_compare",
	"mh_seq_operator_le":                         "default__seq_operator_le__with__seq_operator_compare",
	"mh_seq_operator_gr":                         "default__seq_operator_gr__with__seq_operator_compare",
	"mh_seq_operator_ge":                         "default__seq_operator_ge__with__seq_operator_compare",
	"mh_seq_operator_add":                        "tuple_concat",
	"mh_seq_operator_mul":                        "tuple_repeat",
	"mh_seq_operator_inplace_add":                "default__seq_operator_inplace_add__with__seq_operator_add",
	"mh_seq_operator_inplace_mul":                "default__seq_operator_inplace_mul__with__seq_operator_mul",
	"mh_seq_enumerate":                           "default__seq_enumerate__with__seq_operator_size__and__operator_getitem_index_fast",
	"mh_seq_enumerate_index":                     "default__seq_enumerate_index__with__seq_operator_size__and__operator_getitem_index_fast",
	"mh_seq_makeenumeration":                     "default__seq_makeenumeration__with__seq_operator_size__and__operator_getitem_index_fast",
	"mh_seq_makeenumeration_with_range":          "default__seq_makeenumeration_with_range__with__seq_makeenumeration_with_intrange",
	"mh_seq_makeenumeration_with_intrange":       "default__seq_makeenumeration_with_intrange__with__seq_operator_size__and__operator_getitem_index_fast",
	"mh_seq_foreach_reverse":                     "tuple_mh_foreach_reverse",
	"mh_seq_enumerate_index_reverse":             "tuple_mh_enumerate_index_reverse",
	"mh_seq_unpack":                              "default__seq_unpack__with__tp_asvector",
	"mh_seq_unpack_ex":                           "default__seq_unpack_ex__with__tp_asvector",
	"mh_seq_unpack_ub":                           "default__seq_unpack_ex__with__tp_asvector",
	"mh_seq_trygetfirst":                         "tuple_trygetfirst",
	"mh_seq_getfirst":                            "tuple_getfirst",
	"mh_seq_boundfirst":                          "tuple_nonempty_as_bound",
	"mh_seq_delfirst":                            "default__seq_delfirst__unsupported",
	"mh_seq_setfirst":                            "default__seq_setfirst__unsupported",
	"mh_seq_trygetlast":                          "tuple_trygetlast",
	"mh_seq_getlast":                             "tuple_getlast",
	"mh_seq_boundlast":                           "tuple_nonempty_as_bound",
	"mh_seq_dellast":                             "default__seq_dellast__unsupported",
	"mh_seq_setlast":                             "default__seq_setlast__unsupported",
	"mh_seq_cached":                              "DeeObject_NewRef",
	"mh_seq_frozen":                              "DeeObject_NewRef",
	"mh_seq_any":                                 "default__seq_any__with__seq_operator_foreach",
	"mh_seq_any_with_key":                        "default__seq_any_with_key__with__seq_operator_foreach",
	"mh_seq_any_with_range":                      "default__seq_any_with_range__with__seq_enumerate_index",
	"mh_seq_any_with_range_and_key":              "default__seq_any_with_range_and_key__with__seq_enumerate_index",
	"mh_seq_all":                                 "default__seq_all__with__seq_operator_foreach",
	"mh_seq_all_with_key":                        "default__seq_all_with_key__with__seq_operator_foreach",
	"mh_seq_all_with_range":                      "default__seq_all_with_range__with__seq_enumerate_index",
	"mh_seq_all_with_range_and_key":              "default__seq_all_with_range_and_key__with__seq_enumerate_index",
	"mh_seq_parity":                              "default__seq_parity__with__seq_operator_foreach",
	"mh_seq_parity_with_key":                     "default__seq_parity_with_key__with__seq_operator_foreach",
	"mh_seq_parity_with_range":                   "default__seq_parity_with_range__with__seq_enumerate_index",
	"mh_seq_parity_with_range_and_key":           "default__seq_parity_with_range_and_key__with__seq_enumerate_index",
	"mh_seq_reduce":                              "default__seq_reduce__with__seq_operator_foreach",
	"mh_seq_reduce_with_init":                    "default__seq_reduce_with_init__with__seq_operator_foreach",
	"mh_seq_reduce_with_range":                   "default__seq_reduce_with_range__with__seq_enumerate_index",
	"mh_seq_reduce_with_range_and_init":          "default__seq_reduce_with_range_and_init__with__seq_enumerate_index",
	"mh_seq_min":                                 "default__seq_min__with__seq_operator_foreach",
	"mh_seq_min_with_key":                        "default__seq_min_with_key__with__seq_operator_foreach",
	"mh_seq_min_with_range":                      "default__seq_min_with_range__with__seq_enumerate_index",
	"mh_seq_min_with_range_and_key":              "default__seq_min_with_range_and_key__with__seq_enumerate_index",
	"mh_seq_max":                                 "default__seq_max__with__seq_operator_foreach",
	"mh_seq_max_with_key":                        "default__seq_max_with_key__with__seq_operator_foreach",
	"mh_seq_max_with_range":                      "default__seq_max_with_range__with__seq_enumerate_index",
	"mh_seq_max_with_range_and_key":              "default__seq_max_with_range_and_key__with__seq_enumerate_index",
	"mh_seq_sum":                                 "default__seq_sum__with__seq_operator_foreach",
	"mh_seq_sum_with_range":                      "default__seq_sum_with_range__with__seq_enumerate_index",
	"mh_seq_count":                               "default__seq_count__with__seq_find",
	"mh_seq_count_with_key":                      "default__seq_count_with_key__with__seq_find_with_key",
	"mh_seq_count_with_range":                    "default__seq_count_with_range__with__seq_find",
	"mh_seq_count_with_range_and_key":            "default__seq_count_with_range_and_key__with__seq_find_with_key",
	"mh_seq_contains":                            "default__seq_contains__with__seq_operator_contains",
	"mh_seq_contains_with_key":                   "default__seq_contains_with_key__with__seq_find_with_key",
	"mh_seq_contains_with_range":                 "default__seq_contains_with_range__with__seq_find",
	"mh_seq_contains_with_range_and_key":         "default__seq_contains_with_range_and_key__with__seq_find_with_key",
	"mh_seq_operator_contains":                   "tuple_contains",
	"mh_seq_locate":                              "default__seq_locate__with__seq_operator_foreach",
	"mh_seq_locate_with_range":                   "default__seq_locate_with_range__with__seq_enumerate_index",
	"mh_seq_rlocate":                             "default__seq_rlocate__with__seq_foreach_reverse",
	"mh_seq_rlocate_with_range":                  "default__seq_rlocate_with_range__with__seq_enumerate_index_reverse",
	"mh_seq_startswith":                          "default__seq_startswith__with__seq_trygetfirst",
	"mh_seq_startswith_with_key":                 "default__seq_startswith_with_key__with__seq_trygetfirst",
	"mh_seq_startswith_with_range":               "default__seq_startswith_with_range__with__seq_operator_trygetitem_index",
	"mh_seq_startswith_with_range_and_key":       "default__seq_startswith_with_range_and_key__with__seq_operator_trygetitem_index",
	"mh_seq_endswith":                            "default__seq_endswith__with__seq_trygetlast",
	"mh_seq_endswith_with_key":                   "default__seq_endswith_with_key__with__seq_trygetlast",
	"mh_seq_endswith_with_range":                 "default__seq_endswith_with_range__with__seq_operator_size__and__operator_trygetitem_index",
	"mh_seq_endswith_with_range_and_key":         "default__seq_endswith_with_range_and_key__with__seq_operator_size__and__operator_trygetitem_index",
	"mh_seq_find":                                "tuple_mh_find",
	"mh_seq_find_with_key":                       "tuple_mh_find_with_key",
	"mh_seq_rfind":                               "tuple_mh_rfind",
	"mh_seq_rfind_with_key":                      "tuple_mh_rfind_with_key",
	"mh_seq_erase":                               "default__seq_erase__unsupported",
	"mh_seq_insert":                              "default__seq_insert__unsupported",
	"mh_seq_insertall":                           "default__seq_insertall__unsupported",
	"mh_seq_pushfront":                           "default__seq_pushfront__unsupported",
	"mh_seq_append":                              "default__seq_append__unsupported",
	"mh_seq_extend":                              "default__seq_extend__unsupported",
	"mh_seq_xchitem_index":                       "default__seq_xchitem_index__unsupported",
	"mh_seq_clear":                               "default__seq_clear__unsupported",
	"mh_seq_pop":                                 "default__seq_pop__unsupported",
	"mh_seq_remove":                              "default__seq_remove__unsupported",
	"mh_seq_remove_with_key":                     "default__seq_remove_with_key__unsupported",
	"mh_seq_rremove":                             "default__seq_rremove__unsupported",
	"mh_seq_rremove_with_key":                    "default__seq_rremove_with_key__unsupported",
	"mh_seq_removeall":                           "default__seq_removeall__unsupported",
	"mh_seq_removeall_with_key":                  "default__seq_removeall_with_key__unsupported",
	"mh_seq_removeif":                            "default__seq_removeif__unsupported",
	"mh_seq_resize":                              "default__seq_resize__unsupported",
	"mh_seq_fill":                                "default__seq_fill__unsupported",
	"mh_seq_reverse":                             "default__seq_reverse__unsupported",
	"mh_seq_reversed":                            "default__seq_reversed__with__seq_operator_size__and__operator_getitem_index_fast",
	"mh_seq_sort":                                "default__seq_sort__unsupported",
	"mh_seq_sort_with_key":                       "default__seq_sort_with_key__unsupported",
	"mh_seq_sorted":                              "tuple_mh_sorted",
	"mh_seq_sorted_with_key":                     "tuple_mh_sorted_with_key",
	"mh_seq_bfind":                               "default__seq_bfind__with__seq_operator_size__and__seq_operator_trygetitem_index",
	"mh_seq_bfind_with_key":                      "default__seq_bfind_with_key__with__seq_operator_size__and__seq_operator_trygetitem_index",
	"mh_seq_bposition":                           "default__seq_bposition__with__seq_operator_size__and__seq_operator_trygetitem_index",
	"mh_seq_bposition_with_key":                  "default__seq_bposition_with_key__with__seq_operator_size__and__seq_operator_trygetitem_index",
	"mh_seq_brange":                              "default__seq_brange__with__seq_operator_size__and__seq_operator_trygetitem_index",
	"mh_seq_brange_with_key":                     "default__seq_brange_with_key__with__seq_operator_size__and__seq_operator_trygetitem_index",
	"mh_set_operator_iter":                       "default__set_operator_iter__with__seq_operator_iter",
	"mh_set_operator_foreach":                    "default__set_operator_foreach__with__seq_operator_foreach",
	"mh_set_operator_sizeob":                     "default__set_operator_sizeob__with__set_operator_size",
	"mh_set_operator_size":                       "default__set_operator_size__with__set_operator_foreach",
	"mh_set_operator_hash":                       "default__set_operator_hash__with__set_operator_foreach",
	"mh_set_operator_compare_eq":                 "default__set_operator_compare_eq__with__set_operator_foreach",
	"mh_set_operator_trycompare_eq":              "default__set_operator_trycompare_eq__with__set_operator_compare_eq",
	"mh_set_operator_eq":                         "default__set_operator_eq__with__set_operator_compare_eq",
	"mh_set_operator_ne":                         "default__set_operator_ne__with__set_operator_compare_eq",
	"mh_set_operator_lo":                         "default__set_operator_lo__with__set_operator_foreach",
	"mh_set_operator_le":                         "default__set_operator_le__with__set_operator_foreach",
	"mh_set_operator_gr":                         "default__set_operator_gr__with__set_operator_foreach",
	"mh_set_operator_ge":                         "default__set_operator_ge__with__set_operator_foreach",
	"mh_set_operator_inv":                        "default__set_operator_inv__unsupported",
	"mh_set_operator_add":                        "default__set_operator_add__unsupported",
	"mh_set_operator_sub":                        "default__set_operator_sub__unsupported",
	"mh_set_operator_and":                        "default__set_operator_and__unsupported",
	"mh_set_operator_xor":                        "default__set_operator_xor__unsupported",
	"mh_set_operator_inplace_add":                "default__set_operator_inplace_add__unsupported",
	"mh_set_operator_inplace_sub":                "default__set_operator_inplace_sub__unsupported",
	"mh_set_operator_inplace_and":                "default__set_operator_inplace_and__unsupported",
	"mh_set_operator_inplace_xor":                "default__set_operator_inplace_xor__unsupported",
	"mh_set_frozen":                              "DeeRoSet_FromSequence",
	"mh_set_unify":                               "default__set_unify__unsupported",
	"mh_set_insert":                              "default__set_insert__unsupported",
	"mh_set_insertall":                           "default__set_insertall__unsupported",
	"mh_set_remove":                              "default__set_remove__unsupported",
	"mh_set_removeall":                           "default__set_removeall__unsupported",
	"mh_set_pop":                                 "default__set_pop__unsupported",
	"mh_set_pop_with_default":                    "default__set_pop_with_default__unsupported",
	"mh_map_operator_iter":                       "default__map_operator_iter__with__seq_operator_iter",
	"mh_map_operator_foreach_pair":               "default__map_operator_foreach_pair__with__seq_operator_foreach_pair",
	"mh_map_operator_sizeob":                     "default__map_operator_sizeob__with__map_operator_size",
	"mh_map_operator_size":                       "default__map_operator_size__with__map_operator_foreach_pair",
	"mh_map_operator_getitem":                    "default__map_operator_getitem__with__map_enumerate",
	"mh_map_operator_trygetitem":                 "default__map_operator_trygetitem__with__map_enumerate",
	"mh_map_operator_getitem_index":              "default__map_operator_getitem_index__with__map_operator_getitem",
	"mh_map_operator_trygetitem_index":           "default__map_operator_trygetitem_index__with__map_operator_trygetitem",
	"mh_map_operator_getitem_string_hash":        "default__map_operator_getitem_string_hash__with__map_enumerate",
	"mh_map_operator_trygetitem_string_hash":     "default__map_operator_trygetitem_string_hash__with__map_enumerate",
	"mh_map_operator_getitem_string_len_hash":    "default__map_operator_getitem_string_len_hash__with__map_enumerate",
	"mh_map_operator_trygetitem_string_len_hash": "default__map_operator_trygetitem_string_len_hash__with__map_enumerate",
	"mh_map_operator_bounditem":                  "default__map_operator_bounditem__with__map_enumerate",
	"mh_map_operator_bounditem_index":            "default__map_operator_bounditem_index__with__map_operator_bounditem",
	"mh_map_operator_bounditem_string_hash":      "default__map_operator_bounditem_string_hash__with__map_operator_bounditem",
	"mh_map_operator_bounditem_string_len_hash":  "default__map_operator_bounditem_string_len_hash__with__map_operator_bounditem",
	"mh_map_operator_hasitem":                    "default__map_operator_hasitem__with__map_operator_bounditem",
	"mh_map_operator_hasitem_index":              "default__map_operator_hasitem_index__with__map_operator_bounditem_index",
	"mh_map_operator_hasitem_string_hash":        "default__map_operator_hasitem_string_hash__with__map_operator_bounditem_string_hash",
	"mh_map_operator_hasitem_string_len_hash":    "default__map_operator_hasitem_string_len_hash__with__map_operator_bounditem_string_len_hash",
	"mh_map_operator_delitem":                    "default__map_operator_delitem__unsupported",
	"mh_map_operator_delitem_index":              "default__map_operator_delitem_index__unsupported",
	"mh_map_operator_delitem_string_hash":        "default__map_operator_delitem_string_hash__unsupported",
	"mh_map_operator_delitem_string_len_hash":    "default__map_operator_delitem_string_len_hash__unsupported",
	"mh_map_operator_setitem":                    "default__map_operator_setitem__unsupported",
	"mh_map_operator_setitem_index":              "default__map_operator_setitem_index__unsupported",
	"mh_map_operator_setitem_string_hash":        "default__map_operator_setitem_string_hash__unsupported",
	"mh_map_operator_setitem_string_len_hash":    "default__map_operator_setitem_string_len_hash__unsupported",
	"mh_map_operator_contains":                   "default__map_operator_contains__with__map_operator_bounditem",
	"mh_map_keys":                                "default__map_keys__with__map_iterkeys",
	"mh_map_iterkeys":                            "default__map_iterkeys__with__map_operator_iter",
	"mh_map_values":                              "default__map_values__with__map_itervalues",
	"mh_map_itervalues":                          "default__map_itervalues__with__map_operator_iter",
	"mh_map_enumerate":                           "default__map_operator_foreach_pair__with__seq_operator_foreach_pair",
	"mh_map_enumerate_range":                     "default__map_enumerate_range__with__map_enumerate",
	"mh_map_makeenumeration":                     "default__map_makeenumeration__with__map_operator_iter",
	"mh_map_makeenumeration_with_range":          "default__map_makeenumeration_with_range__with__map_operator_iter",
	"mh_map_operator_compare_eq":                 "default__map_operator_compare_eq__with__map_operator_foreach_pair",
	"mh_map_operator_trycompare_eq":              "default__map_operator_trycompare_eq__with__map_operator_compare_eq",
	"mh_map_operator_eq":                         "default__map_operator_eq__with__map_operator_compare_eq",
	"mh_map_operator_ne":                         "default__map_operator_ne__with__map_operator_compare_eq",
	"mh_map_operator_lo":                         "default__map_operator_lo__with__map_operator_foreach_pair",
	"mh_map_operator_le":                         "default__map_operator_le__with__map_operator_foreach_pair",
	"mh_map_operator_gr":                         "default__map_operator_gr__with__map_operator_foreach_pair",
	"mh_map_operator_ge":                         "default__map_operator_ge__with__map_operator_foreach_pair",
	"mh_map_operator_add":                        "default__map_operator_add__unsupported",
	"mh_map_operator_sub":                        "default__map_operator_sub__unsupported",
	"mh_map_operator_and":                        "default__map_operator_and__unsupported",
	"mh_map_operator_xor":                        "default__map_operator_xor__unsupported",
	"mh_map_operator_inplace_add":                "default__map_operator_inplace_add__unsupported",
	"mh_map_operator_inplace_sub":                "default__map_operator_inplace_sub__unsupported",
	"mh_map_operator_inplace_and":                "default__map_operator_inplace_and__unsupported",
	"mh_map_operator_inplace_xor":                "default__map_operator_inplace_xor__unsupported",
	"mh_map_frozen":                              "DeeRoDict_FromSequence",
	"mh_map_setold":                              "default__map_setold__unsupported",
	"mh_map_setold_ex":                           "default__map_setold_ex__unsupported",
	"mh_map_setnew":                              "default__map_setnew__unsupported",
	"mh_map_setnew_ex":                           "default__map_setnew_ex__unsupported",
	"mh_map_setdefault":                          "default__map_setdefault__unsupported",
	"mh_map_update":                              "default__map_update__unsupported",
	"mh_map_remove":                              "default__map_remove__unsupported",
	"mh_map_removekeys":                          "default__map_removekeys__unsupported",
	"mh_map_pop":                                 "default__map_pop__unsupported",
	"mh_map_pop_with_default":                    "default__map_pop_with_default__unsupported",
	"mh_map_popitem":                             "default__map_popitem__unsupported",
});

Type_assert(deemon.HashSet.Frozen, {
	// TODO
});

Type_assert(deemon.Dict.Frozen, {
	// TODO
});

Type_assert(rt.ClassAttributeTable, {
	"tp_getitem":                    "default__getitem__with__getitem_string_len_hash",
	"tp_getitem_index":              "default__getitem_index__with__getitem",
	"tp_getitem_string_hash":        "default__getitem_string_hash__with__getitem_string_len_hash",
	"tp_getitem_string_len_hash":    "default__getitem_string_len_hash__with__trygetitem_string_len_hash",
	"tp_trygetitem":                 "default__trygetitem__with__trygetitem_string_len_hash",
	"tp_trygetitem_index":           "default__trygetitem_index__with__trygetitem",
	"tp_trygetitem_string_hash":     "default__trygetitem_string_hash__with__trygetitem_string_len_hash",
	"tp_trygetitem_string_len_hash": "cat_trygetitem_string_len_hash",
	"tp_bounditem":                  "default__bounditem__with__bounditem_string_len_hash",
	"tp_bounditem_index":            "default__bounditem_index__with__bounditem",
	"tp_bounditem_string_hash":      "default__bounditem_string_hash__with__bounditem_string_len_hash",
	"tp_bounditem_string_len_hash":  "default__bounditem_string_len_hash__with__trygetitem_string_len_hash",
	"tp_hasitem":                    "default__hasitem__with__bounditem",
	"tp_hasitem_index":              "default__hasitem_index__with__bounditem_index",
	"tp_hasitem_string_hash":        "default__hasitem_string_hash__with__bounditem_string_hash",
	"tp_hasitem_string_len_hash":    "default__hasitem_string_len_hash__with__bounditem_string_len_hash",
});

Type_assert(rt.ClassOperatorTable, {
	"tp_getitem":                    "default__getitem__with__trygetitem",
	"tp_getitem_index":              "default__getitem_index__with__trygetitem_index",
	"tp_getitem_string_hash":        "default__getitem_string_hash__with__trygetitem_string_hash",
	"tp_getitem_string_len_hash":    "default__getitem_string_len_hash__with__trygetitem_string_len_hash",
	"tp_trygetitem":                 "default__trygetitem__with__trygetitem_index__and__trygetitem_string_len_hash",
	"tp_trygetitem_index":           "cot_trygetitem_index",
	"tp_trygetitem_string_hash":     "cot_trygetitem_string_hash",
	"tp_trygetitem_string_len_hash": "cot_trygetitem_string_len_hash",
	"tp_bounditem":                  "default__bounditem__with__trygetitem",
	"tp_bounditem_index":            "default__bounditem_index__with__trygetitem_index",
	"tp_bounditem_string_hash":      "default__bounditem_string_hash__with__trygetitem_string_hash",
	"tp_bounditem_string_len_hash":  "default__bounditem_string_len_hash__with__trygetitem_string_len_hash",
	"tp_hasitem":                    "default__hasitem__with__bounditem",
	"tp_hasitem_index":              "default__hasitem_index__with__bounditem_index",
	"tp_hasitem_string_hash":        "default__hasitem_string_hash__with__bounditem_string_hash",
	"tp_hasitem_string_len_hash":    "default__hasitem_string_len_hash__with__bounditem_string_len_hash",
});

Type_assert(deemon.Sequence, {
	"tp_add":         "default__seq_operator_add",
	"tp_mul":         "default__seq_operator_mul",
	"tp_inplace_add": "default__seq_operator_inplace_add",
	"tp_inplace_mul": "default__seq_operator_inplace_mul",
});

Type_assert(rt.FunctionSymbolsByName, {
	"tp_add":                  "default__map_operator_add__unsupported",
	"tp_mul":                  "NULL",
	"tp_inplace_add":          "default__map_operator_inplace_add__with__map_update",
	"tp_inplace_mul":          "NULL",
	"mh_map_update":           "default__map_update__with__map_operator_setitem",
	"mh_map_operator_setitem": "funcsymbolsbyname_setitem",
});

/* Inverse sets must not offer any way of enumeration */
Type_assert(rt.SetInversion, {
	"tp_iter":                        "default__set_operator_iter__unsupported",
	"tp_foreach":                     "default__set_operator_foreach__with__set_operator_iter",
	"tp_foreach_pair":                "NULL",
	"tp_size":                        "default__set_operator_size__unsupported",
	"tp_sizeob":                      "default__set_operator_sizeob__unsupported",
	"mh_seq_operator_iter":           "default__seq_operator_iter__unsupported",
	"mh_seq_operator_foreach":        "default__seq_operator_foreach__with__seq_operator_iter",
	"mh_seq_operator_foreach_pair":   "default__seq_operator_foreach_pair__with__seq_operator_foreach",
	"mh_seq_enumerate":               "default__seq_enumerate__unsupported",
	"mh_seq_enumerate_index":         "default__seq_enumerate_index__unsupported",
	"mh_seq_enumerate_index_reverse": "NULL",
	"mh_seq_foreach_reverse":         "NULL",
	"mh_seq_operator_getitem":        "default__seq_operator_getitem__unsupported",
	"mh_seq_operator_getitem_index":  "default__seq_operator_getitem_index__unsupported",
	"mh_seq_operator_size":           "default__seq_operator_size__unsupported",
	"mh_seq_operator_sizeob":         "default__seq_operator_sizeob__unsupported",
	"mh_set_operator_iter":           "default__set_operator_iter__unsupported",
	"mh_set_operator_foreach":        "default__set_operator_foreach__with__set_operator_iter",
	"mh_set_operator_size":           "default__set_operator_size__unsupported",
	"mh_set_operator_sizeob":         "default__set_operator_sizeob__unsupported",
	"mh_map_operator_foreach_pair":   "default__map_operator_foreach_pair__with__map_operator_iter",
	"mh_map_enumerate":               "default__map_enumerate__unsupported",
	"mh_map_enumerate_range":         "default__map_enumerate_range__unsupported",
	"mh_map_operator_size":           "default__map_operator_size__unsupported",
	"mh_map_operator_sizeob":         "default__map_operator_sizeob__unsupported",
});

#endif  /* !__MAIN__ */

#ifdef __MAIN__
function getAllImpls(typ: Type): {(string, string)...} {
	for (local tnoName: TNO_BYNAME.keys) {
		local symName = _Type_getNativeOperatorName(typ, tnoName);
		if (symName !is none)
			yield ("tp_" + tnoName, symName);
	}
	for (local tmhName: TMH_BYNAME.keys) {
		local symName = _Type_getMethodHintName(typ, tmhName);
		if (symName !is none)
			yield ("mh_" + tmhName, symName);
	}
}

function dumpType(typ: Type) {
	local allImpls = Dict(getAllImpls(typ));
	print(f"Type_assert({repr typ}, \{");
	local longestNameLen = allImpls.keys.each.length > ...;
	for (local a, b: allImpls) {
		print("	", f"{repr a}:".ljust(longestNameLen + 3), " ", repr b, ",");
	}
	print(f"\});");
}

dumpType(rt.SetInversion);

#endif /* __MAIN__ */

