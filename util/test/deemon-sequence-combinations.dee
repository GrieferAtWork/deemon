#!/usr/bin/deemon
/* Copyright (c) 2018-2025 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2025 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

import * from deemon;

function n(x: {{string...}...}): (int, string) {
	return (#x, " ".join(x.each.sum()));
}

assert {{}} == "ABCD".combinations(0);
assert {{}} == "ABCD".repeatcombinations(0);
assert {{}} == "ABCD".permutations(0);

assert (0, "") == n("ABCD".combinations(1));
assert (4, "A B C D") == n("ABCD".repeatcombinations(1));
assert (4, "A B C D") == n("ABCD".permutations(1));

assert (6, "AB AC AD BC BD CD") == n("ABCD".combinations(2));
assert (10, "AA AB AC AD BB BC BD CC CD DD")
	== n("ABCD".repeatcombinations(2));
assert (12, "AB AC AD BA BC BD CA CB CD DA DB DC")
	== n("ABCD".permutations(2));

assert (4, "ABC ABD ACD BCD") == n("ABCD".combinations(3));
assert (20, "AAA AAB AAC AAD ABB ABC ABD ACC ACD ADD BBB BBC BBD BCC BCD BDD CCC CCD CDD DDD")
	== n("ABCD".repeatcombinations(3));
assert (29, "ABC ABD ACA ACB ACD ADA ADB ADC BAA BAC BAD BCA BCD BDA BDC CAA CAB CAD CBA CBD CDA CDB DAA DAB DAC DBA DBC DCA DCB")
	== n("ABCD".permutations(3));

assert (1, "ABCD") == n("ABCD".combinations(4));
assert (35, "AAAA AAAB AAAC AAAD AABB AABC AABD AACC AACD AADD ABBB ABBC ABBD ABCC ABCD ABDD ACCC ACCD ACDD ADDD BBBB BBBC BBBD BBCC BBCD BBDD BCCC BCCD BCDD BDDD CCCC CCCD CCDD CDDD DDDD")
	== n("ABCD".repeatcombinations(4));
assert (56, "ABCD ABDA ABDC ACAA ACAB ACAD ACBA ACBD ACDA ACDB ADAA ADAB ADAC ADBA ADBC ADCA ADCB BAAA BAAC BAAD BACA BACD BADA BADC BCAA BCAD BCDA BDAA BDAC BDCA CAAA CAAB CAAD CABA CABD CADA CADB CBAA CBAD CBDA CDAA CDAB CDBA DAAA DAAB DAAC DABA DABC DACA DACB DBAA DBAC DBCA DCAA DCAB DCBA")
	== n("ABCD".permutations(4));
assert n("ABCD".permutations(4)) == n("ABCD".permutations());

