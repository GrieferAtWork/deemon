#!/usr/bin/deemon
/* Copyright (c) 2018 Griefer@Work                                            *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement in the product documentation would be  *
 *    appreciated but is not required.                                        *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */


local state = "";
try {
	state += "A";
	try {
		try {
			throw 42;
		} finally {
			/* Make sure that this finally isn't affected by the
			 * catch-block below, and is still executed before the
			 * handler is entered */
			state += "B";
		}
		state += "UNREACHABLE_1";
	} catch (...) {
		state += "C";
		throw;
	}
	state += "UNREACHABLE_2";
} catch (...) {
	state += "D";
	try {
		try {
			state += "E";
		} catch (...) {
			state += "UNREACHABLE_3";
		}
	} finally {
		state += "F";
		/* Even though the `42' thrown above is still part of the active
		 * stack of exception, leaving this finally block must not cause
		 * it to start being propagated again.
		 * Prior to (now) being fixed, leaving a finally block when there
		 * was an active exception caused that exception to be propagated
		 * regardless of whether or not the finally was located
		 * The problem was related to the generated assembly:
		 * >> end finally   // Propagate return values, or active exceptions
		 * Generataing this instruction is partially correct, but it does have
		 * a more advanced variant that needs to be generated in cases where
		 * finally appears within catch-handlers.
		 * >> end finally   #1
		 * The operand equals the number of recursive catch-blocks that the
		 * finally-statement is nested inside of, causing the runtime to only
		 * propagated an exception when at least that number of exceptions
		 * have been thrown since the start of the current call-frame.
		 *
		 * In the end, this comment is now (correctly) followed by an
		 * >> end finally   #1
		 * instruction, performing any necessary cleanup without causing
		 * the exception thrown above to be propagated.
		 */
	}
	state += "G";
}
assert state == "ABCDEFG";




