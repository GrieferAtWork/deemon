/* Copyright (c) 2018-2023 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2023 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */


import * from deemon;
import * from errors;

class MyClass {
	member foo;
	this = del; /* Delete the regular constructor. */
}

local x = try MyClass(foo: 42) catch (e...) e;
assert x is NotImplemented, "The default construct should have been deleted";

local x = MyClass.newinstance(foo: 42);
assert x is MyClass;
assert x.foo == 42, "Type.newinstance should still be able to construct instances!";



class MyList: List {
	this = del; /* Delete the regular constructor. */
	member mylist_member;
	appendmember() {
		this.append(mylist_member);
	}
}

/* Extended version of Type.newinstance: Can be used to specify
 * field initializers, as well as  */
local x = MyList.newinstance({
	MyList: ({ "mylist_member" : "abc" }, none),
	List:   ({ }, pack([10, 20, 30])),
});

assert x is MyList;
assert repr(x).replace(" ", "") == "[10,20,30]";
assert x.mylist_member == "abc";
x.appendmember();
assert repr(x).replace(" ", "") == "[10,20,30,\"abc\"]";


