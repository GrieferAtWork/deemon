#!/usr/bin/deemon
/* Copyright (c) 2018-2022 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2022 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

import fs;
import * from deemon;
import * from posix;

function testdir(fd: int) {
	local d = fdopendir(fd, skipdots: false);
	local did_find_dot = false;
	local did_find_dotdot = false;
	local did_find_posix_DIR = false;
	for (local e: d) {
		if (e.d_name.endswith(".dee")) {
			assert e.d_type == DT_REG;
			if (e.d_name == "posix-DIR.dee")
				did_find_posix_DIR = true;
		} else if (e.d_name == ".") {
			did_find_dot = true;
		} else if (e.d_name == "..") {
			did_find_dotdot = true;
		}
	}
	assert did_find_dot;
	assert did_find_dotdot;
	assert did_find_posix_DIR;
}
local fd = open(fs.headof(__FILE__), O_RDONLY);
testdir(fd);
assert (try ({ close(fd); false; }) catch (...) none) is none,
	"The file should have been closed after being inherited by `fdopendir'";




