#!/usr/bin/deemon
/* Copyright (c) 2018-2023 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2023 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */
import * from errors;

/* Global functions can be re-assigned if declared as `varying' */
varying function foo() -> "v1";
varying function foo() -> "v2";
assert foo() == "v2";

/* Without `varying', trying to re-assign a function symbol must throw a RuntimeError */
local error = none;
try {
	function bar() -> "v1";
	function bar() -> "v2";
} catch (e...) {
	error = e;
}
assert error is RuntimeError;


/* But with varying (even in local scopes), no error must be thrown */
local error = none;
local result = none;
try {
	varying function bar() -> "v1";
	varying function bar() -> "v2";
	result = bar();
} catch (e...) {
	error = e;
}
assert error is none;
assert result == "v2";


/* ... or you could just use lambdas... */
local error = none;
local result = none;
try {
	local bar = () -> "v1";
	local bar = () -> "v2";
	result = bar();
} catch (e...) {
	error = e;
}
assert error is none;
assert result == "v2";





