#!/usr/bin/deemon
/* Copyright (c) 2018-2024 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2024 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

import * from deemon;
import * from errors;

function identical(a, b) {
	assert type(a) === type(b), f"{repr a} == {repr b}";
	assert a == b;
	assert a <= b;
	assert a >= b;
	assert !(a != b);
	assert !(a < b);
	assert !(a > b);
}

function nonIdentical(a, b) {
	assert type(a) !== type(b) || (a != b), f"{repr a} != {repr b}";
}

function assertFindAnyImpl2(expected: none | int | (int, int), s: string, method: string, needles: {string...}) {
	local b = s.bytes();
	local indexMethod = {
		"findany": "indexany",
		"rfindany": "rindexany",
		"casefindany": "caseindexany",
		"caserfindany": "caserindexany",
	}[method];
	identical(expected, s.operator . (method)(needles));
	identical(expected, b.operator . (method)(needles));
	identical(expected, b.operator . (method)(needles.each.bytes()));
	identical(expected, try s.operator . (indexMethod)(needles) catch (IndexError) none);
	identical(expected, try b.operator . (indexMethod)(needles) catch (IndexError) none);
	identical(expected, try b.operator . (indexMethod)(needles.each.bytes()) catch (IndexError) none);
	if ((expected is int && expected >= 1) ||
	    (expected is Sequence && #expected == 2 && expected[0] >= 1)) {
		identical(expected, s.operator . (method)(needles, 1));
		identical(expected, b.operator . (method)(needles, 1));
		identical(expected, b.operator . (method)(needles.each.bytes(), 1));
		identical(expected, try s.operator . (indexMethod)(needles, 1) catch (IndexError) none);
		identical(expected, try b.operator . (indexMethod)(needles, 1) catch (IndexError) none);
		identical(expected, try b.operator . (indexMethod)(needles.each.bytes(), 1) catch (IndexError) none);
	} else if ((expected is int && expected < 1) ||
	           (expected is Sequence && #expected == 2 && expected[0] < 1)) {
		nonIdentical(expected, s.operator . (method)(needles, 1));
		nonIdentical(expected, b.operator . (method)(needles, 1));
		nonIdentical(expected, b.operator . (method)(needles.each.bytes(), 1));
		nonIdentical(expected, try s.operator . (indexMethod)(needles, 1) catch (IndexError) none);
		nonIdentical(expected, try b.operator . (indexMethod)(needles, 1) catch (IndexError) none);
		nonIdentical(expected, try b.operator . (indexMethod)(needles.each.bytes(), 1) catch (IndexError) none);
	}
	local lenMinusOne = #s - 1;
	if (expected is Sequence && #expected == 2 && expected[1] <= lenMinusOne) {
		identical(expected, s.operator . (method)(needles, 0, lenMinusOne));
		identical(expected, b.operator . (method)(needles, 0, lenMinusOne));
		identical(expected, b.operator . (method)(needles.each.bytes(), 0, lenMinusOne));
		identical(expected, try s.operator . (indexMethod)(needles, 0, lenMinusOne) catch (IndexError) none);
		identical(expected, try b.operator . (indexMethod)(needles, 0, lenMinusOne) catch (IndexError) none);
		identical(expected, try b.operator . (indexMethod)(needles.each.bytes(), 0, lenMinusOne) catch (IndexError) none);
	} else if (expected is Sequence && #expected == 2 && expected[1] > lenMinusOne) {
		nonIdentical(expected, s.operator . (method)(needles, 0, lenMinusOne));
		nonIdentical(expected, b.operator . (method)(needles, 0, lenMinusOne));
		nonIdentical(expected, b.operator . (method)(needles.each.bytes(), 0, lenMinusOne));
		nonIdentical(expected, try s.operator . (indexMethod)(needles, 0, lenMinusOne) catch (IndexError) none);
		nonIdentical(expected, try b.operator . (indexMethod)(needles, 0, lenMinusOne) catch (IndexError) none);
		nonIdentical(expected, try b.operator . (indexMethod)(needles.each.bytes(), 0, lenMinusOne) catch (IndexError) none);
	}
}

function _hide(x) {
	local result = x;
	__asm__("" : "+X" (result));
	return result;
}

function assertFindAnyImpl(expected: none | int | (int, int), s: string, method: string, needles: {string...}) {
	assertFindAnyImpl2(expected, s, method, needles);
	assertFindAnyImpl2(expected, s, method, Tuple(needles));
	/* Force test for the case where the "needles"
	 * argument doesn't support `DeeFastSeq_GetSize_deprecated()',
	 * and the call needs to use an iterator internally. */
	assertFindAnyImpl2(expected, s, method, () -> {
		for (local x: needles)
			yield _hide(x);
	}());
}
function assertFindAny(expected: none | (int, int), s: string, method: string, needles: {string...}) {
	local caseMethod = {
		"findany": "casefindany",
		"rfindany": "caserfindany"
	}[method];
	assertFindAnyImpl(expected.first, s, method, needles);
	assertFindAnyImpl(expected, s, caseMethod, needles);
	assertFindAnyImpl(expected, s.swapcase(), caseMethod, needles);
	assertFindAnyImpl(expected, s, caseMethod, for (local x: needles) x.swapcase());
	if ((needles.each.length + ...) == #needles) {
		local sNeedles = "".join(needles);
		assertFindAnyImpl(expected.first, s, method, sNeedles);
		assertFindAnyImpl(expected, s, caseMethod, sNeedles);
		assertFindAnyImpl(expected, s.swapcase(), caseMethod, sNeedles);
		assertFindAnyImpl(expected, s, caseMethod, sNeedles.swapcase());
	}
}

/* findany: Find the lowest position of any of the given sub-strings. */
assertFindAny(none, "", "findany", {});
assertFindAny(none, "", "findany", { "" });
assertFindAny(none, "foo", "findany", {});
assertFindAny(none, "foo", "findany", { "" });
assertFindAny(none, "foo[bar,baz]foo", "findany", {});
assertFindAny(none, "foo[bar,baz]foo", "findany", { "" });
assertFindAny((7, 8), "foo[bar,baz]foo", "findany", { "," });
assertFindAny((3, 4), "foo[bar,baz]foo", "findany", { "[" });
assertFindAny((3, 4), "foo[bar,baz]foo", "findany", { "[", "," });
assertFindAny((3, 4), "foo[bar,baz]foo", "findany", { ",", "[" });

assertFindAny(none, "", "rfindany", {});
assertFindAny(none, "", "rfindany", { "" });
assertFindAny(none, "foo", "rfindany", {});
assertFindAny(none, "foo", "rfindany", { "" });
assertFindAny(none, "foo[bar,baz]foo", "rfindany", {});
assertFindAny(none, "foo[bar,baz]foo", "rfindany", { "" });
assertFindAny((7, 8), "foo[bar,baz]foo", "rfindany", { "," });
assertFindAny((3, 4), "foo[bar,baz]foo", "rfindany", { "[" });
assertFindAny((7, 8), "foo[bar,baz]foo", "rfindany", { "[", "," });
assertFindAny((7, 8), "foo[bar,baz]foo", "rfindany", { ",", "[" });

assertFindAny((1, 3),   "foo[bar,o,baz]foo", "findany", { "oo" });
assertFindAny((13, 15), "f[bar,o,baz]foo", "findany", { "oo" });
assertFindAny((6, 7),   "f[bar,o,baz]foo", "findany", { "oo", "o" });
assertFindAny((2, 4),   "f[bar,o,baz]foo", "findany", { "oo", "ba" });
assertFindAny((0, 1),   "f[bar,o,baz]foo", "findany", { "oo", "ba", "f" });
assertFindAny((15, 17), "foo[bar,o,baz]foo", "rfindany", { "oo" });
assertFindAny((13, 15), "f[bar,o,baz]foo", "rfindany", { "oo" });
assertFindAny((14, 15), "f[bar,o,baz]foo", "rfindany", { "oo", "o" });
assertFindAny((13, 15), "f[bar,o,baz]foo", "rfindany", { "oo", "ba" });
assertFindAny((14, 15), "f[bar,o,baz]foo", "rfindany", { "oo", "ba", "f", "o" });

assertFindAny((5, 6), "*#foo++foo#*", "findany", { "+" });
assertFindAny((5, 6), "*#foo++foo#*", "findany", { "+", "" });
assertFindAny((5, 6), "*#foo++foo#*", "findany", { "", "+" });
assertFindAny((5, 6), "*#foo++foo#*", "findany", { "+", "+" });
assertFindAny((0, 1), "*#foo++foo#*", "findany", { "*" });
assertFindAny((0, 1), "*#foo++foo#*", "findany", { "*", "" });
assertFindAny((0, 1), "*#foo++foo#*", "findany", { "", "*" });
assertFindAny((0, 1), "*#foo++foo#*", "findany", { "*", "*" });
assertFindAny((0, 1), "*#foo++foo#*", "findany", { "*", "+" });
assertFindAny((0, 1), "*#foo++foo#*", "findany", { "+", "*" });

assertFindAny((6, 7), "*#foo++foo#*", "rfindany", { "+" });
assertFindAny((6, 7), "*#foo++foo#*", "rfindany", { "+", "" });
assertFindAny((6, 7), "*#foo++foo#*", "rfindany", { "", "+" });
assertFindAny((6, 7), "*#foo++foo#*", "rfindany", { "+", "+" });
assertFindAny((11, 12), "*#foo++foo#*", "rfindany", { "*" });
assertFindAny((11, 12), "*#foo++foo#*", "rfindany", { "*", "" });
assertFindAny((11, 12), "*#foo++foo#*", "rfindany", { "", "*" });
assertFindAny((11, 12), "*#foo++foo#*", "rfindany", { "*", "*" });
assertFindAny((11, 12), "*#foo++foo#*", "rfindany", { "*", "+" });
assertFindAny((11, 12), "*#foo++foo#*", "rfindany", { "+", "*" });

assertFindAny(none,   "*+#", "findany", { });
assertFindAny(none,   "*+#", "findany", { "" });
assertFindAny((1, 2), "*+#", "findany", { "", "+" });
assertFindAny((1, 2), "*+#", "findany", { "+", "" });
assertFindAny((0, 1), "*+#", "findany", { "*" });
assertFindAny((1, 2), "*+#", "findany", { "+" });
assertFindAny((2, 3), "*+#", "findany", { "#" });
assertFindAny((1, 3), "*+#", "findany", { "+#" });
assertFindAny(none,   "*+#", "findany", { "#+" });
assertFindAny((2, 3), "*+#", "findany", { "#+", "#" });
assertFindAny((1, 3), "*+#", "findany", { "+#", "#" });
assertFindAny((2, 3), "*+#", "findany", { "#", "#+" });
assertFindAny((1, 3), "*+#", "findany", { "#", "+#" });
assertFindAny((0, 2), "*+#", "findany", { "*+", "*" });
assertFindAny((0, 1), "*+#", "findany", { "+*", "*" });
assertFindAny((0, 1), "*+#", "findany", { "*", "*+" });
assertFindAny((0, 1), "*+#", "findany", { "*", "+*" });
assertFindAny((0, 2), "*+#", "findany", { "*+", "+" });
assertFindAny((1, 2), "*+#", "findany", { "+*", "+" });
assertFindAny((0, 2), "*+#", "findany", { "+", "*+" });
assertFindAny((1, 2), "*+#", "findany", { "+", "+*" });

assertFindAny(none,   "*+#", "rfindany", { });
assertFindAny(none,   "*+#", "rfindany", { "" });
assertFindAny((1, 2), "*+#", "rfindany", { "", "+" });
assertFindAny((1, 2), "*+#", "rfindany", { "+", "" });
assertFindAny((0, 1), "*+#", "rfindany", { "*" });
assertFindAny((1, 2), "*+#", "rfindany", { "+" });
assertFindAny((2, 3), "*+#", "rfindany", { "#" });
assertFindAny((1, 3), "*+#", "rfindany", { "+#" });
assertFindAny(none,   "*+#", "rfindany", { "#+" });
assertFindAny((2, 3), "*+#", "rfindany", { "#+", "#" });
assertFindAny((2, 3), "*+#", "rfindany", { "+#", "#" });
assertFindAny((2, 3), "*+#", "rfindany", { "#", "#+" });
assertFindAny((2, 3), "*+#", "rfindany", { "#", "+#" });
assertFindAny((0, 2), "*+#", "rfindany", { "*+", "*" });
assertFindAny((1, 2), "*+#", "rfindany", { "*+", "+" });
assertFindAny((0, 1), "*+#", "rfindany", { "+*", "*" });
assertFindAny((0, 1), "*+#", "rfindany", { "*", "*+" });
assertFindAny((0, 1), "*+#", "rfindany", { "*", "+*" });
assertFindAny((1, 2), "*+#", "rfindany", { "*+", "+" });
assertFindAny((1, 2), "*+#", "rfindany", { "+*", "+" });
assertFindAny((1, 2), "*+#", "rfindany", { "+", "*+" });
assertFindAny((1, 2), "*+#", "rfindany", { "+", "+*" });
