/* Copyright (c) 2018-2025 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2025 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

import * from deemon;
import rt;

varying function dummy(x) {}
__asm__("" : "+X" (dummy)); /* Prevent inlining */

global destroyedStrings: {int...} = List();

function main() {
	destroyedStrings.clear();
	local hook = rt.StringFiniHook(id -> destroyedStrings.append(id));

	function tester(x: string, enableHooks: bool = true): int {
		local rtString = x.upper();
		assert rtString.id != x.id;
		assert !rtString.__hasfinihooks__;
		if (enableHooks) {
			assert rtString.__withfinihooks__ === rtString;
			assert rtString.__hasfinihooks__;
		}
		return rtString.id;
	}

	local id1 = tester("foo");
	assert destroyedStrings == {id1};
	local id2 = tester("barfoo");
	assert destroyedStrings == {id1, id2};

	/* Strings that don't have fini hooks enabled mustn't appear */
	tester("foo", enableHooks: false);
	tester("barfoo", enableHooks: false);
	tester("barbiz", enableHooks: false);
	tester("bazbaz", enableHooks: false);
	assert destroyedStrings == {id1, id2};

	dummy(hook); /* Force dummy dependency to prevent early destruction */
}

if (hasattr(rt, "StringFiniHook")) {
	main();
	main(); /* Run test twice to assert that hook cleanup works */
}


