/* Copyright (c) 2018-2025 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2025 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

import * from deemon;
import * from errors;

#if __DEEMON_VARIANT__ == "gatw"
import rt;

function assertRtTypeName(gName: string, tNames: {string...} | string | none = none) {
	if (tNames is none)
		tNames = "_" + gName;
	local t = rt.operator . (gName);
	assert t is Type;
	local actualName = Type.__name__(t);
	if (tNames is string) {
		assert tNames == actualName, f"rt.{gName}.__name__ == '{actualName}'";
	} else {
		assert actualName in tNames, f"rt.{gName}.__name__ == '{actualName}'";
	}
}

assertRtTypeName("SeqCombinations");
assertRtTypeName("SeqCombinationsIterator");
assertRtTypeName("SeqRepeatCombinations");
assertRtTypeName("SeqRepeatCombinationsIterator");
assertRtTypeName("SeqPermutations");
assertRtTypeName("SeqPermutationsIterator");
assertRtTypeName("SeqCombinationsView");
assertRtTypeName("SeqSegments");
assertRtTypeName("SeqSegmentsIterator");
assertRtTypeName("SeqConcat");
assertRtTypeName("SeqConcatIterator");
assertRtTypeName("SeqFilter");
assertRtTypeName("SeqFilterAsUnbound");
assertRtTypeName("SeqFilterIterator");
assertRtTypeName("SeqHashFilter");
assertRtTypeName("SeqHashFilterIterator");
assertRtTypeName("SeqMapped");
assertRtTypeName("SeqMappedIterator");
assertRtTypeName("SeqRange");
assertRtTypeName("SeqRangeIterator");
assertRtTypeName("SeqIntRange");
assertRtTypeName("SeqIntRangeIterator");
assertRtTypeName("SeqRepeat");
assertRtTypeName("SeqRepeatIterator");
assertRtTypeName("SeqItemRepeat");
assertRtTypeName("SeqItemRepeatIterator");
assertRtTypeName("SeqIds");
assertRtTypeName("SeqIdsIterator");
assertRtTypeName("SeqTypes");
assertRtTypeName("SeqTypesIterator");
assertRtTypeName("SeqClasses");
assertRtTypeName("SeqClassesIterator");
assertRtTypeName("SeqFlat");
assertRtTypeName("SeqFlatIterator");

assertRtTypeName("SeqEach");
assertRtTypeName("SeqEachOperator");
assertRtTypeName("SeqEachOperatorIterator");
assertRtTypeName("SeqEachGetAttr_np", { "_SeqEachGetAttr", "_SeqEachOperator" });
assertRtTypeName("SeqEachGetAttrIterator_np", { "_SeqEachGetAttrIterator", "_SeqEachOperatorIterator" });
assertRtTypeName("SeqEachCallAttr_np", { "_SeqEachCallAttr", "_SeqEachOperator" });
assertRtTypeName("SeqEachCallAttrIterator_np", { "_SeqEachCallAttrIterator", "_SeqEachOperatorIterator" });
assertRtTypeName("SeqEachCallAttrKw_np", { "_SeqEachCallAttrKw", "_SeqEachOperator" });
assertRtTypeName("SeqEachCallAttrKwIterator_np", { "_SeqEachCallAttrKwIterator", "_SeqEachOperatorIterator" });

assertRtTypeName("SeqSome");
assertRtTypeName("SeqSomeOperator");
assertRtTypeName("SeqSomeGetAttr_np", { "_SeqSomeGetAttr", "_SeqSomeOperator" });
assertRtTypeName("SeqSomeCallAttr_np", { "_SeqSomeCallAttr", "_SeqSomeOperator" });
assertRtTypeName("SeqSomeCallAttrKw_np", { "_SeqSomeCallAttrKw", "_SeqSomeOperator" });

assertRtTypeName("SeqEnumWithSeqOperatorSizeAndGetItemIndexFast");
assertRtTypeName("SeqEnumWithIntFilterAndSeqOperatorSizeAndGetItemIndexFast");
assertRtTypeName("SeqEnumWithSeqOperatorSizeAndSeqOperatorTryGetItemIndex");
assertRtTypeName("SeqEnumWithIntFilterAndSeqOperatorSizeAndSeqOperatorTryGetItemIndex");
assertRtTypeName("SeqEnumWithSeqOperatorSizeAndSeqOperatorGetItemIndex");
assertRtTypeName("SeqEnumWithIntFilterAndSeqOperatorSizeAndSeqOperatorGetItemIndex");
assertRtTypeName("SeqEnumWithSeqOperatorSizeobAndSeqOperatorGetItem");
assertRtTypeName("SeqEnumWithSeqOperatorGetItemIndex");
assertRtTypeName("SeqEnumWithIntFilterAndSeqOperatorGetItemIndex");
assertRtTypeName("SeqEnumWithFilterAndSeqOperatorSizeobAndSeqOperatorGetItem");
assertRtTypeName("SeqEnumWithSeqOperatorGetItem");
assertRtTypeName("SeqEnumWithFilterAndSeqOperatorGetItem");
assertRtTypeName("SeqEnumWithSeqOperatorIterAndCounter");
assertRtTypeName("SeqEnumWithIntFilterAndSeqOperatorIterAndCounter");
assertRtTypeName("SeqEnumWithSeqEnumerate");
assertRtTypeName("SeqEnumWithIntFilterAndSeqEnumerateIndex");
assertRtTypeName("SeqEnumWithFilterAndMapOperatorIterAndUnpack");
assertRtTypeName("SeqEnumWithMapIterkeysAndMapOperatorGetItem");
assertRtTypeName("SeqEnumWithFilterAndMapIterkeysAndMapOperatorGetItem");
assertRtTypeName("SeqEnumWithMapIterkeysAndMapOperatorTryGetItem");
assertRtTypeName("SeqEnumWithFilterAndMapIterkeysAndMapOperatorTryGetItem");
assertRtTypeName("SeqEnumWithMapEnumerate");
assertRtTypeName("SeqEnumWithFilterAndMapEnumerateRange");

assertRtTypeName("SeqWithSizeAndGetItemIndex");
assertRtTypeName("SeqWithSizeAndGetItemIndexFast");
assertRtTypeName("SeqWithSizeAndTryGetItemIndex");
assertRtTypeName("SeqWithSizeObAndGetItem");
assertRtTypeName("SeqWithIter");
assertRtTypeName("SeqWithIterAndLimit");

assertRtTypeName("SeqOne");
assertRtTypeName("SeqOneIterator");

assertRtTypeName("SeqEnumerateWrapper");
assertRtTypeName("SeqEnumerateIndexWrapper");
//TODO: SeqRemoveWithRemoveIfPredicate
//TODO: SeqRemoveWithRemoveIfPredicateWithKey
//TODO: SeqRemoveIfWithRemoveAllItem
//TODO: SeqRemoveIfWithRemoveAllKey
//TODO: SeqRemoveIfWithRemoveAllItem_DummyInstance

assertRtTypeName("IterWithGetItemIndex");
assertRtTypeName("IterWithGetItemIndexPair");
assertRtTypeName("IterWithSizeAndGetItemIndex");
assertRtTypeName("IterWithSizeAndGetItemIndexPair");
assertRtTypeName("IterWithSizeAndGetItemIndexFast");
assertRtTypeName("IterWithSizeAndGetItemIndexFastPair");
assertRtTypeName("IterWithSizeAndTryGetItemIndex");
assertRtTypeName("IterWithSizeAndTryGetItemIndexPair");
assertRtTypeName("IterWithGetItem");
assertRtTypeName("IterWithGetItemPair");
assertRtTypeName("IterWithSizeObAndGetItem");
assertRtTypeName("IterWithSizeAndGetItemPair");
assertRtTypeName("IterWithNextAndLimit");
assertRtTypeName("IterWithIterKeysAndGetItemForMap");
assertRtTypeName("IterWithIterKeysAndTryGetItemForMap");
assertRtTypeName("IterWithForeach");
assertRtTypeName("IterWithForeachPair");
assertRtTypeName("IterWithEnumerateMap");
assertRtTypeName("IterWithEnumerateIndexSeq");
assertRtTypeName("IterWithEnumerateSeq");
assertRtTypeName("IterWithNextAndCounterPair");
assertRtTypeName("IterWithNextAndCounterAndLimitPair");
assertRtTypeName("IterWithNextAndUnpackFilter");
assertRtTypeName("IterWithNextKey");
assertRtTypeName("IterWithNextValue");

assertRtTypeName("SeqReversedWithGetItemIndex");
assertRtTypeName("SeqReversedWithGetItemIndexFast");
assertRtTypeName("SeqReversedWithTryGetItemIndex");

assertRtTypeName("DistinctIterator");
assertRtTypeName("DistinctIteratorWithKey");
assertRtTypeName("DistinctSetWithKey");
assertRtTypeName("DistinctMappingIterator");

assertRtTypeName("CachedSeqWithIter");
assertRtTypeName("CachedSeqWithIterIterator");

assertRtTypeName("SetInversion");
assertRtTypeName("SetUnion");
assertRtTypeName("SetUnionIterator");
assertRtTypeName("SetSymmetricDifference");
assertRtTypeName("SetSymmetricDifferenceIterator");
assertRtTypeName("SetIntersection");
assertRtTypeName("SetIntersectionIterator");
assertRtTypeName("SetDifference");
assertRtTypeName("SetDifferenceIterator");
assertRtTypeName("MapUnion");
assertRtTypeName("MapUnionIterator");
assertRtTypeName("MapSymmetricDifference");
assertRtTypeName("MapSymmetricDifferenceIterator");
assertRtTypeName("MapIntersection");
assertRtTypeName("MapIntersectionIterator");
assertRtTypeName("MapDifference");
assertRtTypeName("MapDifferenceIterator");

assertRtTypeName("MapHashFilter");
assertRtTypeName("MapHashFilterIterator");
assertRtTypeName("MapByAttr");
assertRtTypeName("MapKeys");
assertRtTypeName("MapValues");

assertRtTypeName("MapFromKeysAndValue");
assertRtTypeName("MapFromKeysAndCallback");
assertRtTypeName("MapFromKeysAndValueIterator");
assertRtTypeName("MapFromKeysAndCallbackIterator");

assertRtTypeName("MapFromAttr");
assertRtTypeName("MapFromAttrKeysIterator");

assertRtTypeName("NullableTuple", "NullableTuple");

assertRtTypeName("SharedVector");
assertRtTypeName("SharedVectorIterator");
assertRtTypeName("SharedMap");
assertRtTypeName("SharedMapIterator");
assertRtTypeName("RefVector");
assertRtTypeName("RefVectorIterator");

assertRtTypeName("BytesFind");
assertRtTypeName("BytesFindIterator");
assertRtTypeName("BytesCaseFind");
assertRtTypeName("BytesCaseFindIterator");
assertRtTypeName("BytesSegments");
assertRtTypeName("BytesSegmentsIterator");
assertRtTypeName("BytesSplit");
assertRtTypeName("BytesSplitIterator");
assertRtTypeName("BytesCaseSplit");
assertRtTypeName("BytesCaseSplitIterator");
assertRtTypeName("BytesLineSplit");
assertRtTypeName("BytesLineSplitIterator");

assertRtTypeName("StringScan");
assertRtTypeName("StringScanIterator");
assertRtTypeName("StringFind");
assertRtTypeName("StringFindIterator");
assertRtTypeName("StringCaseFind");
assertRtTypeName("StringCaseFindIterator");
assertRtTypeName("StringOrdinals");
assertRtTypeName("StringSegments");
assertRtTypeName("StringSegmentsIterator");
assertRtTypeName("StringSplit");
assertRtTypeName("StringSplitIterator");
assertRtTypeName("StringCaseSplit");
assertRtTypeName("StringCaseSplitIterator");
assertRtTypeName("StringLineSplit");
assertRtTypeName("StringLineSplitIterator");

assertRtTypeName("ReFindAll");
assertRtTypeName("ReFindAllIterator");
assertRtTypeName("RegFindAll");
assertRtTypeName("RegFindAllIterator");
assertRtTypeName("ReLocateAll");
assertRtTypeName("ReLocateAllIterator");
assertRtTypeName("RegLocateAll");
assertRtTypeName("RegLocateAllIterator");
assertRtTypeName("ReSplit");
assertRtTypeName("ReSplitIterator");
assertRtTypeName("ReGroups");
assertRtTypeName("ReSubStrings");
assertRtTypeName("ReSubBytes");
assertRtTypeName("ReBytesFindAll");
assertRtTypeName("ReBytesFindAllIterator");
assertRtTypeName("RegBytesFindAll");
assertRtTypeName("RegBytesFindAllIterator");
assertRtTypeName("ReBytesLocateAll");
assertRtTypeName("ReBytesLocateAllIterator");
assertRtTypeName("RegBytesLocateAll");
assertRtTypeName("RegBytesLocateAllIterator");
assertRtTypeName("ReBytesSplit");
assertRtTypeName("ReBytesSplitIterator");

assertRtTypeName("ModuleExports");
assertRtTypeName("ModuleExportsIterator");
assertRtTypeName("ModuleGlobals");

assertRtTypeName("ClassOperatorTable");
assertRtTypeName("ClassOperatorTableIterator");
assertRtTypeName("ClassAttribute");
assertRtTypeName("ClassAttributeTable");
assertRtTypeName("ClassAttributeTableIterator");
assertRtTypeName("ObjectTable");
assertRtTypeName("TypeMRO");
assertRtTypeName("TypeMROIterator");
assertRtTypeName("TypeBases");
assertRtTypeName("TypeBasesIterator");

assertRtTypeName("TypeOperators");
assertRtTypeName("TypeOperatorsIterator");

assertRtTypeName("GCSet");
assertRtTypeName("GCSetIterator");

assertRtTypeName("BlackListKwds");
assertRtTypeName("BlackListKwdsIterator");
assertRtTypeName("BlackListKw");
assertRtTypeName("BlackListKwIterator");
assertRtTypeName("CachedDict", "CachedDict");

assertRtTypeName("DocKwds");
assertRtTypeName("DocKwdsIterator");

assertRtTypeName("InteractiveModule");
assertRtTypeName("DexModule");
assertRtTypeName("Compiler");
assertRtTypeName("ClassDescriptor");
assertRtTypeName("InstanceMember");
assertRtTypeName("CMethod");
assertRtTypeName("CMethod0");
assertRtTypeName("CMethod1");
assertRtTypeName("KwCMethod");
assertRtTypeName("ObjMethod");
assertRtTypeName("KwObjMethod");
assertRtTypeName("ClassMethod");
assertRtTypeName("KwClassMethod");
assertRtTypeName("ClassProperty");
assertRtTypeName("ClassMember");
assertRtTypeName("FileType");
assertRtTypeName("YieldFunction");
assertRtTypeName("YieldFunctionIterator");
assertRtTypeName("RoDict");
assertRtTypeName("RoDictIterator");
assertRtTypeName("RoSet");
assertRtTypeName("RoSetIterator");
assertRtTypeName("Kwds");
assertRtTypeName("KwdsIterator");
assertRtTypeName("KwdsMapping");
assertRtTypeName("KwdsMappingIterator");
assertRtTypeName("DDI");
assertRtTypeName("IteratorPending");
assertRtTypeName("IteratorFuture");

assertRtTypeName("StringIterator");
assertRtTypeName("BytesIterator");
assertRtTypeName("ListIterator");
assertRtTypeName("TupleIterator");
assertRtTypeName("HashSetIterator");
assertRtTypeName("TracebackIterator");
assertRtTypeName("DictIterator");

assertRtTypeName("Attribute", "Attribute");
assertRtTypeName("EnumAttr", "enumattr");
assertRtTypeName("EnumAttrIterator");

assertRtTypeName("FunctionStatics");
assertRtTypeName("FunctionStaticsIterator");
assertRtTypeName("FunctionSymbolsByName");
assertRtTypeName("FunctionSymbolsByNameIterator");
assertRtTypeName("FunctionSymbolsByNameKeysIterator");
assertRtTypeName("YieldFunctionSymbolsByName");
assertRtTypeName("YieldFunctionSymbolsByNameIterator");
assertRtTypeName("YieldFunctionSymbolsByNameKeysIterator");
assertRtTypeName("FrameArgs");
assertRtTypeName("FrameLocals");
assertRtTypeName("FrameStack");
assertRtTypeName("FrameSymbolsByName");
assertRtTypeName("FrameSymbolsByNameIterator");
assertRtTypeName("FrameSymbolsByNameKeysIterator");

assert rt.GCEnum === type(gc);
assert rt.GCIter === type(gc.operator iter());
#endif /* __DEEMON_VARIANT__ == "gatw" */
