#!/usr/bin/deemon
/* Copyright (c) 2018-2025 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2025 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

import * from deemon;

if (!float.hasoperator("constructor")) {
	/* Disable this test if floating-point support isn't enabled. */
	return;
}

function parseFloat(x: string): float {
	local a = float(x);
	local b = exec(x);
	assert a == b;
	assert b is float;
	return a;
}

assert parseFloat("0.0") == 0.0;
assert parseFloat("-0.0") == -0.0;
assert parseFloat("+0.0") == +0.0;
assert parseFloat("0.5") == 0.5;
assert parseFloat("-0.5") == -0.5;
assert parseFloat("+0.5") == +0.5;
assert parseFloat("1.0") == 1.0;
assert parseFloat("-1.0") == -1.0;
assert parseFloat("+1.0") == +1.0;
assert float("0") == 0.0;
assert float("1") == 1.0;
assert parseFloat("1.0E2") == 100;
assert parseFloat("1.0E2") == 100.0;
assert parseFloat("1.0E2") == 1.0E2;
assert parseFloat("1.0E+2") == 1.0E+2;
assert parseFloat("1.0E-2") == 1.0E-2;
assert parseFloat("1.0E-2") == 0.01;
assert parseFloat("1P2") == 1P2;
assert parseFloat("1P2") == 100;
assert parseFloat("1P2") == 100.0;
assert parseFloat("1P+2") == 1P+2;
assert parseFloat("1P-2") == 1P-2;
assert parseFloat("1P-2") == 0.01;
assert float("1E2") == 100;
assert float("1E2") == 100.0;
assert float("1E2") == 1.0E2;
assert float("1E+2") == 1.0E+2;
assert float("1E-2") == 1.0E-2;
assert float("1E-2") == 0.01;
assert float("inf") == float.inf;
assert float("+inf") == +float.inf;
assert float("-inf") == -float.inf;
assert float("INF") == float.inf;
assert float("+INF") == +float.inf;
assert float("-INF") == -float.inf;
assert float("nan").isnan;
assert float("+nan").isnan;
assert float("-nan").isnan;
assert float("NAN").isnan;
assert float("+NAN").isnan;
assert float("-NAN").isnan;

assert -0.0 == 0.0;
assert (0.5).trunc  == 0.0;
assert (-0.5).trunc == -0.0;
assert (0.5).floor  == 0.0;
assert (-0.5).floor == -1.0;
assert (0.5).ceil   == 1.0;
assert (-0.5).ceil  == 0.0;
assert (0.5).round  == 1.0;
assert (-0.5).round == -1.0;

assert !(0.0).isnan;
assert !(0.0).isinf;
assert !(0.0).isnormal;
assert (0.0).isfinite;

assert !(1.0).isnan;
assert !(1.0).isinf;
assert (1.0).isnormal;
assert (1.0).isfinite;

assert !float.inf.isnan;
assert float.inf.isinf;
assert !float.inf.isnormal;
assert !float.inf.isfinite;

assert (-float.inf) != float.inf;
assert float.inf.abs == float.inf;
assert (-float.inf).abs == float.inf;
assert !(-float.inf).isnan;
assert (-float.inf).isinf;
assert !(-float.inf).isnormal;
assert !(-float.inf).isfinite;

assert float.nan != float.nan;
assert float.nan.isnan;
assert !float.nan.isinf;
assert !float.nan.isnormal;
assert !float.nan.isfinite;

/* For the reason of allowing type-generic code,
 * `int' also provides float-style attributes. */
assert !(0).isnan;
assert !(0).isinf;
assert !(0).isnormal;
assert (0).isfinite;

assert !(1).isnan;
assert !(1).isinf;
assert (1).isnormal;
assert (1).isfinite;

