#!/usr/bin/deemon
/* Copyright (c) 2018-2023 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2023 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

/* Assert correct evaluation of some basic JIT expressions. */

import deemon;
import * from deemon;
import * from errors;

function assert_identical(a, b) {
	/* Make sure that the comparison works in every way */
	assert type a === type b;
	assert a == b;
	assert b == a;
	assert !(a != b);
	assert !(b != a);
}

/* Make sure that trying to execute an empty piece of
 * code causes a SyntaxError exception to be thrown. */
assert (try ({ exec(''); none; }) catch (e...) e) is SyntaxError;
assert (try ({ exec(' '); none; }) catch (e...) e) is SyntaxError;
assert (try ({ exec('\n'); none; }) catch (e...) e) is SyntaxError;
assert (try ({ exec('/* empty */'); none; }) catch (e...) e) is SyntaxError;
assert (try ({ exec('/* emp\nty */'); none; }) catch (e...) e) is SyntaxError;
assert (try ({ exec('// empty'); none; }) catch (e...) e) is SyntaxError;
assert (try ({ exec('// empty\n'); none; }) catch (e...) e) is SyntaxError;

/* Basic literal / constant parsing. */
assert_identical(exec(r'1'),          1);
assert_identical(exec(r'1.0'),        1.0);
assert_identical(exec(r'"foo"'),      "foo");
assert_identical(exec(r"'foo'"),      "foo");
assert_identical(exec(r'true'),       true);
assert_identical(exec(r'false'),      false);
assert_identical(exec(r'none'),       none);
assert_identical(exec(r'1;'),         1);
assert_identical(exec(r'1.0;'),       1.0);
assert_identical(exec(r'"foo";'),     "foo");
assert_identical(exec(r"'foo';"),     "foo");
assert_identical(exec(r'true;'),      true);
assert_identical(exec(r'false;'),     false);
assert_identical(exec(r'none;'),      none);

/* Simple arithmetic. */
assert_identical(exec(r'10*2 + 11*3'),  53);
assert_identical(exec(r'10/2*5'),       25);
assert_identical(exec(r'10/(2*5)'),     1);
assert_identical(exec(r'10*2 + 11*3;'), 53);
assert_identical(exec(r'10/2*5;'),      25);
assert_identical(exec(r'10/(2*5);'),    1);

/* Simple unary instructions */
assert_identical(exec(r'str 1'),       "1");
assert_identical(exec(r'str 1.0'),     "1.0");
assert_identical(exec(r'type true'),   bool);
assert_identical(exec(r'type(true)'),  bool);
assert_identical(exec(r'str(true)'),   "true");
assert_identical(exec(r'str 1;'),      "1");
assert_identical(exec(r'str 1.0;'),    "1.0");
assert_identical(exec(r'type true;'),  bool);
assert_identical(exec(r'type(true);'), bool);
assert_identical(exec(r'str(true);'),  "true");

/* Parenthesis vs. tuples, as well as expand-Sequence casting. */
assert_identical(exec(r'(1)'),          1);
assert_identical(exec(r'(1,)'),         Tuple { 1 });
assert_identical(exec(r'(1, 2)'),       Tuple { 1, 2 });
assert_identical(exec(r'()'),           Tuple { });
assert_identical(exec(r'([]...)'),      Tuple { });
assert_identical(exec(r'([]...,)'),     Tuple { });
assert_identical(exec(r'([1]...)'),     Tuple { 1 });
assert_identical(exec(r'([1]...,)'),    Tuple { 1 });
assert_identical(exec(r'([1, 2]...)'),  Tuple { 1, 2 });
assert_identical(exec(r'([1, 2]...,)'), Tuple { 1, 2 });
assert_identical(exec(r'[]'),           List { });
assert_identical(exec(r'[1]'),          List { 1 });
assert_identical(exec(r'[1,]'),         List { 1 });
assert_identical(exec(r'[1, 2]'),       List { 1, 2 });
assert_identical(exec(r'[()...]'),      List { });
assert_identical(exec(r'[()...,]'),     List { });
assert_identical(exec(r'[(1,)...]'),    List { 1 });
assert_identical(exec(r'[(1,)...,]'),   List { 1 });
assert_identical(exec(r'[(1, 2)...]'),  List { 1, 2 });
assert_identical(exec(r'[(1, 2)...,]'), List { 1, 2 });
assert_identical(exec(r'(Tuple from deemon)([:5])'), Tuple { 0, 1, 2, 3, 4 });
assert_identical(exec(r'Tuple from deemon([:5])'), Tuple { 0, 1, 2, 3, 4 });

/* Range expressions. */
assert_identical(exec(r'[:20]'),      Sequence.range(0, 20));
assert_identical(exec(r'[:20, 2]'),   Sequence.range(0, 20, 2));
assert_identical(exec(r'[10:20]'),    Sequence.range(10, 20));
assert_identical(exec(r'[10:20, 2]'), Sequence.range(10, 20, 2));

/* Attribute lookup. */
assert_identical(exec(r'(string from deemon).center'), string.center);

/* The builtin import() function. */
assert exec(r'import("deemon")') === deemon;

/* Bound expressions. */
assert_identical(exec(r'"foo".find is bound'), true);
assert_identical(exec(r'"foo".nonexisting_symbols is bound'), false);
assert_identical(exec(r'"foo".find !is bound'), false);
assert_identical(exec(r'"foo".nonexisting_symbols !is bound'), true);
assert_identical(exec(r'"foo".find !!is bound'), true);
assert_identical(exec(r'"foo".nonexisting_symbols !!is bound'), false);
assert_identical(exec(r'bound("foo".find)'), true);
assert_identical(exec(r'bound("foo".nonexisting_symbols)'), false);
assert_identical(exec(r'bound("foo".nonexisting_symbols);'), false);

assert_identical(exec(r'10'), 10);
assert_identical(exec(r'10;'), 10);
assert_identical(exec(r'return 10;'), 10);
assert_identical(exec(r'[10, 20, "foo", false, none]'), [10, 20, "foo", false, none]);
assert_identical(exec(r'[10, 20, "foo", false, none];'), [10, 20, "foo", false, none]);
assert_identical(#exec(r'[10, 20, "foo", false, none]'), #[10, 20, "foo", false, none]);
assert_identical(#exec(r'[10, 20, "foo", false, none];'), #[10, 20, "foo", false, none]);
assert_identical(exec(r'#[10, 20, "foo", false, none]'), #[10, 20, "foo", false, none]);
assert_identical(exec(r'#[10, 20, "foo", false, none];'), #[10, 20, "foo", false, none]);
assert_identical(exec(r'({ 10; })'), 10);
assert_identical(exec(r'({ 10; });'), 10);
assert_identical(exec(r'({ return 10; })'), 10);
assert_identical(exec(r'({ return 10; });'), 10);
assert_identical(exec(r'{ 10; }'), 10);
assert_identical(exec(r'{ 10; };'), none);
assert_identical(exec(r'{ return 10; }'), 10);
assert_identical(exec(r'{ return 10; };'), 10);
assert exec(r'{ 10 }') == { 10 };
assert exec(r'{ 10 };') == { 10 };
assert exec(r'{ 10, }') == { 10 };
assert exec(r'{ 10, };') == { 10 };
assert_identical(exec(r'{ 10, 20, "foo", false, none; }'), none);
assert_identical(exec(r'({ 10, 20, "foo", false, none; })'), none);
assert_identical(exec(r'{ 10, 20, "foo", false, none; }'), ({ 10, 20, "foo", false, none; }));
assert_identical(exec(r'({ 10, 20, "foo", false, none; })'), ({ 10, 20, "foo", false, none; }));

for (local code: {
	r'{ 10, 20, "foo", false, none }',
	r'{ 10, 20, "foo", false, none };',
	r'({ 10, 20, "foo", false, none })',
	r'({ 10, 20, "foo", false, none });',
}) {
	local seq = exec(code);
	assert seq is Sequence;
	assert seq == { 10, 20, "foo", false, none };
}

for (local code: {
	r'{ 10: 20, 20: 30, "foo": "bar" }',
	r'({ 10: 20, 20: 30, "foo": "bar" })',
	r'({ 10: 20, 20: 30, "foo": "bar" });',
}) {
	local map = exec(code);
	assert map is Mapping;
	assert_identical(#map, 3);
	assert_identical(map.get(10), 20);
	assert_identical(map.get(20), 30);
	assert_identical(map.get("foo"), "bar");
	assert_identical(map[10], 20);
	assert_identical(map[20], 30);
	assert_identical(map["foo"], "bar");
}

for (local code: {
	r'local x = { 10, 20, 30 };x;',
	r'global x = { 10, 20, 30 };x;',
	r'x = { 10, 20, 30 };x;',
}) {
	local val = exec(code);
	assert val is Sequence;
	assert val == { 10, 20, 30 };
}

for (local code: {
	r'x = 42;',
	r'x = 42',
	r'global x = 42;',
	r'global x = 42',
}) {
	local glob = Dict();
	exec(code, globals: glob);
	assert_identical(glob["x"], 42);
}

for (local code: {
	r'x = { 10, 20, 30 };',
	r'x = { 10, 20, 30 }',
	r'global x = { 10, 20, 30 };',
	r'global x = { 10, 20, 30 }',
}) {
	local glob = Dict();
	exec(code, globals: glob);
	assert glob["x"] is Sequence;
	assert glob["x"] == { 10, 20, 30 };
}


/* Conditional execution containing an errorous dead branch. */
assert_identical(exec(r'true ? "ok" : "foo".bar.baz.bim'), "ok");

{
	local glob = Dict {
		"x" : "foo",
		"y" : 20,
	};
	exec(r'result = x.center(y - 5)', globals: glob);
	assert_identical(glob["result"], "foo".center(15));
}

assert_identical(exec(r'x = 2'), 2);
assert_identical(exec(r'x = 2;'), 2);
assert_identical(exec(r'global x = 2'), 2);
assert_identical(exec(r'global x = 2;'), 2);
assert_identical(exec(r'local x = 2'), 2);
assert_identical(exec(r'local x = 2;'), 2);

assert_identical(exec(r'function foo(x) -> x * 2')(7), 14);
assert_identical(exec(r'function foo(x) -> x * 2;')(7), 14);
assert_identical(exec(r'function foo(x) { return x * 2; }')(7), 14);
assert_identical(exec(r'function foo(x) { return x * 2; };')(7), none);
assert_identical(exec(r'global function foo(x) -> x * 2')(7), 14);
assert_identical(exec(r'global function foo(x) -> x * 2;')(7), 14);
assert_identical(exec(r'global function foo(x) { return x * 2; }')(7), 14);
assert_identical(exec(r'global function foo(x) { return x * 2; };')(7), none);
assert_identical(exec(r'local function foo(x) -> x * 2')(7), 14);
assert_identical(exec(r'local function foo(x) -> x * 2;')(7), 14);
assert_identical(exec(r'local function foo(x) { return x * 2; }')(7), 14);
assert_identical(exec(r'local function foo(x) { return x * 2; };')(7), none);
assert_identical(exec(r'function(x) -> x * 2')(7), 14);
assert_identical(exec(r'function(x) -> x * 2;')(7), 14);
assert_identical(exec(r'function(x) { return x * 2; }')(7), 14);
assert_identical(exec(r'function(x) { return x * 2; };'), none);
assert_identical(exec(r'function(x) { return x * 2; };')(7), none);
assert_identical(exec(r'[](x) -> x * 2')(7), 14);
assert_identical(exec(r'(x) -> x * 2')(7), 14);
assert_identical(exec(r'x -> x * 2')(7), 14);
assert_identical(exec(r'[](x) -> x * 2;')(7), 14);
assert_identical(exec(r'(x) -> x * 2;')(7), 14);
assert_identical(exec(r'x -> x * 2;')(7), 14);
assert_identical(exec(r'[](x) { return x * 2; }')(7), 14);
assert_identical(exec(r'(x) -> { return x * 2; }')(7), 14);
assert_identical(exec(r'x -> { return x * 2; }')(7), 14);
assert exec(r'(x) -> { x * 2 }')(7) == {14};
assert exec(r'x -> { x * 2 }')(7) == {14};
/* Syntactic difference: `[]() { }' is an expression, so `[]() { };' still
 * evaluates to that same expression. `function() { }' is a pseudo-statement
 * that doesn't expect a trailing `;'-character, so `function() { };' are
 * actually 2 statements `function() { }' and `;', with the later (`;')
 * evaluating to `none'! */
assert_identical(exec(r'[](x) { return x * 2; };')(7), 14);
assert_identical(exec(r'(x) -> { return x * 2; };')(7), 14);
assert_identical(exec(r'x -> { return x * 2; };')(7), 14);


/* Test simple lambda expressions */
{
	local lmb = exec(r'[](x) -> x.startswith("foo")');
	local items = ["foz", "foo", "bar", "foobar"];
	items.removeif(lmb);
	assert items == ["foz", "bar"];
}
/* Also re-try the test with a block-lambda */
{
	local lmb = exec(r'[](x) { return x.startswith("foo"); }');
	local items = ["foz", "foo", "bar", "foobar"];
	items.removeif(lmb);
	assert items == ["foz", "bar"];
}

{
	local glob = Dict();
	/* Execute a piece of code to define some globals,
	 * as well as create and return a JIT function. */
	local x = exec(r'
		bar = "foobar"; // Implicitly declared as a global
		function foo(x?, y = 3) {
			if (x !is bound)
				return bar;
			return x + y;
		}
	', globals: glob);

	/* Ensure that globals were created correctly */
	assert glob["bar"] == "foobar";
	assert glob["foo"] === x;

	/* Ensure that invocations of the function behave properly */
	assert x() === glob["bar"];
	assert_identical(x(10), 13);
	assert_identical(x(10, 20), 30);

	/* Ensure that the correct meta-data is available for the function */
	assert_identical(x.__name__, "foo");
	assert x.__kwds__ == { "x", "y" };
	assert_identical(x.__argc_min__, 0);
	assert_identical(x.__argc_max__, 2);
	assert x.__globals__ === glob;

	/* Modifying globals will affect the jit function,
	 * because `bar' was linked as a global variable. */
	assert_identical(x(), "foobar");
	glob["bar"] = 1234;
	assert_identical(x(), 1234);

}

/* C-style cast expressions */
assert_identical(exec(r'(import("deemon").int)"42"'), 42);
assert_identical(exec(r'(import("deemon").int)42'), 42);
assert_identical(exec(r'(import("deemon").List){ 10, 20, 30 }'), [10, 20, 30]);


for (local typ: { Tuple, List, Dict, HashSet }) {
	for (local code: {
		r'import("deemon").{typ}(())',
		r'import("deemon").{typ}(());',
		r'import("deemon").{typ}(none)',
		r'import("deemon").{typ}(none);',
		r'import("deemon").{typ}()',
		r'import("deemon").{typ}();',
//		r'local x = import("deemon").{typ}; x()', /* Not allowed! */
		r'local x = import("deemon").{typ}; x();',
		r'global x = import("deemon").{typ}; x();',
		r'x = import("deemon").{typ}; x();',
		/* NOTE: Double-`{{' and `}}' is only here because that's how
		 *       `{' and `}' characters are escaped in string.format() */
		r'({{ local x = import("deemon").{typ}; x(); }})',
		r'({{ local x = import("deemon").{typ}; x(); }});',
		r'(import("deemon").{typ})(())',
		r'(import("deemon").{typ})(());',
		r'(import("deemon").{typ})(none)',
		r'(import("deemon").{typ})(none);',
		r'(import("deemon").{typ})()',
		r'(import("deemon").{typ})();',
		r'(import("deemon").{typ})none',
		r'(import("deemon").{typ})none;',
//TODO:		r'import("deemon").{typ} pack',
//TODO:		r'import("deemon").{typ} pack;',
//TODO:		r'import("deemon").{typ} pack()',
//TODO:		r'import("deemon").{typ} pack();',
	}) {
		code = code.format({ "typ" : typ });
		assert_identical(exec(code), typ(()));
		assert_identical(exec(code), typ());
	}
}

assert_identical(exec(r'"{{foo{bar}}}".format({ "bar" : 42 })'), "{foo42}");
assert_identical(exec(r'"{{{bar}foo{bar}}}".format({ "bar" : 42 })'), "{42foo42}");
assert_identical(exec(r'"{{{baz}foo{bar}}}".format({ "bar" : 42, "baz" : 43 })'), "{43foo42}");

/* Test return in JIT expressions */
assert_identical(exec(r'if (10 < 20) "OK"; else "ERROR";'), "OK");  /* Statement */
assert_identical(exec(r'if (10 < 20) "OK" else "ERROR"'), "OK");    /* Expression */
assert_identical(exec(r'if (10 < 20) "OK" else "ERROR";'), "OK");   /* Expression in Statement */
assert_identical(exec(r'(if (10 < 20) "OK" else "ERROR")'), "OK");  /* Expression */
assert_identical(exec(r'(if (10 < 20) "OK" else "ERROR");'), "OK"); /* Expression in Statement */
assert_identical(exec(r'return if (10 < 20) "OK" else "ERROR";'), "OK"); /* Return Expression in Statement */
assert_identical(exec(r'return (if (10 < 20) "OK" else "ERROR");'), "OK"); /* Return Expression in Statement */
assert_identical(exec(r'if (10 < 20) return "OK"; return "ERROR";'), "OK"); /* Statement */
assert_identical(exec(r'if (10 < 20) return "OK"; else return "ERROR";'), "OK"); /* Statement */

/* Make sure that exec() re-throws an unhandled exception from within */
assert_identical(try ({ exec(r'throw "foobar";'); none; }) catch (e...) e, "foobar");
assert_identical(try ({ exec(r'"foobar";'); none; }) catch (e...) e, none);
assert_identical(try ({ exec(r'"foobar";'); }) catch (e...) e, "foobar");

/* Test the different types of try-blocks in JIT */
assert_identical(exec(r'try ({ throw "Error"; }) catch (...) "OK"'), "OK");
assert_identical(exec(r'try ({ throw "Error"; }) catch (...) "OK";'), "OK");
assert_identical(exec(r'(try ({ throw "Error"; }) catch (...) "OK")'), "OK");
assert_identical(exec(r'(try ({ throw "Error"; }) catch (...) "OK");'), "OK");
assert_identical(exec(r'try { throw "Error"; } catch (...) { "OK"; }'), "OK");
assert_identical(try ({ exec(r'try { throw "1"; } catch (...) { throw "2"; }'); none; }) catch (e...) e, "2");
{
	local glob = Dict({ "in_finally" : false });
	local res = try exec(r"
		try {
			throw 'Error';
		} finally {
			/* Indicate that we got here. */
			in_finally = true;
			return 'OK';
			/* Make sure that we didn't get here. */
			in_finally = false;
		}", globals: glob)
	catch (e...) e;
	/* Ensure that the finally-block was executed correctly */
	assert_identical(glob["in_finally"], true);
	/* Ensure that the outer catch() overwrote the `return "OK"' */
	assert_identical(res, "Error");
}

/* Make sure that return-in-catch causes the exception to be handled */
assert_identical(exec(r'try { ; } catch (...) { return "OK"; }'), none);
assert_identical(exec(r'try { throw "Error"; } catch (...) { return "OK"; }'), "OK");

/* Assert exception nesting behavior in the core compiler. */
assert_identical(({ try { "1"; } finally { "2"; } }), "1");
assert_identical((() -> ({ try { "1"; } finally { "2"; } }))(), "1");
assert_identical((() -> ({ try { "1"; } finally { return "2"; } }))(), "2");
assert_identical((() -> ({ try { return "1"; } finally { "2"; } }))(), "1");
assert_identical((() -> ({ try { return "1"; } finally { return "2"; } }))(), "1");

/* Assert that catch/finally work correctly with return and implicit ast results. */
assert_identical(exec(r'try { return "1"; } catch (...) { return "2"; }'), "1");
assert_identical(exec(r'try { return "1"; } finally { "2"; }'), "1");
assert_identical(exec(r'try { return "1"; } finally { return "2"; }'), "1");
assert_identical(try ({ exec(r'try { return "1"; } finally { throw "ERROR"; }'); none; }) catch (e...) e, "ERROR");
assert_identical(exec(r'try { "1"; } finally { "2"; }'), "1");
assert_identical(exec(r'try { "1"; } finally { return "2"; }'), "2");

assert_identical(exec(r'; if (true) { } else { 42; }'), none);
assert_identical(exec(r'({ ; if (true) { } else { 42; } })'), none);
assert_identical(exec(r'; if (false) { } else { return 42; }'), 42);
assert_identical(exec(r'if (false) { } else { return 42; }'), 42);
assert_identical(exec(r'if (false) ; else { return 42; }'), 42);
assert_identical(exec(r'({ ; if (false) { } else { return 42; } })'), 42);
assert_identical(exec(r'({ ; if (false) ; else { return 42; } })'), 42);
assert_identical(exec(r'({ ; if (false) { } else return 42; })'), 42);
assert_identical(exec(r'({ ; if (false) ; else return 42; })'), 42);
assert_identical(exec(r'({ if (false) { } else { return 42; } })'), 42);
assert_identical(exec(r'({ if (false) ; else { return 42; } })'), 42);
assert_identical(exec(r'({ if (false) { } else return 42; })'), 42);
assert_identical(exec(r'({ if (false) ; else return 42; })'), 42);
//assert_identical(exec(r'if (true) { } else { return 42; }'), none); // Returns '{}' instead of 'none'
assert_identical(exec(r'if (true) ; else { return 42; }'), none);
assert_identical(exec(r'({ ; if (true) { } else { return 42; } })'), none);
assert_identical(exec(r'({ ; if (true) ; else { return 42; } })'), none);
assert_identical(exec(r'({ ; if (true) { } else return 42; })'), none);
assert_identical(exec(r'({ ; if (true) ; else return 42; })'), none);
//assert_identical(exec(r'({ if (true) { } else { return 42; } })'), none); // Returns '{}' instead of 'none'
assert_identical(exec(r'({ if (true) ; else { return 42; } })'), none);
//assert_identical(exec(r'({ if (true) { } else return 42; })'), none); // Returns '{}' instead of 'none'
assert_identical(exec(r'({ if (true) ; else return 42; })'), none);

/* Make sure that `{}' as an expression is an empty sequence,
 * but when encountered in the context of a statement, it evaluates
 * to `none' the same way an empty statement would */
assert exec(r';') is none;
assert exec(r'{}') == [];
assert exec(r';{}') is none;

/* Make sure that both the deemon core compiler, as well
 * as the JIT compiler get the whole cast-vs-in/is/as */
assert 10 is int;
assert 10 in [10];
assert 10 !is none;
assert 10 !in [11];
assert 10 !!!is none;
assert 10 !!!in [11];
assert (10) is int;
assert (10) in [10];
assert (10) !is none;
assert (10) !in [11];
assert (10) !!!is none;
assert (10) !!!in [11];
assert exec(r'10 is int', globals: deemon.__exports__);
assert exec(r'10 in [10]', globals: deemon.__exports__);
assert exec(r'10 !is none');
assert exec(r'10 !in [11]');
assert exec(r'10 !!!is none');
assert exec(r'10 !!!in [11]');
assert exec(r'(10) is int', globals: deemon.__exports__);
assert exec(r'(10) in [10]');
assert exec(r'(10) !is none');
assert exec(r'(10) !in [11]');
assert exec(r'(10) !!!is none');
assert exec(r'(10) !!!in [11]');
{
	local tenasint = 10 as int;
	assert_identical(10 as int, tenasint);
	assert_identical((10) as int, tenasint);
	assert_identical(exec(r'10 as int', globals: deemon.__exports__), tenasint);
	assert_identical(exec(r'(10) as int', globals: deemon.__exports__), tenasint);
}



/* XXX: The real deemon compiler also gets this one wrong:
 *   >> `({ if (true) { } else { 42; } })'
 *
 *   Should evaluate to `none', and could be re-written as one of:
 *   >> `({ if (true) ;   else { 42; } })'
 *   >> `({ if (true) ;   else   42;   })'
 *
 *   During parsing it is not yet known if the hybrid-component will
 *   end up as a statement or as an expression, and as such will default
 *   to parsing components as expressions until a code construct is
 *   encountered that is only allowed inside of a statement, at which
 *   point the remainder of the construct will be parsed as an explicit
 *   statement.
 *
 *   This works very well for all existing code constructs, since expression-
 *   like syntax is always allowed in statements (after all: any expression can
 *   be considered a statement when suffixed by `;'), and statements themself
 *   only add the additional requirement that certain recursive expressions
 *   be interpreted as statements, rather than expression. e.g.:
 *   Expression: if (EXPR) ttEXPR else ffEXPR
 *   Statement:  if (EXPR) ttSTMT else ffSTMT
 *
 *   The problem appears for the following case:
 *   Statement:  if (EXPR) ttEXPR else ffSTMT
 *
 *   In this case, `ttEXPR' is some piece of code that is valid as both an
 *   expression, as well as a statement (`{}' is one such construct, though
 *   there are others such as `if (foo) {} else {}', or `for (local x: y) {}')
 *
 *   In all of these cases, the construct can be converted from what could
 *   initially have been an expression, into something that later ends up
 *   a statement:
 *
 *   #1>> ({ if (foo) for (local x: bar) {} else { baz } })
 *   #2>> ({ if (foo) for (local x: bar) {} else { baz; } })
 *
 *   Line #1 is correctly parsed as an expression:
 *       Sequence({
 *          If(cc: Variable("foo"),
 *             tt: Call(self: Function(name: "<anonymous>"
 *                                     locl: { "x" },
 *                                     body: Foreach(iter: Variable("x"),
 *                                                   seq:  Variable("bar"),
 *                                                   body: Yield(expr: Sequence({})))),
 *                      args: Constant(Tuple {})),
 *             ff: Sequence({ Variable("baz") }))
 *       })
 *   Or in other words:
 *       { foo ? () -> { for (local x: bar) yield {}; }() : { baz } }
 *
 *   Line #2 should be parsed as:
 *       { if (foo) { for (local x: bar); } else { baz; }; }
 *   But is actually parsed as:
 *       { if (foo) { () -> { for (local x: bar) yield {}; }(); } else { baz; }; }
 *
 *   The problem here is that the compiler can't easily go back and re-parse
 *   some piece of code in the context of a statement, after already having parsed
 *   it in the context of an expression.
 *   With a lot of work, this could be fixed by selectively transforming already-
 *   parsed code components to produce the equivalent of having parsed them as
 *   statements from the beginning.
 *   However, such a fix would be highly prone to errors caused by incorrectly
 *   re-interpreting already generated ASTs, meaning that ASTs would also need
 *   to be given meta-data that can explain exactly how the AST was generated,
 *   so-as to know if and when it should be transformed.
 *
 *   The JIT compiler could fairly easily fix this problem by pre-scanning every
 *   hybrid construct ahead of time in order to determine if it's a statement, or
 *   if it's an expression, before actually committing to evaluating only after.
 *   Though this would still introduce a lot of (usually completely unnecessary)
 *   overhead.
 */
{
	local a = ({ if (true) { } else { 42; } });
	local b = exec(r'({ if (true) { } else { 42; } })');
	local c = exec(r'if (true) { } else { 42; }');
	assert_identical(b, c);
	if (a is none) {
		/* This would be correct */
		assert b is none;
	} else {
		/* This is the current behavior, which isn't entirely correct,
		 * but should at least be consistent between the real compiler,
		 * and the JIT compiler. */
		a = Tuple(a);
		b = Tuple(b);
		assert_identical(a, b);
		/* assert false; */
	}
}

/* Also make sure that the behavior is consistently correct when
 * the compilers are faced with situations where it is clear that
 * a piece of code is a statement, rather than an expression. */
{
	local a = ({ ;if (true) { } else { 42; } });
	local b = exec(r'({ ;if (true) { } else { 42; } })');
	local c = exec(r';if (true) { } else { 42; }');
	assert a is none;
	assert b is none;
	assert c is none;
}


/* Ensure that catch-masks work with JIT expression. */
local CATCHSOME = r'catch (int) { "1int"; } catch (string) { "2string"; } catch (...) { "?"; }';
assert_identical(exec(r'try { throw 42; }' + CATCHSOME, globals: deemon.__exports__), "1int");
assert_identical(exec(r'try { throw "foo"; }' + CATCHSOME, globals: deemon.__exports__), "2string");
assert_identical(exec(r'try { throw none; }' + CATCHSOME, globals: deemon.__exports__), "?");
assert_identical(exec(r'try { throw false; }' + CATCHSOME, globals: deemon.__exports__), "?");

/* Ensure that multi-catch masks work in JIT */
local CATCHSOME = r'catch (int | string as s) { "int_or_string(" + s + ")"; } catch (...) { "?"; }';
assert_identical(exec(r'try { throw 42; }' + CATCHSOME, globals: deemon.__exports__), "int_or_string(42)");
assert_identical(exec(r'try { throw "foo"; }' + CATCHSOME, globals: deemon.__exports__), "int_or_string(foo)");
assert_identical(exec(r'try { throw none; }' + CATCHSOME, globals: deemon.__exports__), "?");
assert_identical(exec(r'try { throw false; }' + CATCHSOME, globals: deemon.__exports__), "?");
local CATCHSOME = r'catch (int | string | bool as s) { "int_or_string_or_bool(" + s + ")"; } catch (...) { "?"; }';
assert_identical(exec(r'try { throw 42; }' + CATCHSOME, globals: deemon.__exports__), "int_or_string_or_bool(42)");
assert_identical(exec(r'try { throw "foo"; }' + CATCHSOME, globals: deemon.__exports__), "int_or_string_or_bool(foo)");
assert_identical(exec(r'try { throw none; }' + CATCHSOME, globals: deemon.__exports__), "?");
assert_identical(exec(r'try { throw false; }' + CATCHSOME, globals: deemon.__exports__), "int_or_string_or_bool(false)");

/* Also make sure that catch-as works */
assert_identical(exec(r'try { throw "foo"; } catch (string as s) { s + "bar"; }', globals: deemon.__exports__), "foobar");
assert_identical(exec(r'try { throw "foo"; } catch (string s) { s + "bar"; }', globals: deemon.__exports__), "foobar");
assert_identical(exec(r'try { throw "foo"; } catch (s...) { s + "bar"; }', globals: deemon.__exports__), "foobar");
assert_identical(exec(r'try { throw "foo"; } catch (...s) { s + "bar"; }', globals: deemon.__exports__), "foobar");
assert_identical(exec(r'try { throw "foo"; } catch (...) { 42; }', globals: deemon.__exports__), 42);

/* Make sure that the JIT compiler can call into itself recursively */
assert_identical(exec(r'exec("\"inner\"")', globals: deemon.__exports__), "inner");
assert_identical(exec(r'exec("\"inner\";")', globals: deemon.__exports__), "inner");
assert_identical(exec(r'exec("\"inner\"");', globals: deemon.__exports__), "inner");
assert_identical(exec(r'exec("\"inner\";");', globals: deemon.__exports__), "inner");
assert_identical(exec(r'exec("\"inner\";;");', globals: deemon.__exports__), none);
assert_identical(exec(r'exec("\"inner\";");;', globals: deemon.__exports__), none);


/* Check various forms of expand expressions in JIT */
assert_identical(exec(r'["foobar"]'), ["foobar"]);
assert_identical(exec(r'("foobar")'), "foobar");
assert_identical(exec(r'("foobar",)'), Tuple({ "foobar" }));
assert_identical(exec(r'()'), Tuple({ }));
assert_identical(exec(r'["f"]'), ["f"]);
assert_identical(exec(r'["f"...]'), ["f"]);
assert_identical(exec(r'["foobar"...]'), ["f", "o", "o", "b", "a", "r"]);
assert_identical(exec(r'["foobar"..., 10]'), ["f", "o", "o", "b", "a", "r", 10]);
assert_identical(exec(r'[20, "foobar"..., 10]'), [20, "f", "o", "o", "b", "a", "r", 10]);
assert_identical(exec(r'("f")'), "f");
assert_identical(exec(r'("f"...)'), Tuple({ "f" })); /* Despite only being 1 element, this must still result in a Tuple */
assert_identical(exec(r'("foobar"...)'), Tuple({ "f", "o", "o", "b", "a", "r" }));
assert_identical(exec(r'("foobar"..., 10)'), Tuple({ "f", "o", "o", "b", "a", "r", 10 }));
assert_identical(exec(r'(20, "foobar"..., 10)'), Tuple({ 20, "f", "o", "o", "b", "a", "r", 10 }));
{
	local seq = { [10], [20] };
	/* Without a forced expand, this should be a no-op */
	exec(r'seq.each.insert(0, "f");', globals: { "seq" : seq });
	assert seq == { [10], [20] };
	/* With a forced expand, "f" should be inserted into each list */
	exec(r'seq.each.insert(0, "f")...;', globals: { "seq" : seq });
	assert seq == { ["f", 10], ["f", 20] };
}

/* Also assert use of expand in argument lists. */
{
	function getArgv(args...) -> args;
	function r(s) -> exec(s, globals: { "getArgv" : getArgv });
	assert_identical(r(r'getArgv("f")'), Tuple({ "f" }));
	assert_identical(r(r'getArgv("f"...)'), Tuple({ "f" }));
	assert_identical(r(r'getArgv("foobar"...)'), Tuple({ "f", "o", "o", "b", "a", "r" }));
	assert_identical(r(r'getArgv("foobar"..., 10)'), Tuple({ "f", "o", "o", "b", "a", "r", 10 }));
	assert_identical(r(r'getArgv(20, "foobar"..., 10)'), Tuple({ 20, "f", "o", "o", "b", "a", "r", 10 }));
}


/* Ensure that sequence sum/min/max  */
assert ([10, 20, 30] + ...) == 60;
assert ([10, 20, 30] < ...) == 10;
assert ([10, 20, 30] > ...) == 30;
assert exec("[10, 20, 30] + ...") == 60;
assert exec("[10, 20, 30] < ...") == 10;
assert exec("[10, 20, 30] > ...") == 30;
assert exec("([10, 20, 30] + ...)") == 60;
assert exec("([10, 20, 30] < ...)") == 10;
assert exec("([10, 20, 30] > ...)") == 30;
assert exec("([10, 20, 30] + ...) == 60");
assert exec("([10, 20, 30] < ...) == 10");
assert exec("([10, 20, 30] > ...) == 30");
/* Not really recommended you do this, but operator
 * priorities put `==' above +, < and >, so just to
 * make sure that's also working, also test without
 * the parens. */
assert [10, 20, 30] + ... == 60;
assert [10, 20, 30] < ... == 10;
assert [10, 20, 30] > ... == 30;
assert 60 == [10, 20, 30] + ...;
assert 10 == [10, 20, 30] < ...;
assert 30 == [10, 20, 30] > ...;
assert exec("[10, 20, 30] + ... == 60");
assert exec("[10, 20, 30] < ... == 10");
assert exec("[10, 20, 30] > ... == 30");
assert exec("60 == [10, 20, 30] + ...");
assert exec("10 == [10, 20, 30] < ...");
assert exec("30 == [10, 20, 30] > ...");

assert ({10, 20, 30}) + ... == 60;
assert ({10, 20, 30} + ...) == 60;
assert exec("({10, 20, 30}) + ... == 60");
assert exec("({10, 20, 30} + ...) == 60");
assert exec("{10, 20, 30} + ...") == 60;
assert exec("({10, 20, 30}) + ...") == 60;
assert exec("({10, 20, 30}) + ...") == 60;
assert exec("(({10, 20, 30}) + ...)") == 60;


assert_identical(42, exec(r'local outer: int from deemon = 42; x -> outer;')(none));
assert_identical(42, exec(r'local outer: int from deemon = 42; x -> x -> outer;')(none)(none));
assert_identical(42, exec(r'local outer: int from deemon = 42; x -> { return outer; };')(none));
assert_identical(42, exec(r'local outer: int from deemon = 42; x -> { return x -> outer; };')(none)(none));
assert_identical(42, exec(r'local outer: int from deemon = 42; x -> { return x -> { return outer; }; };')(none)(none));
assert_identical(42, exec(r'local outer: int from deemon = 42; (x) -> outer;')(none));
assert_identical(42, exec(r'local outer: int from deemon = 42; (x) -> (x) -> outer;')(none)(none));
assert_identical(42, exec(r'local outer: int from deemon = 42; (x) -> { return outer; };')(none));
assert_identical(42, exec(r'local outer: int from deemon = 42; (x) -> { return (x) -> outer; };')(none)(none));
assert_identical(42, exec(r'local outer: int from deemon = 42; (x) -> { return (x) -> { return outer; }; };')(none)(none));
assert_identical(42, exec(r'local outer: int from deemon = 42; () -> outer;')());
assert_identical(42, exec(r'local outer: int from deemon = 42; () -> () -> outer;')()());
assert_identical(42, exec(r'local outer: int from deemon = 42; () -> { return outer; };')());
assert_identical(42, exec(r'local outer: int from deemon = 42; () -> { return () -> outer; };')()());
assert_identical(42, exec(r'local outer: int from deemon = 42; () -> { return () -> { return outer; }; };')()());


/* Bracket-style lambdas with immediate return type annotation
 * This syntax has an ambiguity with the ?-operator, so we assert
 * that it gets handled correct by both the main compiler and JIT
 */
local v = true ? [] : int -> 42;    /* true ? ([](): int { return 42 }) : none */
local w = true ? ([]) : int -> 42;  /* true ? List({}) : ([](int) { return 42 }) */
assert v is Callable;
assert w !is Callable;
assert_identical(v(), 42);
assert_identical(w, []);

local v = exec(r'true ? [] : int -> 42');
//FIXME:local w = exec(r'true ? ([]) : int -> 42');
assert v is Callable;
assert w !is Callable;
assert_identical(v(), 42);
assert_identical(w, []);


/* Assert that the JIT compiler correctly handles
 * expression vs. statement in comma lists. */
assert exec(r'({ 10, 20, 30 })') == {10,20,30};
assert_identical(exec(r'({ 10, 20, 30; })'), 30);



