#!/usr/bin/deemon
/* Copyright (c) 2018-2025 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2025 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

function foo() {
	local myVar = "value";
	for (;;) {
		yield myVar;
		/* This __asm__ is needed so the optimizer doesn't inline "myVar" */
		__asm__("" : "+l" (myVar));
	}
}
local it = foo().operator iter();

assert it.operator next() == "value";
assert it.operator next() == "value";
assert it.operator next() == "value";

/* Use DDI and frame introspection to override the value of "myVar".
 * This sort of functionality is actually meant for debuggers, but
 * here we just test that it actually works. */
{
	local symbols = it.__frame__.__symbols__;
	assert symbols["myVar"] == "value";
	symbols["myVar"] = 42;
	assert symbols["myVar"] == 42;
}

assert it.operator next() == 42;
assert it.operator next() == 42;
assert it.operator next() == 42;
