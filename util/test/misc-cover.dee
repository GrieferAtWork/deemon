#!/usr/bin/deemon
/* Copyright (c) 2018-2024 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2024 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

import * from deemon;
import * from errors;
import * from collections;

{
	local x = Dict {
		"foo" : "bar",
		11 : 22
	};
	local map_reprs = {
		'{ "foo": "bar", 11: 22 }',
		'{ 11: 22, "foo": "bar" }',
		'Dict { "foo": "bar", 11: 22 }',
		'Dict { 11: 22, "foo": "bar" }',
		'Dict({ "foo": "bar", 11: 22 })',
		'Dict({ 11: 22, "foo": "bar" })',
		'Dict.Frozen { "foo": "bar", 11: 22 }',
		'Dict.Frozen { 11: 22, "foo": "bar" }',
		'Dict.Frozen({ "foo": "bar", 11: 22 })',
		'Dict.Frozen({ 11: 22, "foo": "bar" })',
		'Dict({ "foo": "bar", 11: 22 }).frozen',
		'Dict({ 11: 22, "foo": "bar" }).frozen',
	};
	local seq_reprs = {
		'{ ["foo", "bar"], [11, 22] }',
		'{ [11, 22], ["foo", "bar"] }',
		'{ ("foo", "bar"), (11, 22) }',
		'{ (11, 22), ("foo", "bar") }',
		'{ { "foo", "bar" }, { 11, 22 } }',
		'{ { 11, 22 }, { "foo", "bar" } }',
		'(["foo", "bar"], [11, 22])',
		'([11, 22], ["foo", "bar"])',
		'(("foo", "bar"), (11, 22))',
		'((11, 22), ("foo", "bar"))',
		'({ "foo", "bar" }, { 11, 22 })',
		'({ 11, 22 }, { "foo", "bar" })',
		'[["foo", "bar"], [11, 22]]',
		'[[11, 22], ["foo", "bar"]]',
		'[("foo", "bar"), (11, 22)]',
		'[(11, 22), ("foo", "bar")]',
		'[{ "foo", "bar" }, { 11, 22 }]',
		'[{ 11, 22 }, { "foo", "bar" }]',
	};
	local key_reprs = {
		'{ "foo", 11 }',
		'{ 11, "foo" }',
		'("foo", 11)',
		'(11, "foo")',
		'["foo", 11]',
		'[11, "foo"]',
	};
	local value_reprs = {
		'{ "bar", 22 }',
		'{ 22, "bar" }',
		'("bar", 22)',
		'(22, "bar")',
		'["bar", 22]',
		'[22, "bar"]',
	};
	function check_mapping(x) {
		assert repr(x) in map_reprs;
		assert repr(x as Mapping) in map_reprs;
		assert repr(x as Sequence) in seq_reprs;
		assert repr(x.items) in seq_reprs;
		assert repr(x.items as Sequence) in seq_reprs;
		assert repr(x.keys) in key_reprs;
		assert repr(x.keys as Sequence) in key_reprs;
		assert repr(x.values) in value_reprs;
		assert repr(x.values as Sequence) in value_reprs;
		assert x.keys is x.class.Keys;
		assert x.values is x.class.Values;
		assert x.iterkeys is x.class.IterKeys;
		assert x.itervalues is x.class.IterValues;
		assert x.keys.operator iter() is x.class.IterKeys;
		assert x.keys.operator iter() is x.class.Keys.Iterator;
		assert x.values.operator iter() is x.class.IterValues;
		assert x.values.operator iter() is x.class.Values.Iterator;
		assert x.get("foo") == "bar";
		assert x.get(11) == 22;
		assert x.get("MISSING") === none;
		assert x.get("MISSING", true) === true;
		assert x.get("MISSING", false) === false;
	}
	function check_iterators(x) {
		(none)str(x);
		(none)repr(x);
		assert x is Sequence;
		local a = x.operator iter();
		assert a is Iterator, str type a;
		local b = x.operator iter();
		assert a == b;
		assert !(a != b);
		assert !(a > b);
		assert !(a < b);
		assert a >= b;
		assert a <= b;
		if (x) {
			assert a;
			assert copy a;
			b.operator next();
			assert a != b;
			assert !(a == b);
			assert !(a > b),
				"{}: {}, {} -- {}, {}".format({
					try repr(x) catch (...) "NO REPR",
					type(a),
					type(b),
					try repr(a) catch (...) "NO REPR",
					try repr(b) catch (...) "NO REPR",
				});
			assert !(a >= b);
			assert a < b;
			assert a <= b;
		}
	}
	function check_iterators_cast(x) {
		check_iterators(x);
		check_iterators(Tuple(x));
		check_iterators(List(x));
		check_iterators(List(x).frozen);
		check_iterators(HashSet(x));
		check_iterators(HashSet(x).frozen);
		check_iterators(Deque(x));
		check_iterators(Deque(x).frozen);
		if (x is Mapping) {
			/* Special case: FixedList() interprets mappings by using keys as indices. */
			check_iterators(FixedList(x.items));
			check_iterators(FixedList(x.items).frozen);
		} else {
			check_iterators(FixedList(x));
			check_iterators(FixedList(x).frozen);
		}
		check_iterators(UniqueSet(x));
		check_iterators(UniqueSet(x).frozen);
	}
	function check_generic_sequence(x) {
		check_iterators(x);
	}
	function check_generic_set(x) {
		check_iterators(x);
	}
	local split_markers = {
		"",
		"|",
		",",
		"A",
		"b",
		"oo",
		"{}",
		"}{",
		"a8rochrb",
	};
	local builtin_codecs = {
		"ascii",
		"backslash-escape",
		"latin-1",
		"utf-8",
	};
	function check_string(x) {
		check_iterators(x);
		for (local s: split_markers) {
			check_generic_sequence(x.split(s));
			check_generic_sequence(x.casesplit(s));
			check_generic_sequence(x.findall(s));
			check_generic_sequence(x.casefindall(s));
		}
		check_generic_sequence(x.scanf("%s"));
		check_generic_sequence(x.scanf(" %s"));
		for (local r: [1:8])
			check_generic_sequence(x.segments(r));
		check_generic_sequence(x.splitlines(true));
		check_generic_sequence(x.splitlines(false));
		if (x is string) {
			for (local pattern: [
				r"\|",
				r"assert?",
			]) {
				check_generic_sequence(x.refindall(pattern));
				check_generic_sequence(x.relocateall(pattern));
				check_generic_sequence(x.resplit(pattern));
			}
		}
	}

	assert x is Dict;
	assert x.frozen is Dict.Frozen;
	assert type(x) == Dict;
	assert type(x.frozen) == Dict.Frozen;
	check_mapping(x);
	check_mapping(x as Mapping);
	check_mapping(x.frozen);
	check_mapping((x as Mapping).frozen);

	check_iterators_cast(x);
	check_iterators_cast(x.keys);
	check_iterators_cast(x.values);
	check_iterators_cast(x.items);
	check_iterators_cast(x.frozen);
	check_iterators_cast(x.frozen.keys);
	check_iterators_cast(x.frozen.values);
	check_iterators_cast(x.frozen.items);
	check_iterators_cast((x as Mapping).frozen);
	check_iterators_cast((x as Mapping).frozen.keys);
	check_iterators_cast((x as Mapping).frozen.values);
	check_iterators_cast((x as Mapping).frozen.items);
	local strings = {
		"",
		"123",
		"foobar",
		"barfoo",
		"1234567890",
		"a8rochrb sq3duw9owx vsozqogcoabap295 azq",
		"a8rochrb sq3duw9owx vsozqogcoabap295 azq"
		"a8rochrb sq3duw9owx vsozqogcoabap295 azq"
		"a8rochrb sq3duw9owx vsozqogcoabap295 azq"
		"a8rochrb sq3duw9owx vsozqogcoabap295 azq"
		"a8rochrb sq3duw9owx vsozqogcoabap295 azq",
		"AbCCAUssdagOASFDAFhlhASTOHAfhfdhasufdh&&&A/",
		string(File.open(__FILE__).read().decode("ascii")).substr(0, 1024)
	};

	for (local s: strings) {
		for (local c: builtin_codecs) {
			local enc = s.encode(c);
			check_string(enc);
			assert enc.decode(c) == s;
		}
		check_string(s);
		check_string(s.bytes());
		check_generic_sequence(s.ordinals);
		check_generic_sequence(s as Sequence);
		check_generic_sequence(s.bytes() as Sequence);
		check_generic_sequence(s.ordinals as Sequence);
		local character_tuple = Tuple(s);
		local bytes_tuple = Tuple(s.bytes());
		local ord_tuple = Tuple(s.ordinals);
		check_generic_sequence(character_tuple);
		check_generic_sequence(character_tuple as Sequence);
		check_generic_sequence(bytes_tuple);
		check_generic_sequence(bytes_tuple as Sequence);
		check_generic_sequence(ord_tuple);
		check_generic_sequence(ord_tuple as Sequence);
		check_generic_sequence(List(character_tuple));
		check_generic_sequence(List(character_tuple) as Sequence);
		check_generic_sequence(List(bytes_tuple));
		check_generic_sequence(List(bytes_tuple) as Sequence);
		check_generic_sequence(List(ord_tuple));
		check_generic_sequence(List(ord_tuple) as Sequence);
		check_generic_set(HashSet(character_tuple));
//		check_generic_set(HashSet(character_tuple) as Set);
		check_generic_set(HashSet(bytes_tuple));
//		check_generic_set(HashSet(bytes_tuple) as Set);
		check_generic_set(HashSet(ord_tuple));
//		check_generic_set(HashSet(ord_tuple) as Set);
		check_generic_sequence(Deque(character_tuple));
		check_generic_sequence(Deque(character_tuple) as Sequence);
		check_generic_sequence(Deque(bytes_tuple));
		check_generic_sequence(Deque(bytes_tuple) as Sequence);
		check_generic_sequence(Deque(ord_tuple));
		check_generic_sequence(Deque(ord_tuple) as Sequence);
		check_generic_sequence(FixedList(character_tuple));
		check_generic_sequence(FixedList(character_tuple) as Sequence);
		check_generic_sequence(FixedList(bytes_tuple));
		check_generic_sequence(FixedList(bytes_tuple) as Sequence);
		check_generic_sequence(FixedList(ord_tuple));
		check_generic_sequence(FixedList(ord_tuple) as Sequence);
	}
	local mb_strings = {
		"\u1234",
		"\u1234\u4321",
		"\U12345678",
		"\U12345678\U87654321",
	};

	for (local s: mb_strings) {
		for (local c: builtin_codecs) {
			if (c in ["ascii", "latin-1"])
				continue;
			local enc = s.encode(c);
			check_string(enc);
			assert enc.decode(c) == s;
		}
		check_string(s);
		check_generic_sequence(s.ordinals);
		check_generic_sequence(s as Sequence);
		check_generic_sequence(s.ordinals as Sequence);
		local character_tuple = Tuple(s);
		local ord_tuple = Tuple(s.ordinals);
		check_generic_sequence(character_tuple);
		check_generic_sequence(character_tuple as Sequence);
		check_generic_sequence(ord_tuple);
		check_generic_sequence(ord_tuple as Sequence);
		check_generic_sequence(List(character_tuple));
		check_generic_sequence(List(character_tuple) as Sequence);
		check_generic_sequence(List(ord_tuple));
		check_generic_sequence(List(ord_tuple) as Sequence);
		check_generic_set(HashSet(character_tuple));
//		check_generic_set(HashSet(character_tuple) as Set);
		check_generic_set(HashSet(ord_tuple));
//		check_generic_set(HashSet(ord_tuple) as Set);
		check_generic_sequence(Deque(character_tuple));
		check_generic_sequence(Deque(character_tuple) as Sequence);
		check_generic_sequence(Deque(ord_tuple));
		check_generic_sequence(Deque(ord_tuple) as Sequence);
		check_generic_sequence(FixedList(character_tuple));
		check_generic_sequence(FixedList(character_tuple) as Sequence);
		check_generic_sequence(FixedList(ord_tuple));
		check_generic_sequence(FixedList(ord_tuple) as Sequence);
	}
}


import("rt.builtins");


{
	function t(T) {
		local i = T();
		repr i;
		copy i;
		deepcopy i;
		if (i) {}
		local itT = T.Iterator;
		local iti = itT();
		repr iti;
		local iti2 = copy iti;
		assert iti == iti2;
		assert !(iti != iti2);
		assert !(iti < iti2);
		assert !(iti > iti2);
		assert iti <= iti2;
		assert iti >= iti2;
		deepcopy iti;
		iti = i.operator iter();
		iti2 = itT(i);
		assert iti == iti2;
		assert !(iti != iti2);
		assert !(iti < iti2);
		assert !(iti > iti2);
		assert iti <= iti2;
		assert iti >= iti2;
	}
	import * from rt;
	t(SeqCombinations);
	t(SeqRepeatCombinations);
	t(SeqPermutations);
}
