#!/usr/bin/deemon
/* Copyright (c) 2018-2024 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2024 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */
import * from deemon;

function outer() {
	function foo(arg1, arg2) {
		static local static1 = arg2;
		if (arg1 == 7)
			yield outer;
		yield static1;
	}
	return foo;
}

local foo = outer()(7, 8);

assert (foo.__symbols__.keys as Set) == { "static1", "arg1", "arg2", "outer" };
assert (foo.__symbols__.items.each.first as Set) == { "arg1", "arg2", "outer" },
	"Because 'static1' is unbound, it only appears as a valid key, but in 'items'";

assert foo.__symbols__ == { "arg1": 7, "arg2": 8, "outer": outer };
foo...;
assert foo.__symbols__ == { "arg1": 7, "arg2": 8, "outer": outer, "static1": 8 };
assert (foo.__symbols__.keys as Set) == { "static1", "arg1", "arg2", "outer" };

local x = foo.operator iter();
assert x.__frame__.__args__ == {7,8};
assert #x.__frame__.__args__ == 2;
assert x.__frame__.__args__[0] == 7;
assert x.__frame__.__args__[1] == 8;
