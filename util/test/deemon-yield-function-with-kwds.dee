/* Copyright (c) 2018-2024 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2024 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

import * from deemon;

function _hide(x) {
	local result = x;
	__asm__("" : "+X" (result));
	return result;
}

@[copyable]
function foo(**kwds) {
	yield kwds[_hide("a")];
	yield kwds[_hide("b")];
}

@[copyable]
function bar(a, b) {
	yield a;
	yield b;
}

function getKwds() {
	local x = _hide(Dict());
	x["a"] = (_hide(10),);
	x["b"] = (_hide(20),);
	return x;
}

function assertCorrectSequence(call) {
	/* Assert that enumerating the yield functions works (even when copied) */
	assert (call as Sequence) == {(10,), (20,)};
	assert (copy(call) as Sequence) == {(10,), (20,)};
	assert (deepcopy(call) as Sequence) == {(10,), (20,)};
	assert call == {(10,), (20,)};
	assert copy(call) == {(10,), (20,)};
	assert deepcopy(call) == {(10,), (20,)};

	/* Assert that operating directly with the iterators also works (including
	 * the case where we make copies of the iterators half-way through the call) */
	local it = call.operator iter();
	assert it.pending == {(10,), (20,)};
	assert it.pending == {};
	local it = call.operator iter();
	assert it.operator next() == (10,);
	local it2 = copy it;
	assert it.pending == {(20,)};
	assert it.pending == {};
	assert it2.pending == {(20,)};
	assert it2.pending == {};
}

/* Invoke both keyword-taking yield functions
 * with the 2 main keyword argument variants */
assertCorrectSequence(foo(a: (_hide(10),), b: (_hide(20),)));
assertCorrectSequence(bar(a: (_hide(10),), b: (_hide(20),)));
assertCorrectSequence(foo(**getKwds()));
assertCorrectSequence(bar(**getKwds()));
