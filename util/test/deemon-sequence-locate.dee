#!/usr/bin/deemon
/* Copyright (c) 2018-2025 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2025 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */


local x = { 10, 20, 7, 19, 55, 56, 3, 5 };

assert 55 == x.locate(v -> v >= 30);
assert 56 == x.rlocate(v -> v >= 30);
assert 7 == x.locate(v -> v < 10);
assert 5 == x.rlocate(v -> v < 10);

assert 3 == x.locate(v -> v < 10, start: 3);
assert 3 == x.locate(v -> v < 10, start: 3, end: 7);
assert 3 == x.locate(v -> v < 10, start: 3, end: 8);
assert 5 == x.rlocate(v -> v < 10, start: 3);
assert 3 == x.rlocate(v -> v < 10, start: 3, end: 7);
assert 5 == x.rlocate(v -> v < 10, start: 3, end: 8);

assert x.locate(v -> v > 100) is none;
assert x.rlocate(v -> v > 100) is none;
assert x.locate(v -> v == 10, start: 1) is none;
assert x.rlocate(v -> v == 10, start: 1) is none;
assert "oops" == x.locate(v -> v > 100, def: "oops");
assert "oops" == x.rlocate(v -> v > 100, def: "oops");

/* there is no "locateall" because "filter" does the same */
assert {55, 56} == x.filter(v -> v >= 30);
