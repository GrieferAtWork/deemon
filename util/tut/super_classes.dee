#!/usr/bin/deemon
/* Copyright (c) 2018 Griefer@Work                                            *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement in the product documentation would be  *
 *    appreciated but is not required.                                        *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

/* Super classes are pretty straight forward.
 * And unlike other languages, deemon has a dedicated
 * syntax for references to super classes */
class a {
	call_foo() {
		/* Calling an overwritten function from a derived class */
		this.foo();
	}
	foo() {
		print type this,"--","a::foo()";
	}
};
class b: a {
	foo() {
		print type this,"--","b::foo()";
		/* Call a method from another base
		 * Note how we don't have to explicitly state
		 * which base class should be used
		 * WARNING: If you would write 'this.super.foo()',
		 *          you would once again call b::foo,
		 *          as 'this' is an instance of 'c'
		 * Internally, this super is replaced with
		 * the commented out line, where 'a' is a
		 * copy of the exprast used to declare the base
		 * of the active class above ('class b: a'). */
		super.foo();
		/* (this as a).foo(); */
	}
};
class c: b {
	/* Member functions have two implicit attributes:
	 * The following would be defined as: [[thiscall,super(b)]]
	 * The super attribute states which class super references should link to */
	foo() {
		print type this,"--","c::foo()";
		/* Call a method from the base class */
		super.foo();
	}
};

ob = c();
ob.call_foo();

