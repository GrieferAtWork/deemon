#!/usr/bin/deemon
/* Copyright (c) 2019 Griefer@Work                                            *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement in the product documentation would be  *
 *    appreciated but is not required.                                        *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */


@"({string...} fields)->type"
@"Returns a tuple-like sequence type that where tuple indices can"
@"also be accessed as attributes, using the given @fields as names"
function nametuple(fields) {
	import sequence, tuple, mapping from deemon;
	local num_fields = #fields;
	class NameTuple: sequence {
		private m_values;
		this(init) {
			/* XXX: keyword arguments? */
			if (init is mapping) {
				m_values = tuple.unpack(num_fields,
					for (local name: fields) init[name]);
			} else {
				m_values = tuple.unpack(num_fields,init);
			}
		}
		operator [] (index) -> m_values[index];
		operator [:] (start,end) -> m_values[start:end];
		operator . (name) -> m_values[fields.index(name)];
		operator # () -> num_fields;
		operator contains(ob) -> ob in m_values;
		operator for() {
			for (local x: m_values)
				yield x;
		}
		operator repr() -> repr m_values;
	};
	return NameTuple;
}


#ifdef __MAIN__

local point = nametuple({ "x", "y" });

local x = point({ 10, 20 });

print repr x;
print x.x;
print x.y;

#endif



