#!/usr/bin/deemon
/* Copyright (c) 2018-2023 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2023 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

/* A little bit of hacking to demonstrate, that I
 * even thought of little cornercases like these.
 * - This works by creating a partially-executed
 *   yield function that is forced to execute
 *   a finally block (containing the actual code)
 *   once it gets destroyed. */
#define __destructor_callback{code...}\
({\
	__stack local __r = (function() {\
		try {\
			yield none;\
		} finally {\
			code\
		}\
	})().__iterself__();\
	__r.__iternext__();\
	__r;\
})

x = __destructor_callback {
	print "In destructor";
	// v Just to show what happens to
	//   exceptions in destructors
	throw "nope!";
};
print "a";
del x;
print "b";























