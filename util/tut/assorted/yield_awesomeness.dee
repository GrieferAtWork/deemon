#!/usr/bin/deemon
/* Copyright (c) 2018-2025 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2025 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

function yfunc(x) {
	print "yfunc("+str x+"): Entered";
	try {
		for (;;) {
			print "yfunc("+str x+"): yielding:", x;
			/* Yield may never return if the iterator is destroyed. */
			yield x;
		}
	} finally {
		/* Finally always get's executed, even if the iterator is destroyed. */
		print "yfunc("+str x+"): in finally";
	}
}

print "Creating generator";
generator = yfunc(42);
print "Creating iterator";
iterator = generator.operator iter();
print "Begin iteration";

/* Read a whole bunch of stuff from 'yfunc' */
print "Received:", iterator.operator next();
print "Received:", iterator.operator next();
print "Received:", iterator.operator next();
print "Received:", iterator.operator next();
print "Received:", iterator.operator next();

/* Multiple execution object of the same function */
iterator2 = generator.operator iter();

/* Kick-start the second iterator */
print "Received:", iterator2.operator next();
del iterator2; /* Will print the finally message */
del iterator;  /* Will print a second finally message */

