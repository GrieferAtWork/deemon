#!/usr/bin/deemon
/* Copyright (c) 2018 Griefer@Work                                            *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement in the product documentation would be  *
 *    appreciated but is not required.                                        *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

#if !__has_feature(__exceptions__)
#error Your distribution of deemon seems to have exceptions disabled \
       Without them, this file won't work, so don't even bother... \
       To fix this, set 'DEE_CONFIG_LANGUAGE_HAVE_EXCEPTIONS' in <deemon/__conf.inl>
#endif


function yfunc(x) {
	print __FUNCTION__ "("+str x+"): Entered";
	try {
		while (1) {
			print __FUNCTION__ "("+str x+"): yielding:",x;
			// Yield may never return if the iterator is destroyed.
			yield x;
		}
	} finally {
		// Finally always get's executed, even if the iterator is destroyed.
		print __FUNCTION__ "("+str x+"): in finally";
	}
}

print "Creating generator";
generator = yfunc(42);
print "Creating iteartor";
iterator = generator.__iterself__();
print "Begin iteration";

// Read a whole bunch of stuff from 'yfunc'
print "Received:",iterator.__iternext__();
print "Received:",iterator.__iternext__();
print "Received:",iterator.__iternext__();
print "Received:",iterator.__iternext__();
print "Received:",iterator.__iternext__();

// Multiple execution object of the same function
iterator2 = generator.__iterself__();

// Kick-start the second iterator
print "Received:",iterator2.__iternext__();
del iterator2; // Will print the finally message
del iterator; // Will print another finally message

