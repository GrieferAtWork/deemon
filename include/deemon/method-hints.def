/* Copyright (c) 2018-2025 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2025 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

/* Define a type method hint function */
#ifndef Dee_DEFINE_TYPE_METHOD_HINT_FUNC
#define Dee_DEFINE_TYPE_METHOD_HINT_FUNC(attr, Treturn, cc, func_name, params)
#endif /* !Dee_DEFINE_TYPE_METHOD_HINT_FUNC */

/* Define a type method hint attribute (which can reference 1-N hint functions) */
#ifndef Dee_DEFINE_TYPE_METHOD_HINT_ATTR
#define Dee_DEFINE_TYPE_METHOD_HINT_ATTR(attr_name, method_name, wrapper_flags, doc, wrapper_params)
#endif /* !Dee_DEFINE_TYPE_METHOD_HINT_ATTR */

#define Dee_DEFINE_TYPE_METHOD_HINT_METHOD_EX(attr_name, method_name, flags, doc) \
	Dee_DEFINE_TYPE_METHOD_HINT_ATTR(attr_name, method_name, flags, doc, (DeeObject *self, size_t argc, DeeObject *const *argv))
#define Dee_DEFINE_TYPE_METHOD_HINT_KWMETHOD_EX(attr_name, method_name, flags, doc) \
	Dee_DEFINE_TYPE_METHOD_HINT_ATTR(attr_name, method_name, (flags) | Dee_TYPE_METHOD_FKWDS, doc, (DeeObject * self, size_t argc, DeeObject *const *argv, DeeObject *kw))
#define Dee_DEFINE_TYPE_METHOD_HINT_METHOD(attr_name, method_name, doc) \
	Dee_DEFINE_TYPE_METHOD_HINT_METHOD_EX(attr_name, method_name, 0, doc)
#define Dee_DEFINE_TYPE_METHOD_HINT_KWMETHOD(attr_name, method_name, doc) \
	Dee_DEFINE_TYPE_METHOD_HINT_KWMETHOD_EX(attr_name, method_name, 0, doc)


/************************************************************************/
/* For `deemon.Sequence'                                                */
/************************************************************************/

/* Operators... */
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1)), int, DCALL, seq_operator_bool, (DeeObject *__restrict self))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1)), DREF DeeObject *, DCALL, seq_operator_iter, (DeeObject *__restrict self))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1)), DREF DeeObject *, DCALL, seq_operator_sizeob, (DeeObject *__restrict self))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), DREF DeeObject *, DCALL, seq_operator_contains, (DeeObject *self, DeeObject *some_object))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), DREF DeeObject *, DCALL, seq_operator_getitem, (DeeObject *self, DeeObject *index))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), int, DCALL, seq_operator_delitem, (DeeObject *self, DeeObject *index))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2, 3)), int, DCALL, seq_operator_setitem, (DeeObject *self, DeeObject *index, DeeObject *value))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2, 3)), DREF DeeObject *, DCALL, seq_operator_getrange, (DeeObject *self, DeeObject *start, DeeObject *end))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2, 3)), int, DCALL, seq_operator_delrange, (DeeObject *self, DeeObject *start, DeeObject *end))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2, 3, 4)), int, DCALL, seq_operator_setrange, (DeeObject *self, DeeObject *start, DeeObject *end, DeeObject *values))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), Dee_ssize_t, DCALL, seq_operator_foreach, (DeeObject *__restrict self, Dee_foreach_t proc, void *arg))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), Dee_ssize_t, DCALL, seq_operator_foreach_pair, (DeeObject *__restrict self, Dee_foreach_pair_t proc, void *arg))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), Dee_ssize_t, DCALL, seq_operator_enumerate, (DeeObject *__restrict self, Dee_enumerate_t proc, void *arg))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), Dee_ssize_t, DCALL, seq_operator_enumerate_index, (DeeObject *__restrict self, Dee_enumerate_index_t proc, void *arg, size_t start, size_t end))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1)), DREF DeeObject *, DCALL, seq_operator_iterkeys, (DeeObject *__restrict self))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), int, DCALL, seq_operator_bounditem, (DeeObject *self, DeeObject *index))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), int, DCALL, seq_operator_hasitem, (DeeObject *self, DeeObject *index))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1)), size_t, DCALL, seq_operator_size, (DeeObject *__restrict self))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1)), size_t, DCALL, seq_operator_size_fast, (DeeObject *__restrict self))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1)), DREF DeeObject *, DCALL, seq_operator_getitem_index, (DeeObject *self, size_t index))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1)), int, DCALL, seq_operator_delitem_index, (DeeObject *self, size_t index))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 3)), int, DCALL, seq_operator_setitem_index, (DeeObject *self, size_t index, DeeObject *value))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1)), int, DCALL, seq_operator_bounditem_index, (DeeObject *self, size_t index))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1)), int, DCALL, seq_operator_hasitem_index, (DeeObject *self, size_t index))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1)), DREF DeeObject *, DCALL, seq_operator_getrange_index, (DeeObject *self, Dee_ssize_t start, Dee_ssize_t end))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1)), int, DCALL, seq_operator_delrange_index, (DeeObject *self, Dee_ssize_t start, Dee_ssize_t end))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 4)), int, DCALL, seq_operator_setrange_index, (DeeObject *self, Dee_ssize_t start, Dee_ssize_t end, DeeObject *values))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1)), DREF DeeObject *, DCALL, seq_operator_getrange_index_n, (DeeObject *self, Dee_ssize_t start))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1)), int, DCALL, seq_operator_delrange_index_n, (DeeObject *self, Dee_ssize_t start))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 3)), int, DCALL, seq_operator_setrange_index_n, (DeeObject *self, Dee_ssize_t start, DeeObject *values))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), DREF DeeObject *, DCALL, seq_operator_trygetitem, (DeeObject *self, DeeObject *index))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1)), DREF DeeObject *, DCALL, seq_operator_trygetitem_index, (DeeObject *self, size_t index))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1)), Dee_hash_t, DCALL, seq_operator_hash, (DeeObject *__restrict self))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), int, DCALL, seq_operator_compare_eq, (DeeObject *self, DeeObject *some_object))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), int, DCALL, seq_operator_compare, (DeeObject *self, DeeObject *some_object))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), int, DCALL, seq_operator_trycompare_eq, (DeeObject *self, DeeObject *some_object))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), DREF DeeObject *, DCALL, seq_operator_eq, (DeeObject *self, DeeObject *some_object))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), DREF DeeObject *, DCALL, seq_operator_ne, (DeeObject *self, DeeObject *some_object))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), DREF DeeObject *, DCALL, seq_operator_lo, (DeeObject *self, DeeObject *some_object))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), DREF DeeObject *, DCALL, seq_operator_le, (DeeObject *self, DeeObject *some_object))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), DREF DeeObject *, DCALL, seq_operator_gr, (DeeObject *self, DeeObject *some_object))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), DREF DeeObject *, DCALL, seq_operator_ge, (DeeObject *self, DeeObject *some_object))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), int, DCALL, seq_operator_inplace_add, (DREF DeeObject **__restrict p_self, DeeObject *some_object))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), int, DCALL, seq_operator_inplace_mul, (DREF DeeObject **__restrict p_self, DeeObject *some_object))


/* Common utility functions... */
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), Dee_ssize_t, DCALL, seq_foreach_reverse, (DeeObject *__restrict self, Dee_foreach_t proc, void *arg)) /* [0..1] Not necessarily available! */
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), Dee_ssize_t, DCALL, seq_enumerate_index_reverse, (DeeObject *__restrict self, Dee_enumerate_index_t proc, void *arg, size_t start, size_t end)) /* [0..1] Not necessarily available! */

/* Operators for the purpose of constructing `DefaultEnumeration_With*' objects. */
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1)), DREF DeeObject *, DCALL, seq_makeenumeration, (DeeObject *self))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1)), DREF DeeObject *, DCALL, seq_makeenumeration_with_int_range, (DeeObject *self, size_t start, size_t end))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2, 3)), DREF DeeObject *, DCALL, seq_makeenumeration_with_range, (DeeObject *self, DeeObject *start, DeeObject *end))
Dee_DEFINE_TYPE_METHOD_HINT_KWMETHOD(seq_enumerate, "enumerate",
                                     "(start=!0,end:?Dint=!A!Dint!PSIZE_MAX)->?S?T2?Dint?O\n"
                                     "(cb:?DCallable,start=!0,end:?Dint=!A!Dint!PSIZE_MAX)->?X2?O?N")


/* @return: ITER_DONE: Sequence is empty */
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1)), DREF DeeObject *, DCALL, seq_trygetfirst, (DeeObject *__restrict self))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1)), DREF DeeObject *, DCALL, seq_trygetlast, (DeeObject *__restrict self))


/* Functions that need additional variants for sequence sub-types that don't have indices (sets, maps) */
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1)), int, DCALL, seq_any, (DeeObject *self))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), int, DCALL, seq_any_with_key, (DeeObject *self, DeeObject *key))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1)), int, DCALL, seq_any_with_range, (DeeObject *self, size_t start, size_t end))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 4)), int, DCALL, seq_any_with_range_and_key, (DeeObject *self, size_t start, size_t end, DeeObject *key))
Dee_DEFINE_TYPE_METHOD_HINT_KWMETHOD(seq_any, "any", "(start=!0,end:?Dint=!A!Dint!PSIZE_MAX,key:?DCallable=!N)->?Dbool")

Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1)), int, DCALL, seq_all, (DeeObject *self))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), int, DCALL, seq_all_with_key, (DeeObject *self, DeeObject *key))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1)), int, DCALL, seq_all_with_range, (DeeObject *self, size_t start, size_t end))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 4)), int, DCALL, seq_all_with_range_and_key, (DeeObject *self, size_t start, size_t end, DeeObject *key))
Dee_DEFINE_TYPE_METHOD_HINT_KWMETHOD(seq_all, "all", "(start=!0,end:?Dint=!A!Dint!PSIZE_MAX,key:?DCallable=!N)->?Dbool")

Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1)), int, DCALL, seq_parity, (DeeObject *self))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), int, DCALL, seq_parity_with_key, (DeeObject *self, DeeObject *key))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1)), int, DCALL, seq_parity_with_range, (DeeObject *self, size_t start, size_t end))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 4)), int, DCALL, seq_parity_with_range_and_key, (DeeObject *self, size_t start, size_t end, DeeObject *key))
Dee_DEFINE_TYPE_METHOD_HINT_KWMETHOD(seq_parity, "parity", "(start=!0,end:?Dint=!A!Dint!PSIZE_MAX,key:?DCallable=!N)->?Dbool")

Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), DREF DeeObject *, DCALL, seq_reduce, (DeeObject *self, DeeObject *combine))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2, 3)), DREF DeeObject *, DCALL, seq_reduce_with_init, (DeeObject *self, DeeObject *combine, DeeObject *init))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), DREF DeeObject *, DCALL, seq_reduce_with_range, (DeeObject *self, DeeObject *combine, size_t start, size_t end))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2, 5)), DREF DeeObject *, DCALL, seq_reduce_with_range_and_init, (DeeObject *self, DeeObject *combine, size_t start, size_t end, DeeObject *init))
Dee_DEFINE_TYPE_METHOD_HINT_KWMETHOD(seq_reduce, "reduce", "(combine:?DCallable,start=!0,end:?Dint=!A!Dint!PSIZE_MAX,init?)->")

Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1)), DREF DeeObject *, DCALL, seq_min, (DeeObject *self))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), DREF DeeObject *, DCALL, seq_min_with_key, (DeeObject *self, DeeObject *key))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1)), DREF DeeObject *, DCALL, seq_min_with_range, (DeeObject *self, size_t start, size_t end))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 4)), DREF DeeObject *, DCALL, seq_min_with_range_and_key, (DeeObject *self, size_t start, size_t end, DeeObject *key))
Dee_DEFINE_TYPE_METHOD_HINT_KWMETHOD(seq_min, "min", "(start=!0,end:?Dint=!A!Dint!PSIZE_MAX,key:?DCallable=!N)->?X2?O?N")

Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1)), DREF DeeObject *, DCALL, seq_max, (DeeObject *self))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), DREF DeeObject *, DCALL, seq_max_with_key, (DeeObject *self, DeeObject *key))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1)), DREF DeeObject *, DCALL, seq_max_with_range, (DeeObject *self, size_t start, size_t end))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 4)), DREF DeeObject *, DCALL, seq_max_with_range_and_key, (DeeObject *self, size_t start, size_t end, DeeObject *key))
Dee_DEFINE_TYPE_METHOD_HINT_KWMETHOD(seq_max, "max", "(start=!0,end:?Dint=!A!Dint!PSIZE_MAX,key:?DCallable=!N)->?X2?O?N")

Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1)), DREF DeeObject *, DCALL, seq_sum, (DeeObject *self))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1)), DREF DeeObject *, DCALL, seq_sum_with_range, (DeeObject *self, size_t start, size_t end))
Dee_DEFINE_TYPE_METHOD_HINT_KWMETHOD(seq_sum, "sum", "(start=!0,end:?Dint=!A!Dint!PSIZE_MAX)->?X2?O?N")

/* @return: * : Count
 * @return: (size_t)-1: Error */
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), size_t, DCALL, seq_count, (DeeObject *self, DeeObject *item))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2, 3)), size_t, DCALL, seq_count_with_key, (DeeObject *self, DeeObject *item, DeeObject *key))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), size_t, DCALL, seq_count_with_range, (DeeObject *self, DeeObject *item, size_t start, size_t end))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2, 5)), size_t, DCALL, seq_count_with_range_and_key, (DeeObject *self, DeeObject *item, size_t start, size_t end, DeeObject *key))
Dee_DEFINE_TYPE_METHOD_HINT_KWMETHOD(seq_count, "count", "(item,start=!0,end:?Dint=!A!Dint!PSIZE_MAX,key:?DCallable=!N)->?Dint")

/* @return: 0 : Not contained
 * @return: 1 : Is contained
 * @return: -1: Error */
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), int, DCALL, seq_contains, (DeeObject *self, DeeObject *item))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2, 3)), int, DCALL, seq_contains_with_key, (DeeObject *self, DeeObject *item, DeeObject *key))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), int, DCALL, seq_contains_with_range, (DeeObject *self, DeeObject *item, size_t start, size_t end))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2, 5)), int, DCALL, seq_contains_with_range_and_key, (DeeObject *self, DeeObject *item, size_t start, size_t end, DeeObject *key))
Dee_DEFINE_TYPE_METHOD_HINT_KWMETHOD(seq_contains, "contains", "(item,start=!0,end:?Dint=!A!Dint!PSIZE_MAX,key:?DCallable=!N)->?Dbool")

/* Returns the first element (within the given range) where `match(elem)' is true. */
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2, 3)), DREF DeeObject *, DCALL, seq_locate, (DeeObject *self, DeeObject *match, DeeObject *def))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2, 5)), DREF DeeObject *, DCALL, seq_locate_with_range, (DeeObject *self, DeeObject *match, size_t start, size_t end, DeeObject *def))
Dee_DEFINE_TYPE_METHOD_HINT_KWMETHOD(seq_locate, "locate", "(match,start=!0,end:?Dint=!A!Dint!PSIZE_MAX,def=!N)->?X2?O?Q!Adef]")

/* Returns the last element (within the given range) where `match(elem)' is true. */
/*Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2, 3)), DREF DeeObject *, DCALL, seq_rlocate, (DeeObject *self, DeeObject *match, DeeObject *def))*/ /* Wouldn't make sense: for reverse, you need indices */
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2, 5)), DREF DeeObject *, DCALL, seq_rlocate_with_range, (DeeObject *self, DeeObject *match, size_t start, size_t end, DeeObject *def))
Dee_DEFINE_TYPE_METHOD_HINT_KWMETHOD(seq_rlocate, "rlocate", "(match,start=!0,end:?Dint=!A!Dint!PSIZE_MAX,def=!N)->?X2?O?Q!Adef]")

/* @return: 0 : Does not start with
 * @return: 1 : Does start with
 * @return: -1: Error */
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), int, DCALL, seq_startswith, (DeeObject *self, DeeObject *item))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2, 3)), int, DCALL, seq_startswith_with_key, (DeeObject *self, DeeObject *item, DeeObject *key))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), int, DCALL, seq_startswith_with_range, (DeeObject *self, DeeObject *item, size_t start, size_t end))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2, 5)), int, DCALL, seq_startswith_with_range_and_key, (DeeObject *self, DeeObject *item, size_t start, size_t end, DeeObject *key))
Dee_DEFINE_TYPE_METHOD_HINT_KWMETHOD(seq_startswith, "startswith", "(item,start=!0,end:?Dint=!A!Dint!PSIZE_MAX,key:?DCallable=!N)->?Dbool")

/* @return: 0 : Does not end with
 * @return: 1 : Does end with
 * @return: -1: Error */
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), int, DCALL, seq_endswith, (DeeObject *self, DeeObject *item))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2, 3)), int, DCALL, seq_endswith_with_key, (DeeObject *self, DeeObject *item, DeeObject *key))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), int, DCALL, seq_endswith_with_range, (DeeObject *self, DeeObject *item, size_t start, size_t end))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2, 5)), int, DCALL, seq_endswith_with_range_and_key, (DeeObject *self, DeeObject *item, size_t start, size_t end, DeeObject *key))
Dee_DEFINE_TYPE_METHOD_HINT_KWMETHOD(seq_endswith, "endswith", "(item,start=!0,end:?Dint=!A!Dint!PSIZE_MAX,key:?DCallable=!N)->?Dbool")


/* @return: * :         Index of `item' in `self'
 * @return: (size_t)-1: `item' could not be located in `self'
 * @return: (size_t)Dee_COMPARE_ERR: Error */
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), size_t, DCALL, seq_find, (DeeObject *self, DeeObject *item, size_t start, size_t end))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2, 5)), size_t, DCALL, seq_find_with_key, (DeeObject *self, DeeObject *item, size_t start, size_t end, DeeObject *key))
Dee_DEFINE_TYPE_METHOD_HINT_KWMETHOD(seq_find, "find", "(item,start=!0,end:?Dint=!A!Dint!PSIZE_MAX,key:?DCallable=!N)->?Dint")
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), size_t, DCALL, seq_rfind, (DeeObject *self, DeeObject *item, size_t start, size_t end))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2, 5)), size_t, DCALL, seq_rfind_with_key, (DeeObject *self, DeeObject *item, size_t start, size_t end, DeeObject *key))
Dee_DEFINE_TYPE_METHOD_HINT_KWMETHOD(seq_rfind, "rfind", "(item,start=!0,end:?Dint=!A!Dint!PSIZE_MAX,key:?DCallable=!N)->?Dint")

/* Functions for mutable sequences. */
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1)), int, DCALL, seq_erase, (DeeObject *self, size_t index, size_t count))
Dee_DEFINE_TYPE_METHOD_HINT_KWMETHOD(seq_erase, "erase", "(index:?Dint,count=!1)")

Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 3)), int, DCALL, seq_insert, (DeeObject *self, size_t index, DeeObject *item))
Dee_DEFINE_TYPE_METHOD_HINT_KWMETHOD(seq_insert, "insert", "(index:?Dint,item)")

Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 3)), int, DCALL, seq_insertall, (DeeObject *self, size_t index, DeeObject *items))
Dee_DEFINE_TYPE_METHOD_HINT_KWMETHOD(seq_insertall, "insertall", "(index:?Dint,items:?DSequence)")

Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), int, DCALL, seq_pushfront, (DeeObject *self, DeeObject *item))
Dee_DEFINE_TYPE_METHOD_HINT_METHOD(seq_pushfront, "pushfront", "(item)")

Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), int, DCALL, seq_append, (DeeObject *self, DeeObject *item))
Dee_DEFINE_TYPE_METHOD_HINT_METHOD(seq_append, "append", "(item)")

Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), int, DCALL, seq_extend, (DeeObject *self, DeeObject *items))
Dee_DEFINE_TYPE_METHOD_HINT_METHOD(seq_extend, "extend", "(items:?DSequence)")

Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 3)), DREF DeeObject *, DCALL, seq_xchitem_index, (DeeObject *self, size_t index, DeeObject *value))
Dee_DEFINE_TYPE_METHOD_HINT_KWMETHOD(seq_xchitem, "xchitem", "(index:?Dint,value)->")

Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1)), int, DCALL, seq_clear, (DeeObject *self))
Dee_DEFINE_TYPE_METHOD_HINT_METHOD(seq_clear, "clear", "()")

Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1)), DREF DeeObject *, DCALL, seq_pop, (DeeObject *self, Dee_ssize_t index)) /* When index is negative, count from end of sequence */
Dee_DEFINE_TYPE_METHOD_HINT_KWMETHOD(seq_pop, "pop", "(index=!-1)->")

Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), int, DCALL, seq_remove, (DeeObject *self, DeeObject *item, size_t start, size_t end)) /* @return: 1: Removed; 0: Not removed; -1: Error */
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2, 5)), int, DCALL, seq_remove_with_key, (DeeObject *self, DeeObject *item, size_t start, size_t end, DeeObject *key)) /* @return: 1: Removed; 0: Not removed; -1: Error */
Dee_DEFINE_TYPE_METHOD_HINT_KWMETHOD(seq_remove, "remove", "(item,start=!0,end:?Dint=!A!Dint!PSIZE_MAX,key:?DCallable=!N)->?Dbool")

Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), int, DCALL, seq_rremove, (DeeObject *self, DeeObject *item, size_t start, size_t end)) /* @return: 1: Removed; 0: Not removed; -1: Error */
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2, 5)), int, DCALL, seq_rremove_with_key, (DeeObject *self, DeeObject *item, size_t start, size_t end, DeeObject *key)) /* @return: 1: Removed; 0: Not removed; -1: Error */
Dee_DEFINE_TYPE_METHOD_HINT_KWMETHOD(seq_rremove, "rremove", "(item,start=!0,end:?Dint=!A!Dint!PSIZE_MAX,key:?DCallable=!N)->?Dbool")

Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), size_t, DCALL, seq_removeall, (DeeObject *self, DeeObject *item, size_t start, size_t end, size_t max))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2, 6)), size_t, DCALL, seq_removeall_with_key, (DeeObject *self, DeeObject *item, size_t start, size_t end, size_t max, DeeObject *key))
Dee_DEFINE_TYPE_METHOD_HINT_KWMETHOD(seq_removeall, "removeall", "(item,start=!0,end:?Dint=!A!Dint!PSIZE_MAX,max:?Dint=!A!Dint!PSIZE_MAX,key:?DCallable=!N)->?Dint")

Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), size_t, DCALL, seq_removeif, (DeeObject *self, DeeObject *should, size_t start, size_t end, size_t max))
Dee_DEFINE_TYPE_METHOD_HINT_KWMETHOD(seq_removeif, "removeif", "(should:?DCallable,start=!0,end:?Dint=!A!Dint!PSIZE_MAX,max:?Dint=!A!Dint!PSIZE_MAX)->?Dint")

Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 3)), int, DCALL, seq_resize, (DeeObject *self, size_t newsize, DeeObject *filler))
Dee_DEFINE_TYPE_METHOD_HINT_KWMETHOD(seq_resize, "resize", "(size:?Dint,filler=!N)")

Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 4)), int, DCALL, seq_fill, (DeeObject *self, size_t start, size_t end, DeeObject *filler))
Dee_DEFINE_TYPE_METHOD_HINT_KWMETHOD(seq_fill, "fill", "(start=!0,end:?Dint=!A!Dint!PSIZE_MAX,filler=!N)")

Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1)), int, DCALL, seq_reverse, (DeeObject *self, size_t start, size_t end))
Dee_DEFINE_TYPE_METHOD_HINT_KWMETHOD(seq_reverse, "reverse", "(start=!0,end:?Dint=!A!Dint!PSIZE_MAX)")

Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1)), DREF DeeObject *, DCALL, seq_reversed, (DeeObject *self, size_t start, size_t end))
Dee_DEFINE_TYPE_METHOD_HINT_KWMETHOD(seq_reversed, "reversed", "(start=!0,end:?Dint=!A!Dint!PSIZE_MAX)->?DSequence")

Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1)), int, DCALL, seq_sort, (DeeObject *self, size_t start, size_t end))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 4)), int, DCALL, seq_sort_with_key, (DeeObject *self, size_t start, size_t end, DeeObject *key))
Dee_DEFINE_TYPE_METHOD_HINT_KWMETHOD(seq_sort, "sort", "(start=!0,end:?Dint=!A!Dint!PSIZE_MAX,key:?DCallable=!N)")

Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1)), DREF DeeObject *, DCALL, seq_sorted, (DeeObject *self, size_t start, size_t end))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 4)), DREF DeeObject *, DCALL, seq_sorted_with_key, (DeeObject *self, size_t start, size_t end, DeeObject *key))
Dee_DEFINE_TYPE_METHOD_HINT_KWMETHOD(seq_sorted, "sorted", "(start=!0,end:?Dint=!A!Dint!PSIZE_MAX,key:?DCallable=!N)->?DSequence")

Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), size_t, DCALL, seq_bfind, (DeeObject *self, DeeObject *item, size_t start, size_t end)) /* @return: (size_t)-1: Not found; @return (size_t)Dee_COMPARE_ERR: Error */
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2, 5)), size_t, DCALL, seq_bfind_with_key, (DeeObject *self, DeeObject *item, size_t start, size_t end, DeeObject *key)) /* @return: (size_t)-1: Not found; @return (size_t)Dee_COMPARE_ERR: Error */
Dee_DEFINE_TYPE_METHOD_HINT_KWMETHOD(seq_bfind, "bfind", "(item,start=!0,end:?Dint=!A!Dint!PSIZE_MAX,key:?DCallable=!N)->?Dint")

Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), size_t, DCALL, seq_bposition, (DeeObject *self, DeeObject *item, size_t start, size_t end)) /* @return: (size_t)Dee_COMPARE_ERR: Error */
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2, 5)), size_t, DCALL, seq_bposition_with_key, (DeeObject *self, DeeObject *item, size_t start, size_t end, DeeObject *key)) /* @return: (size_t)Dee_COMPARE_ERR: Error */
Dee_DEFINE_TYPE_METHOD_HINT_KWMETHOD(seq_bposition, "bposition", "(item,start=!0,end:?Dint=!A!Dint!PSIZE_MAX,key:?DCallable=!N)->?Dint")

Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2, 5)), int, DCALL, seq_brange, (DeeObject *self, DeeObject *item, size_t start, size_t end, size_t result_range[2]))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2, 5, 6)), int, DCALL, seq_brange_with_key, (DeeObject *self, DeeObject *item, size_t start, size_t end, DeeObject *key, size_t result_range[2]))
Dee_DEFINE_TYPE_METHOD_HINT_KWMETHOD(seq_brange, "brange", "(item,start=!0,end:?Dint=!A!Dint!PSIZE_MAX,key:?DCallable=!N)->?X2?Dint?Dint")



/************************************************************************/
/* For `deemon.Set'                                                     */
/************************************************************************/
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1)), DREF DeeObject *, DCALL, set_operator_iter, (DeeObject *__restrict self))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), Dee_ssize_t, DCALL, set_operator_foreach, (DeeObject *__restrict self, Dee_foreach_t cb, void *arg))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1)), size_t, DCALL, set_operator_size, (DeeObject *__restrict self))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1)), DREF DeeObject *, DCALL, set_operator_sizeob, (DeeObject *__restrict self))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1)), Dee_hash_t, DCALL, set_operator_hash, (DeeObject *__restrict self))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), int, DCALL, set_operator_compare_eq, (DeeObject *self, DeeObject *some_object))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), int, DCALL, set_operator_trycompare_eq, (DeeObject *self, DeeObject *some_object))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), DREF DeeObject *, DCALL, set_operator_eq, (DeeObject *self, DeeObject *some_object))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), DREF DeeObject *, DCALL, set_operator_ne, (DeeObject *self, DeeObject *some_object))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), DREF DeeObject *, DCALL, set_operator_lo, (DeeObject *self, DeeObject *some_object))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), DREF DeeObject *, DCALL, set_operator_le, (DeeObject *self, DeeObject *some_object))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), DREF DeeObject *, DCALL, set_operator_gr, (DeeObject *self, DeeObject *some_object))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), DREF DeeObject *, DCALL, set_operator_ge, (DeeObject *self, DeeObject *some_object))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1)), DREF DeeObject *, DCALL, set_operator_inv, (DeeObject *__restrict self))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), DREF DeeObject *, DCALL, set_operator_add, (DeeObject *self, DeeObject *some_object)) /* {"a"} + {"b"}         -> {"a","b"} */
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), DREF DeeObject *, DCALL, set_operator_sub, (DeeObject *self, DeeObject *some_object)) /* {"a","b"} - {"b"}     -> {"a"} */
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), DREF DeeObject *, DCALL, set_operator_and, (DeeObject *self, DeeObject *some_object)) /* {"a","b"} & {"a"}     -> {"a"} */
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), DREF DeeObject *, DCALL, set_operator_xor, (DeeObject *self, DeeObject *some_object)) /* {"a","b"} ^ {"a","c"} -> {"b","c"} */
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), int, DCALL, set_operator_inplace_add, (DREF DeeObject **__restrict p_self, DeeObject *some_object))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), int, DCALL, set_operator_inplace_sub, (DREF DeeObject **__restrict p_self, DeeObject *some_object))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), int, DCALL, set_operator_inplace_and, (DREF DeeObject **__restrict p_self, DeeObject *some_object))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), int, DCALL, set_operator_inplace_xor, (DREF DeeObject **__restrict p_self, DeeObject *some_object))

/* Insert a key into a set
 * @return: 1 : Given `key' was inserted and wasn't already present
 * @return: 0 : Given `key' was already present
 * @return: -1: Error */
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), int, DCALL, set_insert, (DeeObject *self, DeeObject *key))
Dee_DEFINE_TYPE_METHOD_HINT_METHOD(set_insert, "insert", "(key)->?Dbool")

/* Remove a key from a set
 * @return: 1 : Given `key' was removed
 * @return: 0 : Given `key' was wasn't present
 * @return: -1: Error */
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), int, DCALL, set_remove, (DeeObject *self, DeeObject *key))
Dee_DEFINE_TYPE_METHOD_HINT_METHOD(set_remove, "remove", "(key)->?Dbool")

/* Insert `key' if not already present and re-return `key'.
 * If already present, return the pre-existing (and equal) instance instead.
 * @return: NULL: Error */
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), DREF DeeObject *, DCALL, set_unify, (DeeObject *self, DeeObject *key))
Dee_DEFINE_TYPE_METHOD_HINT_METHOD(set_unify, "unify", "(key)->")

/* @return: 0 : Success
 * @return: -1: Error  */
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), int, DCALL, set_insertall, (DeeObject *self, DeeObject *keys))
Dee_DEFINE_TYPE_METHOD_HINT_METHOD(set_insertall, "insertall", "(keys:?S?O)")
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), int, DCALL, set_removeall, (DeeObject *self, DeeObject *keys))
Dee_DEFINE_TYPE_METHOD_HINT_METHOD(set_removeall, "removeall", "(keys:?S?O)")

Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1)), DREF DeeObject *, DCALL, set_pop, (DeeObject *self))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), DREF DeeObject *, DCALL, set_pop_with_default, (DeeObject *self, DeeObject *default_))
Dee_DEFINE_TYPE_METHOD_HINT_METHOD(set_pop, "pop", "(def?)->")





/************************************************************************/
/* For `deemon.Mapping'                                                 */
/************************************************************************/
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), DREF DeeObject *, DCALL, map_operator_contains, (DeeObject *self, DeeObject *some_object))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), DREF DeeObject *, DCALL, map_operator_getitem, (DeeObject *self, DeeObject *index))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), int, DCALL, map_operator_delitem, (DeeObject *self, DeeObject *index))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2, 3)), int, DCALL, map_operator_setitem, (DeeObject *self, DeeObject *index, DeeObject *value))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), Dee_ssize_t, DCALL, map_operator_enumerate, (DeeObject *__restrict self, Dee_enumerate_t proc, void *arg))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), Dee_ssize_t, DCALL, map_operator_enumerate_index, (DeeObject *__restrict self, Dee_enumerate_index_t proc, void *arg, size_t start, size_t end))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), int, DCALL, map_operator_bounditem, (DeeObject *self, DeeObject *index))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), int, DCALL, map_operator_hasitem, (DeeObject *self, DeeObject *index))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1)), DREF DeeObject *, DCALL, map_operator_getitem_index, (DeeObject *self, size_t index))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1)), int, DCALL, map_operator_delitem_index, (DeeObject *self, size_t index))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 3)), int, DCALL, map_operator_setitem_index, (DeeObject *self, size_t index, DeeObject *value))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1)), int, DCALL, map_operator_bounditem_index, (DeeObject *self, size_t index))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1)), int, DCALL, map_operator_hasitem_index, (DeeObject *self, size_t index))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), DREF DeeObject *, DCALL, map_operator_trygetitem, (DeeObject *self, DeeObject *index))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1)), DREF DeeObject *, DCALL, map_operator_trygetitem_index, (DeeObject *self, size_t index))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), DREF DeeObject *, DCALL, map_operator_trygetitem_string_hash, (DeeObject *self, char const *key, Dee_hash_t hash))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), DREF DeeObject *, DCALL, map_operator_getitem_string_hash, (DeeObject *self, char const *key, Dee_hash_t hash))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), int, DCALL, map_operator_delitem_string_hash, (DeeObject *self, char const *key, Dee_hash_t hash))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2, 4)), int, DCALL, map_operator_setitem_string_hash, (DeeObject *self, char const *key, Dee_hash_t hash, DeeObject *value))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), int, DCALL, map_operator_bounditem_string_hash, (DeeObject *self, char const *key, Dee_hash_t hash))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), int, DCALL, map_operator_hasitem_string_hash, (DeeObject *self, char const *key, Dee_hash_t hash))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), DREF DeeObject *, DCALL, map_operator_trygetitem_string_len_hash, (DeeObject *self, char const *key, size_t keylen, Dee_hash_t hash))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), DREF DeeObject *, DCALL, map_operator_getitem_string_len_hash, (DeeObject *self, char const *key, size_t keylen, Dee_hash_t hash))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), int, DCALL, map_operator_delitem_string_len_hash, (DeeObject *self, char const *key, size_t keylen, Dee_hash_t hash))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2, 5)), int, DCALL, map_operator_setitem_string_len_hash, (DeeObject *self, char const *key, size_t keylen, Dee_hash_t hash, DeeObject *value))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), int, DCALL, map_operator_bounditem_string_len_hash, (DeeObject *self, char const *key, size_t keylen, Dee_hash_t hash))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), int, DCALL, map_operator_hasitem_string_len_hash, (DeeObject *self, char const *key, size_t keylen, Dee_hash_t hash))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), int, DCALL, map_operator_compare_eq, (DeeObject *self, DeeObject *some_object))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), int, DCALL, map_operator_trycompare_eq, (DeeObject *self, DeeObject *some_object))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), DREF DeeObject *, DCALL, map_operator_eq, (DeeObject *self, DeeObject *some_object))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), DREF DeeObject *, DCALL, map_operator_ne, (DeeObject *self, DeeObject *some_object))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), DREF DeeObject *, DCALL, map_operator_lo, (DeeObject *self, DeeObject *some_object))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), DREF DeeObject *, DCALL, map_operator_le, (DeeObject *self, DeeObject *some_object))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), DREF DeeObject *, DCALL, map_operator_gr, (DeeObject *self, DeeObject *some_object))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), DREF DeeObject *, DCALL, map_operator_ge, (DeeObject *self, DeeObject *some_object))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), DREF DeeObject *, DCALL, map_operator_add, (DeeObject *self, DeeObject *some_object)) /* {"a":1} + {"b":2}       -> {"a":1,"b":2} */
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), DREF DeeObject *, DCALL, map_operator_sub, (DeeObject *self, DeeObject *some_object)) /* {"a":1,"b":2} - {"a"}   -> {"b":2} */
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), DREF DeeObject *, DCALL, map_operator_and, (DeeObject *self, DeeObject *some_object)) /* {"a":1,"b":2} & {"a"}   -> {"a":1} */
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), DREF DeeObject *, DCALL, map_operator_xor, (DeeObject *self, DeeObject *some_object)) /* {"a":1,"b":2} ^ {"a":3} -> {"b":2} */
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), int, DCALL, map_operator_inplace_add, (DREF DeeObject **__restrict p_self, DeeObject *some_object))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), int, DCALL, map_operator_inplace_sub, (DREF DeeObject **__restrict p_self, DeeObject *some_object))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), int, DCALL, map_operator_inplace_and, (DREF DeeObject **__restrict p_self, DeeObject *some_object))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), int, DCALL, map_operator_inplace_xor, (DREF DeeObject **__restrict p_self, DeeObject *some_object))


/* Override the value of a pre-existing key
 * @param: value: The value to overwrite that of `key' with (so-long as `key' already exists)
 * @return: 1 :   The value of `key' was set to `value'
 * @return: 0 :   The given `key' doesn't exist (nothing was updated)
 * @return: -1:   Error */
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2, 3)), int , DCALL, map_setold, (DeeObject *self, DeeObject *key, DeeObject *value))
Dee_DEFINE_TYPE_METHOD_HINT_METHOD(map_setold, "setold", "(key,value)->?Dbool")

/* @return: * :        The value of `key' was set to `value' (returned object is the old value)
 * @return: ITER_DONE: The given `key' doesn't exist (nothing was updated)
 * @return: NULL:      Error */
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2, 3)), DREF DeeObject *, DCALL, map_setold_ex, (DeeObject *self, DeeObject *key, DeeObject *value))
Dee_DEFINE_TYPE_METHOD_HINT_METHOD(map_setold_ex, "setold_ex", "(key,value)->?T2?Dbool?X2?O?N")

/* Insert a new key whilst making sure that the key doesn't already exist
 * @param: value: The value to overwrite that of `key' with (so-long as `key' already exists)
 * @return: 1 :   The value of `key' was set to `value' (the key didn't exist or used to be unbound)
 * @return: 0 :   The given `key' already exists (nothing was inserted)
 * @return: -1:   Error */
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2, 3)), int , DCALL, map_setnew, (DeeObject *self, DeeObject *key, DeeObject *value))
Dee_DEFINE_TYPE_METHOD_HINT_METHOD(map_setnew, "setnew", "(key,value)->?Dbool")

/* @return: ITER_DONE: The value of `key' was set to `value' (the key didn't exist or used to be unbound)
 * @return: * :        The given `key' already exists (nothing was inserted; returned object is the already-present value)
 * @return: -1:        Error */
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2, 3)), DREF DeeObject *, DCALL, map_setnew_ex, (DeeObject *self, DeeObject *key, DeeObject *value))
Dee_DEFINE_TYPE_METHOD_HINT_METHOD(map_setnew_ex, "setnew_ex", "(key,value)->?T2?Dbool?X2?O?N")

/* Same semantic functionality as `Dee_mh_map_setnew_ex_t': insert if not already present
 * @return: * : The value associated with key after the call:
 *              - if already present and nothing was inserted, its old value
 *              - if used-to-be absent/unbound and was assigned/inserted, `value'
 * @return: NULL: Error */
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2, 3)), DREF DeeObject *, DCALL, map_setdefault, (DeeObject *self, DeeObject *key, DeeObject *value))
Dee_DEFINE_TYPE_METHOD_HINT_METHOD(map_setdefault, "setdefault", "(key,value)->")

/* Copy all key-value pairs from `items' and assign them to `self'.
 * Same as `for (local key, value: items) self[key] = value;'
 * @return: 0 : Success
 * @return: -1: Error */
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), int , DCALL, map_update, (DeeObject *self, DeeObject *items))
Dee_DEFINE_TYPE_METHOD_HINT_METHOD(map_update, "update", "(items:?M?O?O)")

/* Remove a single key, returning true/false indicative of that key having been removed.
 * @return: 1 : Key was removed
 * @return: 0 : Key didn't exist (nothing was removed)
 * @return: -1: Error */
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), int , DCALL, map_remove, (DeeObject *self, DeeObject *key))
Dee_DEFINE_TYPE_METHOD_HINT_METHOD(map_remove, "remove", "(key)->?Dbool")

/* Delete all keys that appear in `keys'.
 * Same as `for (local key: keys) del self[key];'
 * @return: 0 : Success
 * @return: -1: Error */
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), int , DCALL, map_removekeys, (DeeObject *self, DeeObject *keys))
Dee_DEFINE_TYPE_METHOD_HINT_METHOD(map_removekeys, "removekeys", "(keys:?S?O)")

/* Remove/unbind `key' and return whatever used to be assigned to it.
 * When the key was already absent/unbound, return `default_' or throw a `KeyError'
 * @return: * :   The old value of `key'
 * @return: NULL: Error */
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2)), DREF DeeObject *, DCALL, map_pop, (DeeObject *self, DeeObject *key))
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1, 2, 3)), DREF DeeObject *, DCALL, map_pop_with_default, (DeeObject *self, DeeObject *key, DeeObject *default_))
Dee_DEFINE_TYPE_METHOD_HINT_METHOD(map_pop, "pop", "(key,def?)->")

/* Remove a random key/value pair from `self' and store it in `key_and_value' (returns "none" if nothing found) */
Dee_DEFINE_TYPE_METHOD_HINT_FUNC(WUNUSED_T NONNULL_T((1)), DREF DeeObject *, DCALL, map_popitem, (DeeObject *self))
Dee_DEFINE_TYPE_METHOD_HINT_METHOD(map_popitem, "popitem", "->?X2?T2?O?O?N")


#ifndef Dee_DEFINE_TYPE_METHOD_HINT_TSC_ONLY

/* Non-TSC-related method hints would go here... */

#endif /* !Dee_DEFINE_TYPE_METHOD_HINT_TSC_ONLY */


#undef Dee_DEFINE_TYPE_METHOD_HINT_FUNC
#undef Dee_DEFINE_TYPE_METHOD_HINT_ATTR
#undef Dee_DEFINE_TYPE_METHOD_HINT_METHOD_EX
#undef Dee_DEFINE_TYPE_METHOD_HINT_KWMETHOD_EX
#undef Dee_DEFINE_TYPE_METHOD_HINT_METHOD
#undef Dee_DEFINE_TYPE_METHOD_HINT_KWMETHOD
#undef Dee_DEFINE_TYPE_METHOD_HINT_EX
#undef Dee_DEFINE_TYPE_KWMETHOD_HINT_EX
#undef Dee_DEFINE_TYPE_METHOD_HINT
#undef Dee_DEFINE_TYPE_KWMETHOD_HINT
