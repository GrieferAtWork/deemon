#define __extension__
#define attribute(x)
#define __attribute(x)
#define __attribute__(x)
#define __declspec(...)
#define __volatile volatile
#define __volatile__ volatile
#define explicit
#define constexpr
#define __const const
#define __const__ const
#define __label__
#define typeof decltype
#define __typeof decltype
#define __typeof__ decltype
#define _Complex
#define __complex
#define __complex__
#define _Atomic
#define __thread
#define __auto_type auto
#define inline
#define __inline
#define __inline__
#define noreturn
#define _Noreturn
#define thread_local
#define _Thread_local
#define __flash
#define __flash1
#define __flash2
#define __flash3
#define __flash4
#define __flash5
#define __memx
#define __far
#define __ea
#define __seg_fs
#define __seg_gs
#define __signed signed
#define __signed__ signed
#define __unsigned unsigned
#define __unsigned__ unsigned
#define __restrict restrict
#define __restrict__ restrict
#define asm(...)
#define __asm(...)
#define __asm__(...)
#define __w64
#define __fastcall
#define __stdcall
#define __cdecl
#define __thiscall
#define __clrcall
#define __ms_abi
#define __sysv_abi

#define INT8_C(c) c
#define __INT8_C(c) c
#define INT16_C(c) c
#define __INT16_C(c) c
#define INT32_C(c) c
#define __INT32_C(c) c
#define UINT8_C(c) c
#define __UINT8_C(c) c
#define UINT16_C(c) c
#define __UINT16_C(c) c
#define UINT32_C(c) c
#define __UINT32_C(c) c
#define INT64_C(c) c
#define __INT64_C(c) c
#define UINT64_C(c) c
#define __UINT64_C(c) c
#define INT128_C(c) c
#define __INT128_C(c) c
#define UINT128_C(c) c
#define __UINT128_C(c) c
#define INTMAX_C(c) c
#define __INTMAX_C(c) c
#define UINTMAX_C(c) c
#define __UINTMAX_C(c) c
#define INTPTR_C(c) c
#define __INTPTR_C(c) c
#define UINTPTR_C(c) c
#define __UINTPTR_C(c) c
#define SIZE_C(c) c
#define __SIZE_C(c) c
#define SSIZE_C(c) c
#define __SSIZE_C(c) c

#define DREF
#define DWEAK
#define __LIBCCALL
#define DCALL
#define FCALL
#define DPRINTER_CC
#define __NULLPTR 0
#define NULL 0
#define __IF0 if(0)
#define __IF1 if(1)

#define NOTHROW(x) x
#define NOTHROW_T(x) x
#define __NOTHROW(x) x
#define __NOTHROW_T(x) x
#define NOTHROW_NCX(x) x
#define NOTHROW_NCX_T(x) x
#define __NOTHROW_NCX(x) x
#define __NOTHROW_NCX_T(x) x
#define __NOTHROW_KRN(x) x
#define NOTHROW_RPC(x) x
#define NOTHROW_RPC_T(x) x
#define __NOTHROW_RPC(x) x
#define __NOTHROW_RPC_T(x) x
#define NOTHROW_RPC_KOS(x) x
#define NOTHROW_RPC_KOS_T(x) x
#define __NOTHROW_RPC_KOS(x) x
#define __NOTHROW_RPC_KOS_T(x) x
#define NOTHROW_RPC_NOKOS(x) x
#define NOTHROW_RPC_NOKOS_T(x) x
#define __NOTHROW_RPC_NOKOS(x) x
#define __NOTHROW_RPC_NOKOS_T(x) x
#define NOTHROW_RPC_PURE(x) x
#define NOTHROW_RPC_PURE_T(x) x
#define __NOTHROW_RPC_PURE(x) x
#define __NOTHROW_RPC_PURE_T(x) x

#define DECL_BEGIN extern "C" {
#define __DECL_BEGIN extern "C" {
#define __SYSDECL_BEGIN extern "C" {
#define DECL_END }
#define __DECL_END }
#define __SYSDECL_END }

#define XBLOCK
#define __XBLOCK
#define XRETURN
#define __XRETURN

#define __ATTR_W64
#define ATTR_NOINLINE
#define __ATTR_NOINLINE
#define ATTR_NORETURN
#define __ATTR_NORETURN
#define ATTR_FASTCALL
#define __ATTR_FASTCALL
#define ATTR_STDCALL
#define __ATTR_STDCALL
#define ATTR_CDECL
#define __ATTR_CDECL
#define ATTR_SYSVABI
#define __ATTR_SYSVABI
#define ATTR_MSABI
#define __ATTR_MSABI
#define ATTR_PURE
#define ATTR_PURE_P
#define __ATTR_PURE
#define __ATTR_PURE_P
#define ATTR_CONST
#define ATTR_CONST_P
#define __ATTR_CONST
#define __ATTR_CONST_P
#define ATTR_LEAF
#define ATTR_LEAF_P
#define __ATTR_LEAF
#define __ATTR_LEAF_P
#define ATTR_FLATTEN
#define __ATTR_FLATTEN
#define ATTR_MALLOC
#define __ATTR_MALLOC
#define ATTR_HOT
#define __ATTR_HOT
#define ATTR_COLD
#define __ATTR_COLD
#define ATTR_WEAK
#define __ATTR_WEAK
#define ATTR_ALLOC_SIZE(x)
#define __ATTR_ALLOC_SIZE(x)
#define ATTR_ASSUME_ALIGNED(x)
#define __ATTR_ASSUME_ALIGNED(x)
#define ATTR_ALLOC_ALIGN(x)
#define __ATTR_ALLOC_ALIGN(x)
#define ATTR_NOTHROW
#define __ATTR_NOTHROW
#define ATTR_DLLIMPORT
#define __ATTR_DLLIMPORT
#define ATTR_DLLEXPORT
#define __ATTR_DLLEXPORT
#define ATTR_NOCLONE
#define __ATTR_NOCLONE
#define ATTR_USED
#define __ATTR_USED
#define ATTR_UNUSED
#define __ATTR_UNUSED
#define ATTR_SENTINEL
#define __ATTR_SENTINEL
#define ATTR_SENTINEL_O(x)
#define __ATTR_SENTINEL_O(x)
#define ATTR_THREAD
#define __ATTR_THREAD
#define ATTR_DEPRECATED(x)
#define __ATTR_DEPRECATED(x)
#define ATTR_DEPRECATED_
#define __ATTR_DEPRECATED_
#define ATTR_WARNING(x)
#define __ATTR_WARNING(x)
#define ATTR_ERROR(x)
#define __ATTR_ERROR(x)
#define ATTR_SECTION(x)
#define __ATTR_SECTION(x)
#define ATTR_RETNONNULL
#define __ATTR_RETNONNULL
#define ATTR_ALIGNED(x)
#define __ATTR_ALIGNED(x)
#define ATTR_ALIAS(x)
#define __ATTR_ALIAS(x)
#define ATTR_INLINE
#define __ATTR_INLINE
#define ATTR_FORCEINLINE
#define __ATTR_FORCEINLINE
#define ATTR_PACKED
#define __ATTR_PACKED
#define ATTR_RETURNS_TWICE
#define __ATTR_RETURNS_TWICE
#define ATTR_EXTERNALLY_VISIBLE
#define __ATTR_EXTERNALLY_VISIBLE
#define ATTR_ARTIFICIAL
#define __ATTR_ARTIFICIAL
#define ATTR_FORMAT_ARG(x)
#define __ATTR_FORMAT_ARG(x)
#define ATTR_FALLTHROUGH ;
#define __ATTR_FALLTHROUGH ;
#define ATTR_OPTIMIZE(x)
#define __ATTR_OPTIMIZE(x)
#define ATTR_TRANSPARENT_UNION
#define __ATTR_TRANSPARENT_UNION
#define ATTR_FORMAT_PRINTF(...)
#define __ATTR_FORMAT_PRINTF(...)
#define ATTR_FORMAT_SCANF(...)
#define __ATTR_FORMAT_SCANF(...)
#define ATTR_FORMAT_STRFMON(...)
#define __ATTR_FORMAT_STRFMON(...)
#define ATTR_FORMAT_STRFTIME(...)
#define __ATTR_FORMAT_STRFTIME(...)
#define ATTR_NOPLT
#define __ATTR_NOPLT
#define ATTR_SELECTANY
#define __ATTR_SELECTANY
#define ATTR_VISIBILITY(x)
#define __ATTR_VISIBILITY(x)

#define NONNULL(...)
#define ATTR_NONNULL(...)
#define __ATTR_NONNULL(...)
#define NONNULL_CXX(...)
#define ATTR_NONNULL_CXX(...)
#define __ATTR_NONNULL_CXX(...)
#define WUNUSED
#define ATTR_WUNUSED
#define __ATTR_WUNUSED
#define UNUSED(...) __VA_ARGS__
#define __UNUSED(...) __VA_ARGS__
#define IMPDEF
#define __IMPDEF
#define EXPDEF
#define __EXPDEF
#define FUNDEF
#define __PUBDEF
#define DATDEF
#define __PUBDEF
#define PUBLIC
#define __PUBLIC
#define INTERN
#define __INTERN
#define PUBLIC_CONST
#define __PUBLIC_CONST
#define INTERN_CONST
#define __INTERN_CONST
#define INTERN_COMDAT
#define __INTERN_COMDAT
#define PUBLIC_COMDAT
#define __PUBLIC_COMDAT
#define INTDEF
#define __INTDEF
#define PRIVATE
#define __PRIVATE
#define FORCELOCAL
#define __FORCELOCAL
#define EXTERN_INLINE
#define __EXTERN_INLINE
#define EXTERN_FORCEINLINE
#define __EXTERN_FORCEINLINE
#define LOCAL
#define __LOCAL
#define __LOCAL_REDIRECT
#define DFL(x) = x
#define __DFL(x) = x
#define COMPILER_FLEXIBLE_ARRAY(T,n) T n[]
#define __COMPILER_FLEXIBLE_ARRAY(T,n) T n[]

#define DFUNDEF extern
#define DDATDEF extern
#define ASSEMBLY_NAME(x,s) x

#define DEFINE_PRIVATE_ALIAS(new,old) int new() {}
#define DEFINE_PUBLIC_ALIAS(new,old) int new() {}
#define DEFINE_INTERN_ALIAS(new,old) int new() {}
#define DEFINE_PRIVATE_WEAK_ALIAS(new,old) int new() {}
#define DEFINE_PUBLIC_WEAK_ALIAS(new,old) int new() {}
#define DEFINE_INTERN_WEAK_ALIAS(new,old) int new() {}

#define static_assert(...)
#define _Static_assert(...)
#define STATIC_ASSERT(...)
#define __STATIC_ASSERT(...)
#define STATIC_ASSERT_MSG(...)
#define __STATIC_ASSERT_MSG(...)

#define __CDECL_OR_DEFAULT
#define __HYBRID_LIBATOMIC_DECL
#define __HYBRID_LIBATOMIC_CC
#define __HYBRID_Q_STRUCT struct
#define __HYBRID_Q_CLASS class
#define LIST_HEAD(n,t) struct n{struct t *lh_first;}
#define LIST_HEAD_P(T) struct{T*lh_first;}
#define LIST_ENTRY(t) struct{struct t*le_next,**le_prev;}
#define LIST_ENTRY_P(T) struct{T*le_next,**le_prev;}
#define __PRIVATE_FOREACH_STDFILENO(...) for(;;)
#define LIST_FOREACH(...) for(;;)
#define LIST_FOREACH_P(...) for(;;)
#define LIST_FOREACH_SAFE(...) for(;;)
#define LIST_FOREACH_SAFE_P(...) for(;;)
#define LIST_FOREACH_FROM(...) for(;;)
#define LIST_FOREACH_FROM_P(...) for(;;)
#define LIST_FOREACH_FROM_SAFE(...) for(;;)
#define LIST_FOREACH_FROM_SAFE_P(...) for(;;)
#define LIST_P_FOREACH(...) for(;;)
#define LIST_P_FOREACH_P(...) for(;;)

#define SLIST_HEAD(n,t) struct n{struct t *slh_first;}
#define SLIST_HEAD_P(T) struct{T*slh_first;}
#define SLIST_ENTRY(t) struct{struct t*sle_next;}
#define SLIST_ENTRY_P(T) struct{T*sle_next;}
#define SLIST_FOREACH(...) for(;;)
#define SLIST_FOREACH_P(...) for(;;)
#define SLIST_FOREACH_SAFE(...) for(;;)
#define SLIST_FOREACH_SAFE_P(...) for(;;)
#define SLIST_FOREACH_FROM(...) for(;;)
#define SLIST_FOREACH_FROM_P(...) for(;;)
#define SLIST_FOREACH_FROM_SAFE(...) for(;;)
#define SLIST_FOREACH_FROM_SAFE_P(...) for(;;)
#define SLIST_FOREACH_PREVPTR(...) for(;;)
#define SLIST_FOREACH_PREVPTR_P(...) for(;;)
#define SLIST_P_FOREACH(...) for(;;)
#define SLIST_P_FOREACH_P(...) for(;;)

#define STAILQ_HEAD(n,t) struct n{struct t*stqh_first,**stqh_last;}
#define STAILQ_ENTRY(t) struct{struct t*stqe_next;}
#define STAILQ_HEAD_P(T) struct{T*stqh_first,**stqh_last;}
#define STAILQ_ENTRY_P(T) struct{T*stqe_next;}
#define STAILQ_FOREACH(...) for(;;)
#define STAILQ_FOREACH_P(...) for(;;)
#define STAILQ_FOREACH_SAFE(...) for(;;)
#define STAILQ_FOREACH_SAFE_P(...) for(;;)
#define STAILQ_FOREACH_FROM(...) for(;;)
#define STAILQ_FOREACH_FROM_P(...) for(;;)
#define STAILQ_FOREACH_FROM_SAFE(...) for(;;)
#define STAILQ_FOREACH_FROM_SAFE_P(...) for(;;)

#define SIMPLEQ_HEAD(n,t) struct n{struct t*sqh_first,**sqh_last;}
#define SIMPLEQ_ENTRY(t) struct{struct t*sqe_next;}
#define SIMPLEQ_HEAD_P(T) struct{T*sqh_first,**sqh_last;}
#define SIMPLEQ_ENTRY_P(T) struct{T*sqe_next;}
#define SIMPLEQ_FOREACH(...) for(;;)
#define SIMPLEQ_FOREACH_P(...) for(;;)
#define SIMPLEQ_FOREACH_SAFE(...) for(;;)
#define SIMPLEQ_FOREACH_SAFE_P(...) for(;;)
#define SIMPLEQ_FOREACH_FROM(...) for(;;)
#define SIMPLEQ_FOREACH_FROM_P(...) for(;;)
#define SIMPLEQ_FOREACH_FROM_SAFE(...) for(;;)
#define SIMPLEQ_FOREACH_FROM_SAFE_P(...) for(;;)

#define _TAILQ_HEAD(n,T,q) struct n{T q*tqh_first,*q*tqh_last;}
#define _TAILQ_ENTRY(T,q) struct{T q*tqe_next,*q*tqe_prev;}
#define TAILQ_HEAD(n,t) struct n{struct t*tqh_first,**tqh_last;}
#define TAILQ_HEAD_P(T) struct{T*tqh_first,**tqh_last;}
#define TAILQ_ENTRY(t) struct{struct t*tqe_next,**tqe_prev;}
#define TAILQ_ENTRY_P(T) struct{T*tqe_next,**tqe_prev;}
#define TAILQ_FOREACH(...) for(;;)
#define TAILQ_FOREACH_P(...) for(;;)
#define TAILQ_FOREACH_REVERSE(...) for(;;)
#define TAILQ_FOREACH_REVERSE_P(...) for(;;)
#define TAILQ_FOREACH_SAFE(...) for(;;)
#define TAILQ_FOREACH_SAFE_P(...) for(;;)
#define TAILQ_FOREACH_REVERSE_SAFE(...) for(;;)
#define TAILQ_FOREACH_REVERSE_SAFE_P(...) for(;;)
#define TAILQ_FOREACH_FROM(...) for(;;)
#define TAILQ_FOREACH_FROM_P(...) for(;;)
#define TAILQ_FOREACH_REVERSE_FROM(...) for(;;)
#define TAILQ_FOREACH_REVERSE_FROM_P(...) for(;;)
#define TAILQ_FOREACH_FROM_SAFE(...) for(;;)
#define TAILQ_FOREACH_FROM_SAFE_P(...) for(;;)
#define TAILQ_FOREACH_REVERSE_FROM_SAFE(...) for(;;)
#define TAILQ_FOREACH_REVERSE_FROM_SAFE_P(...) for(;;)

#define CIRCLEQ_HEAD(n,t) struct n{struct t*cqh_first,*cqh_last;}
#define CIRCLEQ_HEAD_P(T) struct{T*cqh_first,*cqh_last;}
#define CIRCLEQ_ENTRY(t) struct{struct t*cqe_next,*cqe_prev;}
#define CIRCLEQ_ENTRY_P(T) struct{T*cqe_next,*cqe_prev;}
#define CIRCLEQ_FOREACH(...) for(;;)
#define CIRCLEQ_FOREACH_P(...) for(;;)
#define CIRCLEQ_FOREACH_REVERSE(...) for(;;)
#define CIRCLEQ_FOREACH_REVERSE_P(...) for(;;)
#define CIRCLEQ_FOREACH_SAFE(...) for(;;)
#define CIRCLEQ_FOREACH_SAFE_P(...) for(;;)
#define CIRCLEQ_FOREACH_REVERSE_SAFE(...) for(;;)
#define CIRCLEQ_FOREACH_REVERSE_SAFE_P(...) for(;;)
#define CIRCLEQ_FOREACH_FROM(...) for(;;)
#define CIRCLEQ_FOREACH_FROM_P(...) for(;;)
#define CIRCLEQ_FOREACH_REVERSE_FROM(...) for(;;)
#define CIRCLEQ_FOREACH_REVERSE_FROM_P(...) for(;;)
#define CIRCLEQ_FOREACH_FROM_SAFE(...) for(;;)
#define CIRCLEQ_FOREACH_FROM_SAFE_P(...) for(;;)
#define CIRCLEQ_FOREACH_REVERSE_FROM_SAFE(...) for(;;)
#define CIRCLEQ_FOREACH_REVERSE_FROM_SAFE_P(...) for(;;)

#define RINGQ_ENTRY(t) struct{struct t*rqe_next,*rqe_prev;}
#define RINGQ_ENTRY_P(T) struct{T*rqe_next,*rqe_prev;}

#define DLIST_HEAD(n,t) struct n{struct t*dlh_first;}
#define DLIST_ENTRY(t) struct{struct t*dle_next,*dle_prev;}
#define DLIST_ENTRY_P(T) struct{T*dle_next,*dle_prev;}
#define DLIST_FOREACH(...) for(;;)
#define DLIST_FOREACH_P(...) for(;;)
#define DLIST_FOREACH_SAFE(...) for(;;)
#define DLIST_FOREACH_SAFE_P(...) for(;;)
#define DLIST_FOREACH_FROM(...) for(;;)
#define DLIST_FOREACH_FROM_P(...) for(;;)
#define DLIST_FOREACH_FROM_SAFE(...) for(;;)
#define DLIST_FOREACH_FROM_SAFE_P(...) for(;;)

#define LIST_TRYREMOVE_IF(...)
#define LIST_TRYREMOVE_IF_P(...)
#define LIST_REMOVEALL(...)
#define LIST_REMOVEALL_P(...)
#define LIST_TRYUNBIND_IF(...)
#define LIST_TRYUNBIND_IF_P(...)
#define LIST_UNBINDALL(...)
#define LIST_UNBINDALL_P(...)
#define DLIST_TRYREMOVE_IF(...)
#define DLIST_TRYREMOVE_IF_P(...)
#define DLIST_REMOVEALL(...)
#define DLIST_REMOVEALL_P(...)
#define SLIST_TRYREMOVE(...)
#define SLIST_TRYREMOVE_P(...)
#define SLIST_TRYREMOVE_IF(...)
#define SLIST_TRYREMOVE_IF_P(...)
#define SLIST_REMOVEALL(...)
#define SLIST_REMOVEALL_P(...)
#define SLIST_CONTAINS(...)
#define SLIST_CONTAINS_P(...)
#define SLIST_TRYREPLACE(...)
#define SLIST_TRYREPLACE_P(...)
#define SLIST_TRYREPLACE_R(...)
#define SLIST_TRYREPLACE_R_P(...)
#define STAILQ_TRYREMOVE(...)
#define STAILQ_TRYREMOVE_P(...)
#define STAILQ_TRYREMOVE_IF(...)
#define STAILQ_TRYREMOVE_IF_P(...)
#define STAILQ_REMOVEALL(...)
#define STAILQ_REMOVEALL_P(...)
#define STAILQ_CONTAINS(...)
#define STAILQ_CONTAINS_P(...)
#define STAILQ_TRYREPLACE(...)
#define STAILQ_TRYREPLACE_P(...)
#define STAILQ_TRYREPLACE_R(...)
#define STAILQ_TRYREPLACE_R_P(...)
#define SIMPLEQ_TRYREMOVE(...)
#define SIMPLEQ_TRYREMOVE_P(...)
#define SIMPLEQ_TRYREMOVE_IF(...)
#define SIMPLEQ_TRYREMOVE_IF_P(...)
#define SIMPLEQ_REMOVEALL(...)
#define SIMPLEQ_REMOVEALL_P(...)
#define SIMPLEQ_CONTAINS(...)
#define SIMPLEQ_CONTAINS_P(...)
#define SIMPLEQ_TRYREPLACE(...)
#define SIMPLEQ_TRYREPLACE_P(...)
#define SIMPLEQ_TRYREPLACE_R(...)
#define SIMPLEQ_TRYREPLACE_R_P(...)

#define RBTREE_NODE(T)                   struct{struct T*rb_par,*rb_lhs,*rb_rhs;}
#define RBTREE_NODE_P(T)                 struct{T*rb_par,*rb_lhs,*rb_rhs;}
#define RBTREE_NODE_WITH_KEY(T,Tkey)     struct{struct T*rb_par,*rb_lhs,*rb_rhs;Tkey rb_min,rb_max;}
#define RBTREE_NODE_WITH_KEY_P(T,Tkey)   struct{T*rb_par,*rb_lhs,*rb_rhs;Tkey rb_min,rb_max;}
#define LLRBTREE_NODE(T)                 struct{struct T*rb_lhs,*rb_rhs;}
#define LLRBTREE_NODE_P(T)               struct{T*rb_lhs,*rb_rhs;}
#define LLRBTREE_NODE_WITH_KEY(T,Tkey)   struct{struct T*rb_lhs,*rb_rhs;Tkey rb_min,rb_max;}
#define LLRBTREE_NODE_WITH_KEY_P(T,Tkey) struct{T*rb_lhs,*rb_rhs;Tkey rb_min,rb_max;}
#define RBTREE_ROOT(T)                   struct T*
#define LLRBTREE_ROOT(T)                 struct T*

#define RBTREE_DECL
#define RBTREE_IMPL
#define RBTREE_NOTHROW
#define RBTREE_NOTHROW_U
#define RBTREE_CC
#define RBTREE(x) rbtree_##x
#define RBTREE_SLOT__ARGS
#define RBTREE_SLOT__PARAMS
#define RBTREE_T struct my_node
#define RBTREE_Tkey int
#define RBTREE_DEFINE_FUNCTION(decl,attr,returnType,nothrow,cc,name,params,args) decl returnType name params

#define BSEARCH(...) for(;;)
#define BSEARCH_EX(...) for(;;)
#define BSEARCH_RANGE(...) for(;;)
#define BSEARCH_RANGE_EX(...) for(;;)
#define BITSET(num_bits) struct{unsigned int _bs_bits[42];}
#define ATOMIC_ONCE_RUN(self, ...) __VA_ARGS__

#define Dee_DEFINE_OBJMETHOD(name, func, self)            DeeObjMethodObject name
#define DEFINE_OBJMETHOD(name, func, self)                DeeObjMethodObject name
#define Dee_DEFINE_KWOBJMETHOD(name, func, self)          DeeKwObjMethodObject name
#define DEFINE_KWOBJMETHOD(name, func, self)              DeeKwObjMethodObject name
#define Dee_DEFINE_CLSMETHOD(name, func, type)            DeeClsMethodObject name
#define DEFINE_CLSMETHOD(name, func, type)                DeeClsMethodObject name
#define Dee_DEFINE_KWCLSMETHOD(name, func, type)          DeeKwClsMethodObject name
#define DEFINE_KWCLSMETHOD(name, func, type)              DeeKwClsMethodObject name
#define Dee_DEFINE_CLSPROPERTY(name, type, get, del, set) DeeClsPropertyObject name
#define DEFINE_CLSPROPERTY(name, type, get, del, set)     DeeClsPropertyObject name
#define Dee_DEFINE_CMETHOD(name, func)                    DeeCMethodObject name
#define DEFINE_CMETHOD(name, func)                        DeeCMethodObject name
#define Dee_DEFINE_KWCMETHOD(name, func)                  DeeKwCMethodObject name
#define DEFINE_KWCMETHOD(name, func)                      DeeKwCMethodObject name

#define DeePrivateSystem_IF_E1(errno,e1,...)
#define DeePrivateSystem_IF_E2(errno,e1,e2,...)
#define DeePrivateSystem_IF_E3(errno,e1,e2,e3,...)
#define DeePrivateSystem_IF_E4(errno,e1,e2,e3,e4,...)
#define DeeSystem_IF_E1(errno,e1,...)
#define DeeSystem_IF_E2(errno,e1,e2,...)
#define DeeSystem_IF_E3(errno,e1,e2,e3,...)
#define DeeSystem_IF_E4(errno,e1,e2,e3,e4,...)


#define likely
#define unlikely
#define __likely
#define __unlikely
#define likely_untraced
#define unlikely_untraced
#define __likely_untraced
#define __unlikely_untraced
#define untraced
#define __untraced

#define TRY
#define EXCEPT

#define CASE(x) case x

#define DeeSlab_ENUMERATE(func) func(0, 4) func(1, 5) func(2, 6) func(3, 8) func(4, 10)
#define DEE_PRIVATE_DEFINE_SLAB_FUNCTIONS(index, size) \
	void *DeeSlab_Malloc##size(void); \
	void *DeeSlab_Calloc##size(void); \
	void *DeeSlab_TryMalloc##size(void); \
	void *DeeSlab_TryCalloc##size(void); \
	void *DeeDbgSlab_Malloc##size(char const *file, int line); \
	void *DeeDbgSlab_Calloc##size(char const *file, int line); \
	void *DeeDbgSlab_TryMalloc##size(char const *file, int line); \
	void *DeeDbgSlab_TryCalloc##size(char const *file, int line); \
	void *DeeGCObject_SlabMalloc##size(void); \
	void *DeeGCObject_SlabCalloc##size(void); \
	void *DeeGCObject_SlabTryMalloc##size(void); \
	void *DeeGCObject_SlabTryCalloc##size(void); \
	void DeeSlab_Free##size(void *restrict ptr); \
	void DeeDbgSlab_Free##size(void *restrict ptr, char const *file, int line); \
	void DeeGCObject_SlabFree##size(void *restrict ptr);

#define OBJECT_HEAD               Dee_refcnt_t ob_refcnt; DeeTypeObject *ob_type;
#define Dee_OBJECT_HEAD           Dee_refcnt_t ob_refcnt; DeeTypeObject *ob_type;
#define OBJECT_HEAD_EX(Ttype)     Dee_refcnt_t ob_refcnt; Ttype *ob_type;
#define Dee_OBJECT_HEAD_EX(Ttype) Dee_refcnt_t ob_refcnt; Ttype *ob_type;
#define ERROR_OBJECT_HEAD         Dee_refcnt_t ob_refcnt; DeeTypeObject *ob_type; struct Dee_string_object *e_message; DeeObject *e_inner;
#define Dee_ERROR_OBJECT_HEAD     Dee_refcnt_t ob_refcnt; DeeTypeObject *ob_type; struct Dee_string_object *e_message; DeeObject *e_inner;
#define FILE_OBJECT_HEAD          Dee_refcnt_t ob_refcnt; DeeFileTypeObject *ob_type;
#define Dee_FILE_OBJECT_HEAD      Dee_refcnt_t ob_refcnt; DeeFileTypeObject *ob_type;

#define DEE_PRIVATE_REFCHANGE_PRIVATE_DATA
#define WEAKREF_SUPPORT           struct weakref_list ob_weakrefs;
#define Dee_WEAKREF_SUPPORT       struct weakref_list ob_weakrefs;
#define WEAKREF(T)                struct weakref
#define Dee_WEAKREF(T)            struct weakref
#define DEFINE_KWDS(name, ...)                DeeKwdsObject name
#define Dee_DEFINE_KWDS(name, ...)            DeeKwdsObject name
#define DEFINE_KWLIST                         struct keyword name[] = __VA_ARGS__
#define Dee_DEFINE_KWLIST(name, ...)          struct keyword name[] = __VA_ARGS__
#define DEFINE_BYTES(name, ...)               DeeBytesObject name
#define Dee_DEFINE_BYTES(name, ...)           DeeBytesObject name
#define DEFINE_BYTES_EX(name, ...)            DeeBytesObject name
#define Dee_DEFINE_BYTES_EX(name, ...)        DeeBytesObject name
#define DEFINE_CODE(name, ...)                DeeCodeObject name
#define Dee_DEFINE_CODE(name, ...)            DeeCodeObject name
#define DEFINE_FUNCTION(name, ...)            DeeFunctionObject name
#define Dee_DEFINE_FUNCTION(name, ...)        DeeFunctionObject name
#define DEFINE_FUNCTION_NOREFS(name, ...)     DeeFunctionObject name
#define Dee_DEFINE_FUNCTION_NOREFS(name, ...) DeeFunctionObject name

#define Dee_CASE_WIDTH_1BYTE case 1
#define CASE_WIDTH_1BYTE case 1
#define Dee_CASE_WIDTH_2BYTE case 2
#define CASE_WIDTH_2BYTE case 2
#define Dee_CASE_WIDTH_4BYTE case 4
#define CASE_WIDTH_4BYTE case 4
#define Dee_SWITCH_SIZEOF_WIDTH(...) for(;;)
#define SWITCH_SIZEOF_WIDTH(...) for(;;)
#define DeeString_Foreach(...)
#define DEFINE_STRING_TRAIT(name,function,test_ch) DeeObject *string_##name(String *self, size_t argc, DeeObject *const *argv);
#define DEFINE_ANY_STRING_TRAIT(name,function) DeeObject *string_##name(String *self, size_t argc, DeeObject *const *argv, DeeObject *kw);
#define DEFINE_BYTES_TRAIT(name,function,test_ch) DeeObject *bytes_##name(Bytes *self, size_t argc, DeeObject *const *argv);
#define DEFINE_ANY_BYTES_TRAIT(name,function) DeeObject *bytes_##name(Bytes *self, size_t argc, DeeObject *const *argv, DeeObject *kw);

#define Dee_weakref          weakref
#define Dee_object           object_
#define Dee_type_object      type_object
#define Dee_class_desc       class_desc
#define Dee_type_method      type_method
#define Dee_type_getset      type_getset
#define Dee_type_member      type_member
#define Dee_type_constructor type_constructor
#define Dee_type_cast        type_cast
#define Dee_type_gc          type_gc
#define Dee_type_math        type_math
#define Dee_type_cmp         type_cmp
#define Dee_type_nii         type_nii
#define Dee_type_seq         type_seq
#define Dee_type_nsi         type_nsi
#define Dee_type_attr        type_attr
#define Dee_type_with        type_with
#define Dee_type_buffer      type_buffer
#define Dee_weakref_list     weakref_list
#define Dee_opinfo           opinfo

#define Dee_compiler_object  compiler_object
#define Dee_compiler_options compiler_options
#define Dee_compiler_items   compiler_items

#define dee_kwds_entry           kwds_entry
#define dee_kwds_object          kwds_object
#define dee_kwds_mapping_object  kwds_mapping_object
#define dee_keyword              keyword

#define Dee_attribute_object         attribute_object
#define Dee_enumattr_object          enumattr_object
#define Dee_enumattr_iterator_object enumattr_iterator_object
#define Dee_attribute_info           attribute_info
#define Dee_attribute_lookup_rules   attribute_lookup_rules

#define Dee_bool_object bool_object

#define Dee_bytes_object   bytes_object
#define Dee_bytes_printer  bytes_printer

#define Dee_cell_object  cell_object

#define Dee_class_descriptor_object class_descriptor_object
#define Dee_class_optable           class_optable
#define Dee_instance_desc           instance_desc
#define Dee_class_operator          class_operator
#define Dee_class_attribute         class_attribute
#define Dee_instancemember_object   instancemember_object

#define Dee_code_frame                      code_frame
#define Dee_tuple_object                    tuple_object
#define Dee_module_object                   module_object
#define Dee_code_object                     code_object
#define Dee_function_object                 function_object
#define Dee_yield_function_object           yield_function_object
#define Dee_yield_function_iterator_object  yield_function_iterator_object
#define Dee_ddi_object                      ddi_object
#define Dee_except_handler                  except_handler
#define Dee_ddi_regs                        ddi_regs
#define Dee_ddi_xregs                       ddi_xregs
#define Dee_ddi_saved                       ddi_saved
#define Dee_ddi_state                       ddi_state
#define Dee_ddi_exdat                       ddi_exdat

#define Dee_dex_object       dex_object
#define Dee_dex_symbol       dex_symbol
#define Dee_dex              dex
#define Dee_dex_notification dex_notification

#define Dee_dict_item   dict_item
#define Dee_dict_object dict_object

#define Dee_error_object        error_object
#define Dee_appexit_object      appexit_object
#define Dee_threadexit_object   threadexit_object

#define Dee_system_error_object   system_error_object
#define Dee_nomemory_error_object nomemory_error_object
#define Dee_compiler_error_object compiler_error_object
#define Dee_compiler_error_loc    compiler_error_loc

#define Dee_file_object        file_object
#define Dee_filetype_object    filetype_object

#define Dee_system_file_object         system_file_object
#define Dee_file_buffer_object         file_buffer_object
#define Dee_file_buffer_link           file_buffer_link
#define Dee_memory_file_object         memory_file_object
#define Dee_file_reader_object         file_reader_object
#define Dee_file_writer_object         file_writer_object

#define Dee_float_object float_object

#define Dee_gc_head_link gc_head_link
#define Dee_gc_head      gc_head

#define Dee_hashset_item   hashset_item
#define Dee_hashset_object hashset_object

#define Dee_instance_method    instance_method

#define Dee_int_object             int_object

#define Dee_list_object list_object

#define Dee_module_path_object    module_path_object
#define Dee_module_symbol         module_symbol
#define Dee_thread_object         thread_object

#define Dee_none_object none_object

#define Dee_objmethod_object   objmethod_object
#define Dee_kwobjmethod_object kwobjmethod_object
#define Dee_clsmethod_object   clsmethod_object
#define Dee_kwclsmethod_object kwclsmethod_object
#define Dee_clsproperty_object clsproperty_object
#define Dee_clsmember_object   clsmember_object
#define Dee_cmethod_object     cmethod_object
#define Dee_kwcmethod_object   kwcmethod_object

#define Dee_property_object property_object

#define Dee_rodict_item   rodict_item
#define Dee_rodict_object rodict_object

#define Dee_roset_item   roset_item
#define Dee_roset_object roset_object

#define Dee_set_inversion_object set_inversion_object

#define Dee_ascii_printer   ascii_printer
#define Dee_unicode_printer unicode_printer
#define Dee_string_utf      string_utf
#define Dee_unitraits       unitraits
#define Dee_regex_range     regex_range
#define Dee_regex_range_ex  regex_range_ex
#define Dee_regex_range_ptr regex_range_ptr

#define Dee_charptr dcharptr

#define Dee_super_object  super_object

#define Dee_traceback_object      traceback_object
#define Dee_except_frame          except_frame
#define Dee_repr_frame            repr_frame
#define Dee_trepr_frame           trepr_frame
#define Dee_deep_assoc_entry      deep_assoc_entry
#define Dee_deep_assoc            deep_assoc
#define Dee_thread_interrupt      thread_interrupt

#define Dee_tls_callback_hooks  tls_callback_hooks

#define Dee_weakref_object     weakref_object
#define Dee_weakrefable_object weakrefable_object

#define tpconst const
#define Dee_tpconst const
#define INTERN_TPCONST
#define DEF_STRING(n,a,b,c) DeeStringObject n = {};
#define DEFINE_STRING_EX(n,a,b,c) DeeStringObject n = {}
#define Dee_DEFINE_STRING_EX(n,a,b,c) DeeStringObject n = {}
#define DEFINE_STRING(n,a) DeeStringObject n = {}
#define Dee_DEFINE_STRING(n,a) DeeStringObject n = {}
#define ACTION(...)


#define DEFINE_OPERATOR(return,name,args) return DeeObject_##name args {}
#define DEFINE_INTERNAL_OPERATOR(return,name,args) return DeeObject_##name args {}
#define DEFINE_MATH_INPLACE_INT_OPERATOR(DeeObject_InplaceXXX,reg,DeeInt_NewXXX,intX_t,operator_name) \
	int DeeObject_InplaceXXX(DeeObject **__restrict p_self, intX_t val) {}
#define DEFINE_TYPE_INHERIT_FUNCTION(name,opname,field) bool name(DeeTypeObject *self) {}
#define RESTRICT_IF_NOTYPE

#define __BOOL             bool
#define __LONGLONG         long long
#define __ULONGLONG        unsigned long long
#define __LONGDOUBLE       long double
#define __INT8_TYPE__      int8_t
#define __UINT8_TYPE__     uint8_t
#define __INT16_TYPE__     int16_t
#define __UINT16_TYPE__    uint16_t
#define __INT32_TYPE__     int32_t
#define __UINT32_TYPE__    uint32_t
#define __INT64_TYPE__     int64_t
#define __UINT64_TYPE__    uint64_t
#define __SIZE_TYPE__      size_t
#define __PTRDIFF_TYPE__   ptrdiff_t
#define __SSIZE_TYPE__     ssize_t
#define __INTPTR_TYPE__    intptr_t
#define __UINTPTR_TYPE__   uintptr_t
#define __BYTE_TYPE__      byte_t
#define __REGISTER_TYPE__  register_t
#define __SREGISTER_TYPE__ sregister_t
#define __TYPEFOR_INTIB1   int8_t
#define __TYPEFOR_UINTIB1  uint8_t
#define __TYPEFOR_INTIB2   int16_t
#define __TYPEFOR_UINTIB2  uint16_t
#define __TYPEFOR_INTIB4   int32_t
#define __TYPEFOR_UINTIB4  uint32_t
#define __TYPEFOR_INTIB8   int64_t
#define __TYPEFOR_UINTIB8  uint64_t
#define __CHAR8_TYPE__        char
#define __INT_LEAST8_TYPE__   int_least8_t
#define __UINT_LEAST8_TYPE__  uint_least8_t
#define __INT_LEAST16_TYPE__  int_least16_t
#define __UINT_LEAST16_TYPE__ uint_least16_t
#define __INT_LEAST32_TYPE__  int_least32_t
#define __UINT_LEAST32_TYPE__ uint_least32_t
#define __INT_LEAST64_TYPE__  int_least64_t
#define __UINT_LEAST64_TYPE__ uint_least64_t
#define __INT_FAST8_TYPE__    int_fast8_t
#define __UINT_FAST8_TYPE__   uint_fast8_t
#define __INT_FAST16_TYPE__   int_fast16_t
#define __UINT_FAST16_TYPE__  uint_fast16_t
#define __INT_FAST32_TYPE__   int_fast32_t
#define __UINT_FAST32_TYPE__  uint_fast32_t
#define __INT_FAST64_TYPE__   int_fast64_t
#define __UINT_FAST64_TYPE__  uint_fast64_t
#define __INTMAX_TYPE__       intmax_t
#define __UINTMAX_TYPE__      uintmax_t
#define __INTPTR_HALF_TYPE__  intptr_half_t
#define __UINTPTR_HALF_TYPE__ uintptr_half_t
#define __LONGPTR_TYPE__      longptr_t
#define __ULONGPTR_TYPE__     ulongptr_t
#define __REGISTER_TYPE__     ulongptr_t
#define __SREGISTER_TYPE__    longptr_t
#define __BYTE_TYPE__         byte_t
#define __SBYTE_TYPE__        sbyte_t
#define __WCHAR_TYPE__        wchar_t
#define __CHAR16_TYPE__       char16_t
#define __CHAR32_TYPE__       char32_t
#define __WCHAR16_TYPE__      char16_t
#define __WCHAR32_TYPE__      char32_t
#define __WINT_TYPE__         wint_t
#define __SIG_ATOMIC_TYPE__   sig_atomic_t
#define __INTSIZE_TYPE__      size_t
#define __INTSSIZE_TYPE__     ssize_t
#define __LONGSIZE_TYPE__     size_t
#define __LONGSSIZE_TYPE__    ssize_t
#define __LONG32_TYPE__       long32_t
#define __ULONG32_TYPE__      ulong32_t
#define __LONG64_TYPE__       long64_t
#define __ULONG64_TYPE__      ulong64_t
#define __builtin_va_list     va_list
#define __SHIFT_TYPE__        shift_t
