/* Copyright (c) 2018 Griefer@Work                                            *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement in the product documentation would be  *
 *    appreciated but is not required.                                        *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

/* Backwards-compatibility and helpers to
 * achieve this with previous version of deemon. */

import dict from deemon;

@"A class that may be specified as the base of other user-classes"
@"to achieve old-style member semanics, diverting lookup of member"
@"variables to be done at runtime:"
@"> class MyClass: OldUserClass from d200 {"
@">     this() {"
@">         this.my_member = 42;"
@">     }"
@"> }"
@"> "
@"> print MyClass().my_member;"
@"> "
class OldUserClass {

	@"A dict mapping old member variables to their proper names."
class OldUserClass
	/* Inherit from weakrefable, because it used to be that
	 * any user-defined class could be weakly referneced by
	 * default, since _any_ object was capable of sustaining
	 * weak references. */
	: weakrefable
{

	private m_members = dict();

	operator . (name) {
		return m_members[name];
	}

	operator del. (name) {
		del m_members[name];
	}

	operator .= (name,value) {
		m_members[name] = value;
	}

}
























