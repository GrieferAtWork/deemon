/* Copyright (c) 2019 Griefer@Work                                            *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement in the product documentation would be  *
 *    appreciated but is not required.                                        *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

import fs;
import * from deemon;

final global absToRel = fs.relpath;
final global relToAbs = fs.abspath;
final global isRel = fs.isabs;
final global mkSymLnk = fs.symlink;
final global symLnkTarget = fs.readlink;
final global exists = fs.stat.exists;
/* This is just guessing; I can't be bothered to actually look into this */
final global expand = fs.abspath;
final global expandUNC = fs.abspath;
final global extractFileName = fs.tailof;
final global extractFileExt = fs.extof;
final global extractFilePath = fs.headof;
final global function extractFileDir(p: string): string {
	return fs.exctrail(fs.headof(p));
}
final global extractFileDrive = fs.driveof;
final global function extractShortPathName(p: string): string -> p; // I can't be bothered...
final global function fileCreate(p,...): File -> File.open(p,"w+");
final global fileDelete = fs.unlink;
final global function fileRead(fp: File, args...) {
	if (#args == 1) {
		/* XXX: This isn't how deemon 200+ handles
		 *      binary reads from files anymore... */
		args[0] := fp.reado(type args[0]);
	} else {
		fp.read(args...);
	}
}
final global function fileWrite(fp: File,args...) {
	if (#args == 1) {
		/* XXX: writeo() no longer exists in deemon 200+ */
		fp.writeo(args[0]);
	} else {
		fp.write(args...);
	}
}
final global function fileSeek(fp: File, off: int, origin: int) {
	fp.seek(off,origin);
}
final global function fileOpen(p: string,...): File -> File.open(p,"r+");
final global function fileClose(fp: File) -> fp.close();
final global fileExists = fs.stat.isreg;
final global function diskFree(p: string): int -> 0; /* ' Can't be bothered! */
final global function diskSize(p: string): int -> 0; /* ' Can't be bothered! */

final global seekFromBeginning = File.SEEK_SET;
final global seekFromCurrent = File.SEEK_CUR;
final global seekFromEnd = File.SEEK_END;

final global dirCreate = fs.mkdir;
final global dirDelete = fs.rmdir;
final global dirExists = fs.stat.isdir;
final global function dirCreateStruc(p) {
	/* This is actually something deemon doesn't have a builtin for... */
	local total_path = "";
	for (local part: fs.abspath(p).replace("\\","/").split("/")) {
		total_path = total_path ? fs.joinpath(total_path,part) : part;
		if (!fs.stat.isdir(total_path))
			fs.mkdir(total_path);
	}
}

final global getCurrentDir = fs.getcwd;
final global setCurrentDir = fs.chdir;
