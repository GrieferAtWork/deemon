/* Copyright (c) 2019 Griefer@Work                                            *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement in the product documentation would be  *
 *    appreciated but is not required.                                        *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */
#pragma once
#include "__stddef.dee"

#pragma push_macro(undef, "from", "import", "final", "function", "float", "ceil", "util", "floor", "int", "round")
from "math" import
	__builtin_sin = "sin",
	__builtin_cos = "cos",
	__builtin_tan = "tan",
	__builtin_sincos = "sincos",
	__builtin_asin = "asin",
	__builtin_acos = "acos",
	__builtin_atan = "atan",
	__builtin_atan2 = "atan2",
	__builtin_asincos = "asincos",
	__builtin_sinh = "sinh",
	__builtin_cosh = "cosh",
	__builtin_tanh = "tanh",
	__builtin_sincosh = "sincosh",
	__builtin_asinh = "asinh",
	__builtin_acosh = "acosh",
	__builtin_atanh = "atanh",
	__builtin_asincosh = "asincosh",
	__builtin_exp = "exp",
	__builtin_frexp = "frexp",
	__builtin_log = "log",
	__builtin_log10 = "log10",
	__builtin_modf = "modf",
	__builtin_exp2 = "exp2",
	__builtin_expm1 = "expm1",
	__builtin_ilogb = "ilogb",
	__builtin_log1p = "log1p",
	__builtin_log2 = "log2",
	__builtin_logb = "logb",
	__builtin_scalbn = "scalbn",
	__builtin_scalbi32n = "scalbn",
	__builtin_pow = "pow",
	__builtin_sqrt = "sqrt",
	__builtin_cbrt = "cbrt",
	__builtin_hypot = "hypot",
	__builtin_erf = "erf",
	__builtin_tgamma = "tgamma",
	__builtin_lgamma = "lgamma",
	__builtin_fmod = "fmod",
	__builtin_remainder = "remainder",
	__builtin_remquo = "remquo",
	__builtin_copysign = "copysign",
	__builtin_nextafter = "nextafter",
	__builtin_nexttoward = "nextafter",
	__builtin_fdim = "fdim",
	__builtin_isfinite = "isfinite",
	__builtin_isinf = "isinf",
	__builtin_isnan = "isnan",
	__builtin_isnormal = "isnormal",
	__builtin_signbit = "signbit",
	__builtin_isgreater = "isgreater",
	__builtin_isgreaterequal = "isgreaterequal",
	__builtin_isless = "isless",
	__builtin_islessequal = "islessequal",
	__builtin_islessgreater = "islessgreater",
	__builtin_isunordered = "isunordered";
from util import
	__builtin_i32round = "round",
	__builtin_i64round = "round",
	__builtin_min = "min",
	__builtin_max = "max",
	__builtin_abs = "abs",
	__builtin_sqr = "sqr",
	__builtin_ceil = "ceil",
	__builtin_floor = "floor",
	__builtin_round = "round",
	__builtin_i32rint = "round",
	__builtin_i64rint = "round",
	__builtin_nearbyint = "round"
;

final function rint(__x) -> (float from deemon)__builtin_round(__x);
final function __builtin_ceilf(__x) -> (float from deemon)(ceil from util)(__x);
final function __builtin_floorf(__x) -> (float from deemon)(floor from util)(__x);
final function __builtin_truncf(__x) -> (float from deemon)(int from deemon)(__x);
final function __builtin_roundf(__x) -> (float from deemon)(round from util)(__x);
#pragma pop_macro("from", "import", "final", "function", "float", "ceil", "util", "floor", "int", "round")
