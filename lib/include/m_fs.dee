/* Copyright (c) 2018 Griefer@Work                                            *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement in the product documentation would be  *
 *    appreciated but is not required.                                        *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */
import fs;
import fs_path = .m_fs_path;

final global getcwd = fs.getcwd;
final global chdir = fs.chdir;
final global tmp = fs.gettmp;
final global tmpname = none; /* TODO */
final function home(...) -> fs.user(...).home;
final function listenv() -> [fs.environ...];
final function getenv(name) -> fs.environ[name];
final function delenv(name) -> fs.environ.operator del[](name);
final function setenv(name,value) -> fs.environ.operator [] (name,value);
final function user() -> fs.user.name;
final global host = fs.gethostname;
final global path = fs_path;
final function getatime(path) -> fs.stat(path).st_atime;
final function getmtime(path) -> fs.stat(path).st_mtime;
final function getctime(path) -> fs.stat(path).st_ctime;
final function gettimes(path) {
	__stack local st = fs.stat(path);
	return (st.st_atime,st.st_ctime,st.st_mtime);
}
final function setatime(path,val) -> fs.chtime(val,none,none);
final function setmtime(path,val) -> fs.chtime(none,val,none);
final function setctime(path,val) -> fs.chtime(none,none,val);
final function settimes(path,at = none,ct = none,mt = none) -> fs.chtime(at,mt,ct);
final global isabs = fs.isabs;
final global isfile = fs.stat.isreg;
final global isdir = fs.stat.isdir;
final global islink = fs.stat.islnk;
final function isdrive(path) {
	path = fs.inctrail(fs.expand(path,"pc"));
	return fs.driveof(path) == path;
}
final global ismount = isdrive;
final global ishidden = fs.stat.ishidden;
final global isxfile = fs.stat.isexe;
final global ischrdev = fs.stat.ischr;
final global isblkdev = fs.stat.isblk;
final global isfifo = fs.stat.isfifo;
final global issocket = fs.stat.issock;
final global exists = fs.stat.exists;
final global remove = fs.remove;
final global unlink = fs.unlink;
final global rmfile = fs.unlink;
final global mkdir = fs.mkdir;
final global rmdir = fs.rmdir;
final global copy_ = fs.copyfile;
final global move_ = fs.rename;
final global link = fs.symlink;
final global readlink = fs.readlink;
final global uid_t = fs.user;
final global gid_t = fs.group;
final global chmod = fs.chmod;
final function getmod(path) -> fs.stat(path).st_mode;
final global chown = fs.chown;
final function getown(path) {
	__stack local st = fs.stat(path);
	return (st.st_uid,st.st_gid);
}
final global uidof = fs.user;
final global gidof = fs.group;
final function uidname(uid) {
	if (uid !is fs.user)
		uid = fs.user(uid);
	return uid.name;
}
final function gidname(gid) {
	if (gid !is fs.group)
		gid = fs.group(gid);
	return gid.name;
}
final global dir = fs.dir;
final global query = fs.query;
final global env = fs.environ;

final global win32 = import(".m_fs_win32");
final global posix = import(".m_fs_posix");


