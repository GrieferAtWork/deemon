/* Copyright (c) 2018-2024 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2024 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */
import fs;
import fs_path = .m_fs_path;

final global getcwd = fs.getcwd;
final global chdir = fs.chdir;
final global tmp = fs.gettmp;
final global tmpname = none; /* TODO */
function home(...) -> fs.User(...).home;
function listenv() -> [fs.environ...];
function getenv(name) -> fs.environ[name];
function delenv(name) -> fs.environ.operator del[](name);
function setenv(name, value) -> fs.environ.operator [] (name, value);
function User() -> fs.User.name;
final global host = fs.gethostname;
final global path = fs_path;
function getatime(path) -> fs.stat(path).st_atime;
function getmtime(path) -> fs.stat(path).st_mtime;
function getctime(path) -> fs.stat(path).st_ctime;
function gettimes(path) {
	__stack local st = fs.stat(path);
	return (st.st_atime, st.st_ctime, st.st_mtime);
}
function setatime(path, val) -> fs.chtime(val, none, none);
function setmtime(path, val) -> fs.chtime(none, val, none);
function setctime(path, val) -> fs.chtime(none, none, val);
function settimes(path, at = none, ct = none, mt = none) -> fs.chtime(at, mt, ct);
final global isabs = fs.isabs;
final global isfile = fs.stat.isreg;
final global isdir = fs.stat.isdir;
final global islink = fs.stat.islnk;
function isdrive(path) {
	path = fs.inctrail(fs.expand(path, "pc"));
	return fs.driveof(path) == path;
}
final global ismount = isdrive;
final global ishidden = fs.stat.ishidden;
final global isxfile = fs.stat.isexe;
final global ischrdev = fs.stat.ischr;
final global isblkdev = fs.stat.isblk;
final global isfifo = fs.stat.isfifo;
final global issocket = fs.stat.issock;
final global exists = fs.stat.exists;
final global remove = fs.remove;
final global unlink = fs.unlink;
final global rmfile = fs.unlink;
final global mkdir = fs.mkdir;
final global rmdir = fs.rmdir;
final global copy_ = fs.copyfile;
final global move_ = fs.rename;
final global link = fs.symlink;
final global readlink = fs.readlink;
final global uid_t = fs.User;
final global gid_t = fs.Group;
final global chmod = fs.chmod;
function getmod(path) -> fs.stat(path).st_mode;
final global chown = fs.chown;
function getown(path) {
	__stack local st = fs.stat(path);
	return (st.st_uid, st.st_gid);
}
final global uidof = fs.User;
final global gidof = fs.Group;
function uidname(uid) {
	if (uid !is fs.User)
		uid = fs.User(uid);
	return uid.name;
}
function gidname(gid) {
	if (gid !is fs.Group)
		gid = fs.Group(gid);
	return gid.name;
}
final global dir = fs.dir;
final global query = fs.query;
final global env = fs.environ;

import fs_win32 = .m_fs_win32;
import fs_posix = .m_fs_posix;
final global win32 = fs_win32;
final global posix = fs_posix;
