/* Copyright (c) 2018-2021 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2021 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */
#pragma once
#include "__stddef.dee"

/* !!! This header has been replaced by the `operators' module !!! */

#pragma push_macro(undef, "import", "from", "operators", "function", "type", "is", "operator")
from operators import
	__str__ = "str",
	__repr__ = "repr",
	__copy__ = "copy",
	__move__ = "copy", /* Move-constructors have been removed. */
	__copyassign__ = "assign", /* copyassign and assign have been merged. */
	__moveassign__ = "moveassign",
	__assign__ = "assign",
	__neg__ = "neg",
	__pos__ = "pos",
	__inv__ = "inv",
	__inc__ = "inc",
	__dec__ = "dec",
	__lo__ = "lo",
	__le__ = "le",
	__eq__ = "eq",
	__ne__ = "ne",
	__gr__ = "gr",
	__ge__ = "ge",
	__add__ = "add",
	__iadd__ = "iadd",
	__sub__ = "sub",
	__isub__ = "isub",
	__mul__ = "mul",
	__imul__ = "imul",
	__div__ = "div",
	__idiv__ = "idiv",
	__mod__ = "mod",
	__imod__ = "imod",
	__shl__ = "shl",
	__ishl__ = "ishl",
	__shr__ = "shr",
	__ishr__ = "ishr",
	__and__ = "and",
	__iand__ = "iand",
	__or__ = "or",
	__ior__ = "ior",
	__xor__ = "xor",
	__ixor__ = "ixor",
	__pow__ = "pow",
	__ipow__ = "ipow",
	__call__ = "call",
	__size__ = "size",
	__getitem__ = "getitem",
	__setitem__ = "setitem",
	__delitem__ = "delitem",
	__getrange__ = "getrange",
	__setrange__ = "setrange",
	__delrange__ = "delrange",
	__contains__ = "contains",
	__getattr__ = "getattr",
	__delattr__ = "delattr",
	__setattr__ = "setattr",
	__iterself__ = "iter",
	__iternext__ = "next",
	__hash__ = "hash",
	__bool__ = "bool",
	__read__ = "read",
	__write__ = "write",
	__readnp__ = "read",
	__writenp__ = "write",
	__seek__ = "seek",
	__trunc__ = "trunc",
	__close__ = "close",
	__flush__ = "sync";
from "deemon" import __hasattr__ = "hasattr";

function __type__(__x) -> type __x;
function __not__(__x) -> !__x; /* The not-operator has been removed. */
function __ref__(__x) -> __x.operator . ("ref");
function __deref__(__x) -> __x.operator . ("ind");
function __incpost__(__x) -> __x++;
function __decpost__(__x) -> __x--;
function __is__(__x, __y) -> __x is __y;
function __callv__(__x, __y...) -> __x(__y...);
#pragma pop_macro("import", "from", "operators", "function", "type", "is", "operator")
