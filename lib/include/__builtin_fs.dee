/* Copyright (c) 2016 - deemon by Griefer@Work                                    *
 *                                                                                *
 * Permission is hereby granted, free of charge, to any person obtaining a copy   *
 * of this software and associated documentation files (the "Software"), to deal  *
 * in the Software without restriction, including without limitation the rights   *
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      *
 * copies of the Software, and to permit persons to whom the Software is          *
 * furnished to do so, subject to the following conditions:                       *
 *                                                                                *
 * The above copyright notice and this permission notice shall be included in all *
 * copies or substantial portions of the Software.                                *
 *                                                                                *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     *
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       *
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    *
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         *
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  *
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  *
 * SOFTWARE.                                                                      *
 */
#pragma once
#include "__stddef.dee"

from fs import
	__builtin_fs_getcwd = getcwd,
	__builtin_fs_wgetcwd = getcwd,
	__builtin_fs_chdir = chdir,
	__builtin_fs_gettmp = gettmp
	__builtin_fs_path_head = headof,
	__builtin_fs_path_tail = tailof,
	__builtin_fs_path_file = fileof,
	__builtin_fs_path_ext = extof,
	__builtin_fs_path_drive = driveof,
	__builtin_fs_path_inctrail = inctrail,
	__builtin_fs_path_exctrail = exctrail,
	__builtin_fs_path_abs = abspath,
	__builtin_fs_path_rel = relpath,
	__builtin_fs_path_join = joinpath,
	__builtin_fs_isabs = isabs,
	__builtin_fs_remove = remove,
	__builtin_fs_rmfile = unlink,
	__builtin_fs_mkdir = mkdir,
	__builtin_fs_rmdir = rmdir,
	__builtin_fs_copy = copyfile,
	__builtin_fs_move = rename,
	__builtin_fs_link = symlink,
	__builtin_fs_readlink = readlink,
	__builtin_fs_chmod = chmod,
	__builtin_fs_chown = chown,
	__builtin_fs_uidof = user,
	__builtin_fs_gidof = group,
	__builtin_fs_machine = gethostname
#define __builtin_fs_wmachine __builtin_fs_machine
#ifdef __WINDOWS__
	,
	__builtin_fs_win32hardlink = link
#endif
;

function __builtin_fs_gethome() -> (user from fs).home;
#define __builtin_fs_wgethome __builtin_fs_gethome
#define __builtin_fs_wgettmp __builtin_fs_gettmp
//const __builtin_fs_gettmpname = __builtin_object(0x0168); /* TODO */
//#define __builtin_fs_wgettmpname __builtin_fs_gettmpname
function __builtin_fs_listenv() -> environ from fs;
#define __builtin_fs_wlistenv  __builtin_fs_listenv
function __builtin_fs_getenv(name) -> (environ from fs)[name];
function __builtin_fs_delenv(name) -> (environ from fs).operator del[](name);
function __builtin_fs_setenv(name,val) -> (environ from fs).operator[](name,val);
function __builtin_fs_path_expanduser(path) -> (expand from fs)(path,"h");
function __builtin_fs_path_expandvars(path) -> (expand from fs)(path,"vV");
function __builtin_fs_getatime(path) -> (stat from fs)(path).st_atime;
function __builtin_fs_getctime(path) -> (stat from fs)(path).st_mtime;
function __builtin_fs_getmtime(path) -> (stat from fs)(path).st_ctime;
function __builtin_fs_gettimes(path) {
	local st = (stat from fs)(path);
	return (st.st_atime,st.st_ctime,st.st_mtime);
}
function __builtin_fs_setatime(path,val) -> (chtime from fs)(path,val,none,none);
function __builtin_fs_setctime(path,val) -> (chtime from fs)(path,none,val,none);
function __builtin_fs_setmtime(path,val) -> (chtime from fs)(path,none,none,val);
function __builtin_fs_settimes(path,at = none,ct = none,mt = none)
	-> (chtime from fs)(path,at,mt,ct);
function __builtin_fs_isfile(path) -> (stat from fs).isreg(path);
function __builtin_fs_isdir(path) -> (stat from fs).isdir(path);
function __builtin_fs_islink(path) -> (stat from fs).islnk(path);
function __builtin_fs_isdrive(path) {
	import fs;
	path = fs.inctrail(fs.expand(path,"pc"));
	return fs.driveof(path) == path;
}
#define __builtin_fs_ismount  __builtin_fs_isdrive
function __builtin_fs_ishidden(path) -> (stat from fs).ishidden(path);
function __builtin_fs_isxfile(path) -> (stat from fs).isexe(path);
function __builtin_fs_ischrdev(path) -> (stat from fs).ischr(path);
function __builtin_fs_isblkdev(path) -> (stat from fs).isblk(path);
function __builtin_fs_isfifo(path) -> (stat from fs).isfifo(path);
function __builtin_fs_issocket(path) -> (stat from fs).issock(path);
function __builtin_fs_exists(path) -> (stat from fs).exists(path);
function __builtin_fs_getmod(path) -> (stat from fs)(path).st_mode;
function __builtin_fs_getown(path) {
	local st = (stat from fs)(path);
	return (st.st_uid,st.st_gid);
}

#define __builtin_fs_wuidname __builtin_fs_uidname
function __builtin_fs_uidname(uid) {
	if (uid !is user from fs)
		uid = (user from fs)(uid);
	return uid.name;
}

#define __builtin_fs_wgidname __builtin_fs_gidname
function __builtin_fs_gidname(gid) {
	if (gid !is group from fs)
		gid = (group from fs)(gid);
	return gid.name;
}

#ifdef __WINDOWS__
//const __builtin_fs_win32modulename = __builtin_object(0x00EE); /* TODO */
//#define __builtin_fs_win32wmodulename __builtin_fs_win32modulename
//const __builtin_fs_win32dlldirectory = __builtin_object(0x0162); /* TODO */
//#define __builtin_fs_win32wdlldirectory __builtin_fs_win32dlldirectory
//const __builtin_fs_win32systemdirectory = __builtin_object(0x0163); /* TODO */
//#define __builtin_fs_win32wsystemdirectory __builtin_fs_win32systemdirectory
//const __builtin_fs_win32windowsdirectory = __builtin_object(0x0165); /* TODO */
//#define __builtin_fs_win32wwindowsdirectory __builtin_fs_win32windowsdirectory
//const __builtin_fs_win32systemwindowsdirectory = __builtin_object(0x0166); /* TODO */
//#define __builtin_fs_win32wsystemwindowsdirectory __builtin_fs_win32systemwindowsdirectory
//const __builtin_fs_win32syswow64directory = __builtin_object(0x0167); /* TODO */
//#define __builtin_fs_win32wsyswow64directory __builtin_fs_win32syswow64directory
//const __builtin_fs_win32drives = __builtin_object(0x01CF); /* TODO */
//#define __builtin_fs_win32wdrives __builtin_fs_win32drives
#endif

function __builtin_fs_user() -> (user from fs).name;
#define __builtin_fs_wuser __builtin_fs_user




