/* Copyright (c) 2018-2021 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2021 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */
#pragma once
#include "__stddef.dee"

#pragma push_macro(undef, "from", "fs", "import", "User", "environ", "final", "function", "return", "if", "expand", "chtime", "stat", "local", "Group")
from fs import
	__builtin_fs_getcwd = "getcwd",
	__builtin_fs_wgetcwd = "getcwd",
	__builtin_fs_chdir = "chdir",
	__builtin_fs_gettmp = "gettmp",
	__builtin_fs_path_head = "headof",
	__builtin_fs_path_tail = "tailof",
	__builtin_fs_path_file = "fileof",
	__builtin_fs_path_ext = "extof",
	__builtin_fs_path_drive = "driveof",
	__builtin_fs_path_inctrail = "inctrail",
	__builtin_fs_path_exctrail = "exctrail",
	__builtin_fs_path_abs = "abspath",
	__builtin_fs_path_rel = "relpath",
	__builtin_fs_path_join = "joinpath",
	__builtin_fs_isabs = "isabs",
	__builtin_fs_remove = "remove",
	__builtin_fs_rmfile = "unlink",
	__builtin_fs_mkdir = "mkdir",
	__builtin_fs_rmdir = "rmdir",
	__builtin_fs_copy = "copyfile",
	__builtin_fs_move = "rename",
	__builtin_fs_link = "symlink",
	__builtin_fs_readlink = "readlink",
	__builtin_fs_chmod = "chmod",
	__builtin_fs_chown = "chown",
	__builtin_fs_uidof = "User",
	__builtin_fs_gidof = "Group",
	__builtin_fs_machine = "gethostname"
#define __builtin_fs_wmachine __builtin_fs_machine
#ifdef __WINDOWS__
	,
	__builtin_fs_win32hardlink = "link"
#endif
;

final function __builtin_fs_gethome() -> (User from fs)().operator . ("home");
#define __builtin_fs_wgethome __builtin_fs_gethome
#define __builtin_fs_wgettmp __builtin_fs_gettmp
//const __builtin_fs_gettmpname = __builtin_object(0x0168); /* TODO */
//#define __builtin_fs_wgettmpname __builtin_fs_gettmpname
final function __builtin_fs_listenv() -> environ from fs;
#define __builtin_fs_wlistenv  __builtin_fs_listenv
final function __builtin_fs_getenv(__name) -> (environ from fs)[__name];
final function __builtin_fs_delenv(__name) -> (environ from fs).operator del[](__name);
final function __builtin_fs_setenv(__name,__val) -> (environ from fs).operator[](__name,__val);
final function __builtin_fs_path_expanduser(__path) -> (expand from fs)(__path,"h");
final function __builtin_fs_path_expandvars(__path) -> (expand from fs)(__path,"vV");
final function __builtin_fs_getatime(__path) -> (stat from fs)(__path).operator . ("st_atime");
final function __builtin_fs_getctime(__path) -> (stat from fs)(__path).operator . ("st_mtime");
final function __builtin_fs_getmtime(__path) -> (stat from fs)(__path).operator . ("st_ctime");
final function __builtin_fs_gettimes(__path) {
	local __st = (stat from fs)(__path);
	return (
		__st.operator . ("st_atime"),
		__st.operator . ("st_ctime"),
		__st.operator . ("st_mtime"));
}
final function __builtin_fs_setatime(__path,val) -> (chtime from fs)(__path,val,none,none);
final function __builtin_fs_setctime(__path,val) -> (chtime from fs)(__path,none,val,none);
final function __builtin_fs_setmtime(__path,val) -> (chtime from fs)(__path,none,none,val);
final function __builtin_fs_settimes(__path,at = none,ct = none,mt = none)
	-> (chtime from fs)(__path,at,mt,ct);
final function __builtin_fs_isfile(__path) -> (stat from fs).operator . ("isreg")(__path);
final function __builtin_fs_isdir(__path) -> (stat from fs).operator . ("isdir")(__path);
final function __builtin_fs_islink(__path) -> (stat from fs).operator . ("islnk")(__path);
final function __builtin_fs_isdrive(__path) {
	import fs;
	__path = fs.operator . ("inctrail")(fs.expand(__path,"pc"));
	return fs.operator . ("driveof")(__path) == __path;
}
#define __builtin_fs_ismount  __builtin_fs_isdrive
final function __builtin_fs_ishidden(__path) -> (stat from fs).operator . ("ishidden")(__path);
final function __builtin_fs_isxfile(__path) -> (stat from fs).operator . ("isexe")(__path);
final function __builtin_fs_ischrdev(__path) -> (stat from fs).operator . ("ischr")(__path);
final function __builtin_fs_isblkdev(__path) -> (stat from fs).operator . ("isblk")(__path);
final function __builtin_fs_isfifo(__path) -> (stat from fs).operator . ("isfifo")(__path);
final function __builtin_fs_issocket(__path) -> (stat from fs).operator . ("issock")(__path);
final function __builtin_fs_exists(__path) -> (stat from fs).operator . ("exists")(__path);
final function __builtin_fs_getmod(__path) -> (stat from fs)(__path).operator . ("st_mode");
final function __builtin_fs_getown(__path) {
	local st = (stat from fs)(__path);
	return (st.operator . ("st_uid"),st.operator . ("st_gid"));
}

#define __builtin_fs_wuidname __builtin_fs_uidname
final function __builtin_fs_uidname(__uid) {
	if (__uid !is User from fs)
		__uid = (User from fs)(__uid);
	return __uid.operator . ("name");
}

#define __builtin_fs_wgidname __builtin_fs_gidname
final function __builtin_fs_gidname(__gid) {
	if (__gid !is Group from fs)
		__gid = (Group from fs)(__gid);
	return __gid.operator . ("name");
}

#ifdef __WINDOWS__
#pragma push_macro(undef,"win32", "GetLogicalDriveStrings")
from win32 import
	__builtin_fs_win32modulename = "GetModuleFileName",
	__builtin_fs_win32wmodulename = "GetModuleFileName",
	__builtin_fs_win32dlldirectory = "GetDllDirectory",
	__builtin_fs_win32wdlldirectory = "GetDllDirectory",
	__builtin_fs_win32systemdirectory = "GetSystemDirectory",
	__builtin_fs_win32wsystemdirectory = "GetSystemDirectory",
	__builtin_fs_win32windowsdirectory = "GetWindowsDirectory",
	__builtin_fs_win32wwindowsdirectory = "GetWindowsDirectory",
	__builtin_fs_win32systemwindowsdirectory = "GetSystemWindowsDirectory",
	__builtin_fs_win32wsystemwindowsdirectory = "GetSystemWindowsDirectory",
	__builtin_fs_win32syswow64directory = "GetSystemWow64Directory",
	__builtin_fs_win32wsyswow64directory = "GetSystemWow64Directory"
;
final function __builtin_fs_win32drives() {
	return (GetLogicalDriveStrings from win32)().rstrip("\0").split("\0");
}
#define __builtin_fs_win32wdrives  __builtin_fs_win32drives
#pragma pop_macro("win32", "GetLogicalDriveStrings", "rstrip", "split")
#endif /* __WINDOWS__ */

function __builtin_fs_user() -> (User from fs)().operator . ("name");
#define __builtin_fs_wuser __builtin_fs_user

#pragma pop_macro("from", "fs", "import", "User", "environ", "final", "function", "return", "if", "expand", "chtime", "stat", "local", "Group")



