/* Copyright (c) 2018-2020 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2020 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */
#pragma once
#ifndef __DEEMON_GUARD_ATOMIC
#define __DEEMON_GUARD_ATOMIC
#endif

#include "__stddef.h"

#ifndef __MEMORY_ORDER_RELAXED
#define __MEMORY_ORDER_RELAXED 0
#define __MEMORY_ORDER_CONSUME 1
#define __MEMORY_ORDER_ACQUIRE 2
#define __MEMORY_ORDER_RELEASE 3
#define __MEMORY_ORDER_ACQ_REL 4
#define __MEMORY_ORDER_SEQ_CST 5
#endif

#ifndef __memory_order_relaxed_defined
#define __memory_order_relaxed_defined 1
#pragma push_macro(undef,"local","memory_order_relaxed","memory_order_consume","memory_order_acquire","memory_order_release","memory_order_acq_rel","memory_order_seq_cst")
local memory_order_relaxed = __MEMORY_ORDER_RELAXED;
local memory_order_consume = __MEMORY_ORDER_CONSUME;
local memory_order_acquire = __MEMORY_ORDER_ACQUIRE;
local memory_order_release = __MEMORY_ORDER_RELEASE;
local memory_order_acq_rel = __MEMORY_ORDER_ACQ_REL;
local memory_order_seq_cst = __MEMORY_ORDER_SEQ_CST;
#pragma pop_macro("local","memory_order_relaxed","memory_order_consume","memory_order_acquire","memory_order_release","memory_order_acq_rel","memory_order_seq_cst")
#endif

#ifdef __DEEMON_GUARD___CXXDEFAULT_DEE
#include <cxx/atomic>
#endif
