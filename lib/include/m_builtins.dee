/* Copyright (c) 2018-2024 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2024 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */
import * from deemon;
import * from errors;
import identity from functools;

function seq_locate(seq, item, key = none): Object {
	if (key is none)
		key = identity;
	item = key(item);
	for (local elem: seq as Sequence) {
		if (equals(item, key(elem)))
			return elem;
	}
	throw ValueError(f"Could not locate item `{item}' in sequence `{seq}'");
}

function seq_rlocate(seq, item, key = none): Object {
	if (key is none)
		key = identity;
	item = key(item);
	local result;
	for (local elem: seq as Sequence) {
		if (equals(item, key(elem)))
			result = elem;
	}
	if (result is bound)
		return result;
	throw ValueError(f"Could not locate item `{item}' in sequence `{seq}'");
}

function seq_locateall(seq, item, key = none): {Object...} {
	if (key is none)
		key = identity;
	item = key(item);
	for (local elem: seq as Sequence) {
		if (equals(item, key(elem)))
			yield elem;
	}
}
