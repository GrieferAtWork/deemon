/* Copyright (c) 2018 Griefer@Work                                            *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement in the product documentation would be  *
 *    appreciated but is not required.                                        *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */
#pragma once
#include "__stddef.dee"

import __builtin_avg = avg from util;
import __builtin_all = all from util;
import __builtin_any = any from util;
import __builtin_sum = sum from util;
import __builtin_ord = ord from .m_util;
local __builtin_range = (sequence from deemon).range;
local __builtin_id = (object from deemon).id;
import __builtin_swap = swap from .m_util;
local __builtin_seq_find = (sequence from deemon).find;
local __builtin_seq_rfind = (sequence from deemon).rfind;
local __builtin_seq_index = (sequence from deemon).index;
local __builtin_seq_rindex = (sequence from deemon).rindex;
local __builtin_seq_contains = (sequence from deemon).contains;
local __builtin_seq_count = (sequence from deemon).count;
local __builtin_seq_locate = (sequence from deemon).locate;
local __builtin_seq_rlocate = (sequence from deemon).rlocate;
local __builtin_seq_locate_all = (sequence from deemon).locateall;
local __builtin_seq_transform = (sequence from deemon).transform;
local __builtin_seq_empty = (sequence from deemon).empty;
local __builtin_seq_non_empty = (sequence from deemon).nonempty;
local __builtin_seq_front = (sequence from deemon).front;
local __builtin_seq_back = (sequence from deemon).back;
local __builtin_seq_get = (sequence from deemon).get;
local __builtin_seq_at = (sequence from deemon).at;
local __builtin_seq_reversed = (sequence from deemon).reversed;
local __builtin_seq_sorted = (sequence from deemon).sorted;
local __builtin_seq_segments = (sequence from deemon).segments;

#ifndef ____builtin_min_defined
#define ____builtin_min_defined 1
import __builtin_min = min from util;
import __builtin_max = max from util;
import __builtin_abs = abs from util;
import __builtin_sqr = sqr from util;
import __builtin_ceil = ceil from util;
import __builtin_floor = floor from util;
import __builtin_round = round from util;
#endif
