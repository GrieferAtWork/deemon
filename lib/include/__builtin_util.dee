/* Copyright (c) 2019 Griefer@Work                                            *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement in the product documentation would be  *
 *    appreciated but is not required.                                        *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */
#pragma once
#include "__stddef.dee"

#pragma push_macro(undef,"from","import","sequence","deemon","operator","final","local")
from "util" import
	__builtin_avg = "avg",
	__builtin_all = "all",
	__builtin_any = "any",
	__builtin_sum = "sum"
#ifndef ____builtin_min_defined
#define ____builtin_min_defined 1
	,
	__builtin_min = "min",
	__builtin_max = "max",
	__builtin_abs = "abs",
	__builtin_sqr = "sqr",
	__builtin_ceil = "ceil",
	__builtin_floor = "floor",
	__builtin_round = "round"
#endif
;
from ".m_util" import
	__builtin_ord = "ord",
	__builtin_swap = "swap"
;
final local __builtin_range = (sequence from deemon).operator . ("range");
final local __builtin_id = (object from deemon).operator . ("id");
final local __builtin_seq_find = (sequence from deemon).operator . ("find");
final local __builtin_seq_rfind = (sequence from deemon).operator . ("rfind");
final local __builtin_seq_index = (sequence from deemon).operator . ("index");
final local __builtin_seq_rindex = (sequence from deemon).operator . ("rindex");
final local __builtin_seq_contains = (sequence from deemon).operator . ("contains");
final local __builtin_seq_count = (sequence from deemon).operator . ("count");
final local __builtin_seq_locate = (sequence from deemon).operator . ("locate");
final local __builtin_seq_rlocate = (sequence from deemon).operator . ("rlocate");
final local __builtin_seq_locate_all = (sequence from deemon).operator . ("locateall");
final local __builtin_seq_transform = (sequence from deemon).operator . ("transform");
final local __builtin_seq_empty = (sequence from deemon).operator . ("empty");
final local __builtin_seq_non_empty = (sequence from deemon).operator . ("nonempty");
final local __builtin_seq_front = (sequence from deemon).operator . ("front");
final local __builtin_seq_back = (sequence from deemon).operator . ("back");
final local __builtin_seq_get = (sequence from deemon).operator . ("get");
final local __builtin_seq_at = (sequence from deemon).operator . ("at");
final local __builtin_seq_reversed = (sequence from deemon).operator . ("reversed");
final local __builtin_seq_sorted = (sequence from deemon).operator . ("sorted");
final local __builtin_seq_segments = (sequence from deemon).operator . ("segments");
#pragma pop_macro("from","util","import","sequence","deemon","operator","final","local")

