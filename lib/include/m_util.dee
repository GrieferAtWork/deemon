/* Copyright (c) 2018-2021 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2021 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */
import util;
import string, Sequence, Signal, Error, Object from deemon;
import util_attr = .m_util_attr;

final global min = util.min;
final global max = util.max;
final global avg = util.avg;
final global all = util.all;
final global any = util.any;
final global sum = util.sum;
final global chr = string.chr;
final function ord(s) -> s.ord();
final global sqr = util.sqr;
final function len(seq) -> #seq;
final global ceil = util.ceil;
final global floor = util.floor;
final global round = util.round;
final global range = Sequence.range;
final global id = Object.id;
final global zip = util.zip;
final global enumerate = util.enumerate;
final function swap(a, b) {
	local temp = copy(a);
	a.operator move := (b);
	b.operator move := (temp);
}
final global abs = util.abs;

final function reduce(fun, iterable, initializer = none) {
	local it = iterable.operator iter();
	if (initializer is none) {
		try initializer = it.operator next();
		catch (Signal.StopIteration) {
			// Error.TypeError
			throw Error.TypeError(
				"reduce() with empty Sequence and no initial value");
		}
	}
	foreach (local x: it)
		initializer = fun(initializer, x);
	return initializer;
}

final global seq = Sequence from deemon;
final global attr = util_attr;
