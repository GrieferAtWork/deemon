/* Copyright (c) 2018-2023 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2023 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

#pragma once

/* The entire include-system should no longer be used by new code.
 * Instead, the `import'-statement should be used.
 *
 * These headers will however remain to support existing code to
 * run with as few modifications as possible.
 *
 * For that reason, deemon system headers only contain stuff that
 * should be considered legacy, as well as the fact that no new
 * features will be added and that existing features are often
 * implement as clutches, following the removal of any compiler-
 * helpers that used to do a lot of things at compile-time that
 * must now be done at run-time (especially in the field of C-
 * compatibility, which is now implemented through `ctypes'). */

#ifndef __DEEMON__
#	error "This header is meant for deemon"
#endif

/* Current (maximum) API version (will never change again; s.a.: the blurb above) */
#define __API_VERSION_MAX__ 200

#ifndef __API_VERSION__
/* Overwrite this macro before including any headers for
 * backwards compatibility in deemon's standard headers */
#	define __API_VERSION__ __API_VERSION_MAX__
#elif __API_VERSION__ > __API_VERSION_MAX__
#	error "Unsupported deemon API version (reason: future)"
#endif

#ifndef __STR
#	define __STR2(x) #x
#	define __STR(x) __STR2(x)
#endif

#ifndef __CAT
#	define __CAT2(a,b) a##b
#	define __CAT(a,b) __CAT2(a,b)
#endif

#ifndef __pragma
#	define __pragma(x) _Pragma(__STR2(x))
#endif

/* Attribute and declspec has been replaced by tags.
 * No backwards-compatibility is provided for `[[tag]]'-style tags */
#define __PRIVATE_ATTRIBUTE(...) @__VA_ARGS__
#define __declspec(...) @__VA_ARGS__
#define __attribute(x) __PRIVATE_ATTRIBUTE x
#define __attribute__(x) __PRIVATE_ATTRIBUTE x

/* Put after a macro function to prevent it from expanding */
#define __NO_MACRO

#define __unused /* nothing */


/* A _really_ dirty fix for an incompatibility between
 * deemon200+'s and deemon100+'s Dict member functions:
 * - While the intention of Dict's proxy views had always been to
 *   emulate python, deemon 100+ did this incorrectly and had swapped
 *   the meaning of `items' and `values'
 * - In python (just as in deemon200), `items' is a sequence of 2-element
 *   tuples, each referring to a key-value pair, while `values' is the
 *   same sequence, however only referring to the value-portion.
 * - To keep backwards-compatibility with older code, as well as considering
 *   that old code was usually written to use Dict.items() / Dict.keys()
 *   directly, we simply make use of macros to swap the 2 functions within
 *   the preprocessor.
 * -> This is _extremely_ ugly, however since we _really_ don't care about
 *    how little, or how much we're clobbering the root-namespace in here,
 *    considering our sole purpose is to ensure backwards-compatibility
 *    with a limited set of existing code, macros are the easiest, and
 *    simplest solution, not requiring any modifications of the runtime! */
#define keys()   keys
#define items()  values
#define values() items

/* After the big typename=CamelCase refactoring, allow for backwards-compatibility
 * of old code using the all-lowercase spelling of builtin types */
#define writer   Writer /* file.writer */
#define reader   Reader /* file.reader */
#define iterator Iterator



#if 0 /* Would interfere with stuff like `x, y = pipe.new()...;' */
local function __ctypes_new(tp) {
	import malloc, sizeof from ctypes;
	return (tp.ptr)malloc(sizeof(tp));
}
#define new    __ctypes_new pack
#define delete (free from ctypes)pack
#endif


/* Re-implement some old builtin functions as macros. */
#define __builtin_dex(x)                   import(x)
#define __builtin_breakpoint()             __asm__("debug break")
#define __builtin_typeof(x)                type(x)
#define __builtin_expect(x, y)             (x)
#define __builtin_object(id)               ((get_builtin from rt.builtins)(id))
#define __builtin_predictable(x)           false
#define __builtin_exprast(...)             none
#define __builtin_alloca(sz)               (malloc from ctypes)(sz) /* It's a leak, but it'll work... */
#define __builtin_noop(...)                none
#define __noop(...)                        none
#define _Noexcept(...)                     false
#define __builtin_noexcept(...)            false
#define _Noreturn(...)                     false
#define __builtin_noreturn(...)            false
#define __builtin_noeffect(...)            false
#define __builtin_constant_p(...)          false
#define __builtin_unused_1(a)              ({ a; none; })
#define __builtin_unused_2(a, b)           ({ a; b; })
#define __builtin_unused(...)              __builtin_unused_##__VA_NARGS__(__VA_ARGS__)
#define __builtin_dead(x)                  (true || (x))
#define __builtin_choose_expr(c, tt, ff)   ((c)?(tt):(ff))
#define __builtin_unreachable()            __asm__("" : : : "noreturn")
#define __builtin_types_compatible_p(x, y) ((x)===(y))
#define __builtin_last_traceback()         ((Traceback from deemon).current)
#define __builtin_super_1(x)               ((x).super)
#define __builtin_super_2(x, y)            ((x) as (y))
#define __builtin_super(...)               __builtin_super_##__VA_NARGS__(__VA_ARGS__)
#define __super(...)                       __builtin_super_##__VA_NARGS__(__VA_ARGS__)
#define __builtin_bound(x)                 bound(x)
#define __builtin_offsetof(s, t)           ((s).offsetof(#t))

/* Define some unary-expression keywords that got removed */
#define weak   WeakRef from deemon pack /* Create weak referece */
#define move   copy                     /* Move-construct (emulate as copy-construct) */

/* Stub-implement removed static-if keywords (as far as possible). */
#define __PRIVATE_if_not_exists{...}
#if 1 /* Cannot be emulated, so we can only hope... */
#define __builtin_exists(x) true
#define __if_exists(x)      if(1)
#define __if_not_exists(x)  __PRIVATE_if_not_exists
#else
#define __builtin_exists(x) false
#define __if_exists(x)      __PRIVATE_if_not_exists
#define __if_not_exists(x)  if(1)
#endif
#define __static_if(x)     if(x)
#define __static_else      else
#define __static_elif      elif
#define __if_true          if(true)
#define __if_false         if(false)

/* Re-define the removed alias for `assert' */
#define __assert    assert

/* Re-define removed loop statements. */
#define __looponce{...} do { __VA_ARGS__ } while (0)
#define __loopever      for (;;)
#define __loopnone      while (0)
#define __foreach       foreach

/* Delete some keywords that got removed. */
#define forward      /* nothing */
#define __scope(n)   /* nothing */
#define alias        /* nothing */
#define const        /* nothing */
#define __const      /* nothing */
#define __const__    /* nothing */
#define volatile     /* nothing */
#define __volatile   /* nothing */
#define __volatile__ /* nothing */
#define constexpr    /* nothing */
#define atomic       /* nothing */
#define _Atomic      /* nothing */

// XXX: extern
// XXX: typedef
// XXX: struct
// XXX: union
// XXX: enum


#if 1 /* This allows `static if' to be compiled correctly, however it
       * also causes static variable declaration to be impossible... */
#define static    /* nothing */
#endif

/* Import some of the symbols that old code assumes to be visible. */
from deemon import
	bool,
	string,
	tuple = "Tuple",
	list = "List",
	int,
	float,
	object = "Object",
	dict = "Dict",
	set = "HashSet"
;

/* Import some C-types.
 * Note however that we can't actually support stuff
 * like `x = (unsigned int)42', because there's no way
 * of defining multi-keyword identifiers.
 * As a quick & dirty work-around, such code can be altered
 * to instead be `x = (unsigned)42', which means the same,
 * and is still portable between d100+ and d200! */
from ctypes import
	__int8 = int8_t, __int16 = int16_t, __int32 = int32_t, __int64 = int64_t,
	int8 = int8_t, int16 = int16_t, int32 = int32_t, int64 = int64_t,
	uint8 = uint8_t, uint16 = uint16_t, uint32 = uint32_t, uint64 = uint64_t,
	_Bool = bool, signed = int, unsigned = uint, char = char, short = short,
	/*long = long,*/ double = double, int8_t = int8_t, int16_t = int16_t,
	int32_t = int32_t, int64_t = int64_t, uint8_t = uint8_t, uint16_t = uint16_t,
	uint32_t = uint32_t, uint64_t = uint64_t, char16_t = char16_t, char32_t = char32_t,
	__signed = int, __signed__ = int, __unsigned = uint, __unsigned__ = uint
;
#define long /* Delete to fix stuff such as `long double' */



/* Enable some preprocessor extensions for better legacy support. */
#pragma extension("-ffixed-length-integrals")

/* Enable old-style classes (now emulated by
 * always extending `OldUserClass from rt.d200') */
#pragma extension("-fold-style-classes")

/* Enable old-style character literals, causing '\x12' to be compiled
 * as an alias for 0x12, but preventing user-code from using 'foo' as
 * an alias for "foo"! */
#pragma extension("-fcharacter-literals")

/* Not necessarily true, but legacy deemon was only ever built on
 * little-endian machines, meaning that this actually used to be true. */
#define __BYTEORDER__ 1234


#define __MEMORY_ORDER_RELAXED 0
#define __MEMORY_ORDER_CONSUME 1
#define __MEMORY_ORDER_ACQUIRE 2
#define __MEMORY_ORDER_RELEASE 3
#define __MEMORY_ORDER_ACQ_REL 4
#define __MEMORY_ORDER_SEQ_CST 5

/* Disable warnings about syntax deprecated in d200. */
#pragma warning("-Wno-d200")

/* The deemon 100+ runtime used reserved identifiers
 * for attributes names in a bunch of places:
 * >> fp = File.Writer();
 * >> fp.pack(); // You should use `fp.string' now
 * >> local my_cell = Cell(42);
 * >> my_cell.del(); // You should use `del my_cell.value' now
 * There are more like this, but you should get the idea.
 *
 * Deemon 200 on the other hand will now warn about the use
 * of reserved keywords as identifiers and attribute names,
 * suggesting refactoring, as well as doing something like
 * `my_cell.operator . ("del")()', which will work to suppress
 * such a warning, however since we're only here to keep
 * legacy code running as intended, just disable these types
 * of warnings! */
#pragma warning("-Wno-reserved")

/* Apparently, deemon 100+ didn't warn about things like
 * slash+star repeated inside of comments, or line-comments
 * being continued following an escaped line feed. (Deemon 200+
 * will only warn about the later if the next line doesn't start
 * with a line-comment, optionally preceded by white-space)
 * Since some legacy code does actually contain such comments,
 * disable warnings about them so-as not to annoy anyone. */
#pragma warning("-Wno-comments")




/* HINT: `__FORMAT__' -- Defined for code parsed by `deemon -F' (including scripts)
 * HINT: `__FORMAT_SCRIPT__' -- Defined for scripts found in comments by `deemon -F' */
#if defined(__FORMAT__) && defined(__FORMAT_SCRIPT__)
/* We're currently inside of an old-style format script.
 * Due to the way that deemon 100+ executed these, and how
 * deemon 200+ does now, there is a discrepancy in the value of
 * the current working directory in relation to the DDI filename,
 * as well as the __FILE__ macro.
 * In deemon 200+, the PWD will have automatically been set to
 * the folder that the script being formated is located inside
 * of. However in deemon 100+, the current working directory
 * will refer to whatever folder was set by the command-line
 * user, with __FILE__ either being an absolute path, or being
 * relative to that directory.
 * However in deemon 200+, __FILE__ may still be a relative path,
 * though not relative to the current working directory.
 * Using the combination of macros above, alongside the fact that
 * this file is the hub for backwards-compatibility with the old
 * deemon, and included whenever user-code uses one of the old-
 * style headers, we can reverse-engineer the value of PWD that
 * an old-style format script would expect.
 * NOTE: Old-style scripts often used to do something like the
 *       following to change PWD to their script:
 *       >> #include <fs>
 *       >> fs.chdir(fs.path.head(__FILE__));
 *       Because after doing that, they'd get a consistent system
 *       context for opening other files in order to produce format
 *       output.
 * In deemon 200+ this is no longer necessary because PWD
 * will have already been set to what the above would achieve,
 * with the following code undoing the directory change done
 * by such code.
 */
{
	/* Change PWD to the original PWD */
	import __fs = "fs";
	__stack local __rel = __fs.headof(__BASE_FILE__);
	if (__fs.isrel(__rel))
		__fs.chdir("../" * __rel.replace("\\", "/").count("/"));
}

#endif /* __FORMAT__ && __FORMAT_SCRIPT__ */





