/* Copyright (c) 2018-2024 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2024 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

import * from deemon;
import * from errors;

@@Usage:
@@>#include <tr1/unique_iterator>
@@>local list elem = { 10, 20, 20, 30, 30, 40, 50, 11, 12, 12, 20, 12, 70 };
@@>/* Skip equivalent consecutive entries in any given Iterator
@@> * This will print '10 20 30 40 50 11 12 20 12 70' */
@@>print tr1::unique_iterator(elem.operator __iterself__())...;
class unique_iterator: Iterator {
	public member __iter__: Iterator;
	this(iter: Iterator)
		: __iter__(iter)
	{ }

	@@have the Iterator double as an iterable
	operator iter(): Iterator -> copy this;

	private member m_first;
	private member m_second;

	operator next() {
		local result;
		if (m_first !is bound)
			m_first = __iter__.operator next();
		while (true) {
			try {
				m_second = __iter__.operator next();
			} catch (StopIteration) {
				result = m_first;
				del m_first;
				return result;
			}
			if (m_first != m_second)
				break;
			m_first = m_second;
		}
		result = m_first;
		m_first = m_second;
		return result;
	}
}

import .m_tr1_geometry;
global geometry = m_tr1_geometry;
