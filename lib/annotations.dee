/* Copyright (c) 2019 Griefer@Work                                            *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement in the product documentation would be  *
 *    appreciated but is not required.                                        *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

import * from deemon;

@@An annotation that may be used to overload a function by its arguments count
@@>import Overload from annotations;
@@>
@@>@Overload
@@>function foobar(x) {
@@> print "Called with 1 argument:",x;
@@>}
@@>@foobar.register
@@>function foobar(x,y) {
@@> print "Called with 2 arguments:",x,y;
@@>}
@@>foobar(10);    /* First variant */
@@>foobar(10,20); /* Second variant */
class Overload: Callable {

	private member primary: Callable;
	private member overloads: {Callable...} = [];
	this(func: Callable): primary(func) { }

	operator str(): string {
		return str primary;
	}
	operator repr(): string {
		File.Writer fp;
		fp	<< "Overload("
			<< repr primary
			<< ")";
		local invload = invalid_overload;
		for (local x: overloads) {
			if (x === invload)
				continue;
			fp << ".register(" << repr x << ")";
		}
		return fp.string;
	}

	private function invalid_overload(args...) {
		throw Error.TypeError(
			"function {} does not accept {} args"
			.format({ primary, #args }));
	}

	operator () (args...) {
		__stack local argc = #args;
		if (argc < #overloads)
			return overloads[argc](args...);
		return primary(args...);
	}

	@@Register a new overload to-be considered for invocation
	register(func: Callable): Overload {
		__stack local code = func.__code__;
		__stack local min = code.__argc_min__;
		__stack local max = code.__argc_max__;
		__stack local count = #overloads;
		if (max >= count) {
			overloads.resize(max + 1,invalid_overload);
			__stack local prim_code = primary.__code__;
			overloads.fill(prim_code.__argc_min__,prim_code.__argc_max__ + 1,primary);
		}
		for (__stack local i: [min:max + 1])
			overloads[i] = func;
		return this;
	}

}



@@An annotation that may be used to mark a function as deprecated, and have a warning be printed to :File.stderr the first time it is invoked
@@>import Deprecated from annotations;
@@>
@@>@Deprecated
@@>function mydepr() {
@@> print "In mydepr()";
@@>}
@@>@Deprecated("Don't call me!")
@@>function mydepr2() {
@@> print "In mydepr2()";
@@>}
@@>
@@>mydepr();  /* ... : Deprecated function `mydepr' called */
@@>mydepr2(); /* ... : Deprecated function `mydepr2' called: Don't call me! */
class Deprecated: Callable {
	private member m_func: Callable;
	private member m_message: string;
	private member m_didcall: bool = false;
	this(func: Callable, reason: string = "") {
		m_func = func;
		if (reason)
			m_message = reason;
	}
	operator str(): string {
		return str m_func;
	}
	operator repr(): string {
		if (m_message is bound)
			return "Deprecated({!r},{!r})".format({ m_func, m_message });
		return "Deprecated({!r})".format({ m_func });
	}

	operator () (args...) {
		if (!m_didcall) {
			import Traceback from deemon;
			m_didcall = true;
			local frame = Traceback()[1];
			local errout = File.stderr;
			errout
				<< frame.File
				<< "("
				<< frame.line + 1
				<< ","
				<< frame.col + 1
				<< ") : Deprecated ";
			if (m_func is Type) {
				errout
					<< "class `"
					<< m_func
					<< "' instantiated";
			} else {
				errout
					<< "function `"
					<< m_func
					<< "' called";
			}
			if (m_message is bound)
				print File.stderr: ":",m_message,;
			print File.stderr:;
		}
		return m_func(args...);
	}
}




@@An annotation that may be used wrap a function as only being allowed to be executed by a single thread at a time, as well as allow the function to be used in $with-statements
@@>import Synchronized from annotations;
@@>import Mutex from threading;
@@>@Synchronized
@@>function myfunc() {
@@> print "Synchronized call to myfunc()";
@@>}
@@>
@@>local mylock = Mutex();
@@>@Synchronized(mylock)
@@>function myfunc() {
@@> print "Synchronized call to myfunc()";
@@>}
@@When annotated with an explicit lock object, the annotated function is called while being surrounded by an ${operator enter} / ${operator leave} pair, thus allowing the use of a lock to restrict invocation"
class Synchronized: Callable {
	private member m_func: Callable;
	private member m_lock: Mutex from threading | Object;
	@@@param lock The lock that is entered prior to invocation of @func, and will be left afterwards. When omit, a new instance of :threading.Mutex will be constructed and used in its place"
	@@Construct a new Synchronized function annotation for @func
	this(func: Callable, lock?: Mutex from threading | Object) {
		m_func = func;
		if (lock is bound)
			m_lock = lock;
		else {
			m_lock = import("threading").Mutex();
		}
	}

	operator str(): string {
		return str m_func;
	}
	operator repr(): string {
		return "Synchronized({!r},{!r})".format({ m_func, m_lock });
	}

	operator enter(): none {
		return m_lock.operator enter();
	}
	operator leave(): none {
		return m_lock.operator leave();
	}
	operator () (args...) {
		with (m_lock) {
			return m_func(args...);
		}
	}

}




@@Annotation for timing how long a function took to execute
@@>import Timed from annotations;
@@>
@@>@Timed
@@>function myfunc() {
@@> print "In myfunc()";
@@>}
@@>
@@>myfunc();
@@>/* ??? Microseconds */
@@>print repr myfunc.total.microseconds;
@@>
@@>myfunc();
@@>/* ??? Microseconds (about 2x as many; probably less due to CPU caching) */
@@>print repr myfunc.total.microseconds;
class Timed: Callable {
	private static member m_libtime: Module;
	private member m_func: Callable;
	private member m_total_spend: Time from time;
	private member m_num_invocations: int = 0;
	this(func: Callable) {
		m_func = func;
		if (m_libtime !is bound)
			m_libtime = import("time");
		m_total_spend = m_libtime.Time(0);
	}

	operator str(): string {
		return str m_func;
	}

	operator repr(): string {
		return "Timed({!r})".format({ m_func });
	}

	operator () (args...) {
		local start = m_libtime.tick();
		try {
			return m_func(args...);
		} finally {
			m_total_spend += m_libtime.tick() - start;
			++m_num_invocations;
		}
	}

	@@Reset all timing data
	reset() {
		del total;
	}

	@@Get/del (reset)/set the amount of time that has
	@@already been spent while inside of the function.
	@@>print myfunc.total.microseconds;
	property total: Time from time = {
		get(): Time from time {
			return m_total_spend;
		}
		del() {
			m_total_spend = m_libtime.Time(0);
			m_num_invocations = 0;
		}
		set(value: Time from time) {
			if (value is none) {
do_del_total:
				del total;
			} else if (value is int from deemon) {
				if (!value) goto do_del_total;
				m_total_spend = m_libtime.makeanon(value);
			} else {
				if (value !is m_libtime.Time)
					throw Error.TypeError("Expected a Time object");
				m_total_spend = copy value;
			}
		}
	}

	@@@throw ValueError The function hasn't been called yet
	@@Get the average time spent while inside of the function
	@@>print myfunc.average.microseconds;
	property average: Time from time = {
		get(): Time from time {
			try {
				return m_total_spend / m_num_invocations;
			} catch (Error.ValueError.ArithmeticError.DivideByZero) {
				throw Error.ValueError(
					"No profiling data available for {}"
					.format({ m_func }));
			}
		}
	}
}


/* TODO: @Typed -- Ensures that input types match declared types
 * >> import * from deemon;
 * >> import Typed from annotations;
 * >> @Typed
 * >> function foo(x: int, y: int): int {
 * >>     return x + y;
 * >> }
 * >> foo(10,20);    // Ok
 * >> foo(10,"foo"); // Error: Argument `y' must be an `int', but is actually a `string'
 * TODO: Also extend the Overload annotation to look at argument
 *       types and try to overload depending on the argument types
 *       being passed.
 */




