/* Copyright (c) 2018 Griefer@Work                                            *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement in the product documentation would be  *
 *    appreciated but is not required.                                        *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

from deemon import callable, Error, file;

@"An annotation that may be used to overload a function by "
 "its arguments count"
@">import Overload from annotations;"
@">"
@">@Overload"
@">function foobar(x) {"
@"> print \"Called with 1 argument:\",x;"
@">}"
@">@foobar.register"
@">function foobar(x,y) {"
@"> print \"Called with 2 arguments:\",x,y;"
@">}"
@">foobar(10);    /* First variant */"
@">foobar(10,20); /* Second variant */"
class Overload: callable {

	@"->callable"
	private member primary;

	@"->[callable...]"
	private member overloads = [];

	@"(callable func)"
	this(func) {
		primary = func;
	}

	operator str() {
		return str primary;
	}
	operator repr() {
		file.writer fp;
		fp	<< "Overload("
			<< repr primary
			<< ")";
		local invload = invalid_overload;
		for (local x: overloads) {
			if (x === invload)
				continue;
			fp << ".register(" << repr x << ")";
		}
		return fp.string;
	}

	private function invalid_overload(args...) {
		throw Error.TypeError(
			"function {} does not accept {} args"
			.format({ primary, #args }));
	}

	operator () (args...) {
		__stack local argc = #args;
		if (argc < #overloads)
			return overloads[argc](args...);
		return primary(args...);
	}

	@"(function func)->Overload"
	@"Register a new overload to-be considered for invocation"
	register(func) {
		__stack local code = func.__code__;
		__stack local min = code.__argc_min__;
		__stack local max = code.__argc_max__;
		__stack local count = #overloads;
		if (max >= count) {
			overloads.resize(max + 1,invalid_overload);
			__stack local prim_code = primary.__code__;
			overloads.fill(prim_code.__argc_min__,prim_code.__argc_max__ + 1,primary);
		}
		for (__stack local i: [min:max + 1])
			overloads[i] = func;
		return this;
	}

}



@"An annotation that may be used to mark a function as deprecated, "
 "and have a warning be printed to :file.stderr the first time it is "
 "invoked"
@">import Deprecated from annotations;"
@">"
@">@Deprecated"
@">function mydepr() {"
@"> print \"In mydepr()\";"
@">}"
@">@Deprecated(\"Don't call me!\")"
@">function mydepr2() {"
@"> print \"In mydepr2()\";"
@">}"
@">"
@">mydepr();  /* ... : Deprecated function `mydepr' called */"
@">mydepr2(); /* ... : Deprecated function `mydepr2' called: Don't call me! */"
class Deprecated: callable {

	@"->callable"
	private member m_func;

	@"->string"
	private member m_message;

	@"->bool"
	private member m_didcall = false;

	@"(callable func,string reason=\"\")"
	this(func, reason = "") {
		m_func = func;
		if (reason)
			m_message = reason;
	}

	operator str() {
		return str m_func;
	}
	operator repr() {
		if (m_message is bound)
			return "Deprecated({!r},{!r})".format({ m_func, m_message });
		return "Deprecated({!r})".format({ m_func });
	}

	operator () (args...) {
		if (!m_didcall) {
			import traceback from deemon;
			m_didcall = true;
			local frame = traceback()[1];
			local errout = file.stderr;
			errout
				<< frame.file
				<< "("
				<< frame.line + 1
				<< ","
				<< frame.col + 1
				<< ") : Deprecated ";
			if (m_func is type_ from deemon) {
				errout
					<< "class `"
					<< m_func
					<< "' instantiated";
			} else {
				errout
					<< "function `"
					<< m_func
					<< "' called";
			}
			if (m_message is bound)
				print file.stderr: ":",m_message,;
			print file.stderr:;
		}
		return m_func(args...);
	}
}




@"An annotation that may be used wrap a function as only being allowed "
 "to be executed by a single thread at a time, as well as allow the "
 "function to be used in $with-statements"
@">import Synchronized from annotations;"
@">import mutex from threading;"
@">@Synchronized"
@">function myfunc() {"
@"> print \"Synchronized call to myfunc()\";"
@">}"
@">"
@">local mylock = mutex();"
@">@Synchronized(mylock)"
@">function myfunc() {"
@"> print \"Synchronized call to myfunc()\";"
@">}"
@"When annotated with an explicit lock object, the annotated function "
 "is called while being surrounded by an ${operator enter} / ${operator leave} "
 "pair, thus allowing the use of a lock to restrict invocation"
class Synchronized: callable {

	@"->callable"
	private member m_func;

	@"->:threading.mutex"
	@"->object"
	private member m_lock;

	@"(callable func)"
	@"(callable func,:threading.mutex lock)"
	@"(callable func,object lock)"
	@"@param lock The lock that is entered prior to invocation of @func, and "
	 "will be left afterwards. When omit, a new instance of :threading.mutex "
	 "will be constructed and used in its place"
	@"Construct a new Synchronized function annotation for @func"
	this(func, lock?) {
		m_func = func;
		if (lock is bound)
			m_lock = lock;
		else {
			m_lock = import("threading").mutex();
		}
	}

	operator str() {
		return str m_func;
	}
	operator repr() {
		return "Synchronized({!r},{!r})".format({ m_func, m_lock });
	}

	operator enter() {
		return m_lock.operator enter();
	}
	operator leave() {
		return m_lock.operator leave();
	}
	operator () (args...) {
		with (m_lock) {
			return m_func(args...);
		}
	}

}




@"Annotation for timing how long a function took to execute"
@">import Timed from annotations;"
@">"
@">@Timed"
@">function myfunc() {"
@"> print \"In myfunc()\";"
@">}"
@">"
@">myfunc();"
@">/* ??? Microseconds */"
@">print repr myfunc.time.microseconds;"
@">"
@">myfunc();"
@">/* ??? Microseconds (about 2x as many; probably less due to CPU caching) */"
@">print repr myfunc.time.microseconds;"
class Timed: callable {

	@"->module"
	private static member m_libtime;

	@"->callable"
	private member m_func;

	@"->:time.time"
	private member m_time_spend;

	@"(callable func)"
	this(func) {
		m_func = func;
		if (m_libtime !is bound)
			m_libtime = import("time");
		m_time_spend = m_libtime.time(0);
	}

	operator () (args...) {
		local start = m_libtime.tick();
		try {
			return m_func(args...);
		} finally {
			m_time_spend += m_libtime.tick() - start;
		}
	}

	@"->:time.time"
	@"Get/del (reset)/set the amount of time that has "
	 "already been spent while inside of the function."
	@">print myfunc.time.microseconds;"
	property time = {
		get() {
			return m_time_spend;
		}
		del() {
			m_time_spend = m_libtime.time(0);
		}
		set(value) {
			if (value is none)
				del time;
			else if (value is int from deemon)
				value = m_libtime.makeanon(value);
			else {
				if (value !is m_libtime.time)
					throw Error.TypeError("Expected a time object");
				m_time_spend = copy value;
			}
		}
	}

}



