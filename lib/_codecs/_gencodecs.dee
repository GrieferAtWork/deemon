/* Copyright (c) 2018-2024 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2024 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

import * from deemon;


@@Decode the lines of a unicode definitions file, and return
@@a 256-character string that can be used to decode that format
@@If the input @lines contain characters greater than @0xff, @none
@@is returned, and the caller should not attempt to override the
@@codec file, as special handling is required for the codepage format
function ParseUnicodeDefinitionsFile(
		lines: {Bytes...} | {string...}): (string, string) | none {
	local result = [0] * 256;
	for (local i: [:128])
		result[i] = i;
	local name = none;
	for (local l: lines) {
		l = l.strip();
		if (!l)
			continue;
		if (l.startswith("#")) {
			if (name is none) {
				l = l.lstrip("#").lstrip().lower();
				if (l.startswith("name:")) {
					name = l[#"name:":].lstrip().rsstrip(" to unicode");
				}
			}
			continue;
		}
		try {
			local chr, uni = l.scanf(" 0x%x 0x%x")...;
			if (chr > 0xff)
				return none;
			result[chr] = uni;
		} catch (...) {
			try {
				local chr = l.scanf(" 0x%x")...;
				if (chr > 0xff)
					return none;
				result[chr] = 0;
			} catch (...) {
			}
		}
	}
	return pack(string.fromseq(result), name);
}

function FormatCodecPageSourceFile(page, name) {
	local pattern =
"/* Copyright (c) 2018-2024 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2024 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */"
	"\n"
	"\n"
	"/* CODEC PAGE: {} */\n"
	"\n"
	"global cp =\n"
	"{};\n";
	return pattern.format({
		name,
		(for (local x: page.segments(16))
			"\t{!r}\n".format({ x })) + ...
	});
}


#if defined(__MAIN__)

import fs;
import socket from net;
import FTPClient from net.ftp;

local session = FTPClient(none, true)
	.CONNECT("ftp.unicode.org")
	.USER()
	.PASS();

function load_from_path(path) {
	session.CWD(path);
	for (local line: session.LIST()) {
		local filename = str line[line.rindex(" ") + 1:];
		if (filename.lower() in ["readme.txt", "datedversions"])
			continue;
		local data_filename = "data/{}".format({ filename });
		local data;
		if (!fs.stat.exists(data_filename)) {
			data = session.RETR(filename);
			file.open(data_filename, "w").write(data);
		} else {
			data = file.open(data_filename, "r").read();
		}
		local text, name = ParseUnicodeDefinitionsFile(data.splitlines())...;
		if (text is none)
			continue;
		if (name is none)
			name = filename.partition(".")[0].lower();
		local codec_shortname = name.partition("_")[0];
		if (codec_shortname.startswith("iso/iec "))
			codec_shortname = "iso"+codec_shortname[#"iso/iec ":];
		if (codec_shortname.startswith("iso "))
			codec_shortname = "iso"+codec_shortname[#"iso ":];
		codec_shortname = codec_shortname.partition(":")[0].strip();
		local codec_filename = "{}.dee".format({ codec_shortname });
		if (!fs.stat.exists(codec_filename)) {
			if (text !is none) {
				print "Loading", filename, "as", codec_filename, "from", data_filename;
				text = FormatCodecPageSourceFile(text, name);
				file.open(codec_filename, "w") << text;
			}
		}
	}
}

fs.chdir(fs.headof(__FILE__));
load_from_path("/Public/MAPPINGS/VENDORS/MICSFT/EBCDIC");
load_from_path("/Public/MAPPINGS/VENDORS/MICSFT/MAC");
load_from_path("/Public/MAPPINGS/VENDORS/MICSFT/PC");
load_from_path("/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS");
load_from_path("/Public/MAPPINGS/VENDORS/NEXT");
//load_from_path("/Public/MAPPINGS/VENDORS/MICSFT/WindowsBestFit");
load_from_path("/Public/MAPPINGS/ISO8859");
#endif























