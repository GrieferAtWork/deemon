local copyright =
"/* Copyright (c) 2018-2025 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2025 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */";

import fs;
import * from deemon;
import rt.hash as rtHash;

local converter_map: {string: (string, string, string) | string} = {
	"o"            : ("o", "?O",       "DeeObject *"),
	"b"            : ("b", "?Dbool",   "bool"),
	"d"            : ("d", "?Dint",    "int"),
	"i"            : ("d", "?Dint",    "int"),
	"u"            : ("u", "?Dint",    "unsigned int"),
	"x"            : ("u", "?Dint",    "unsigned int"),
	"Id"           : ("Id", "?Dint",   "Dee_ssize_t"),
	"Ii"           : ("Id", "?Dint",   "Dee_ssize_t"),
	"Iu"           : ("Iu", "?Dint",   "size_t"),
	"Iud"          : ("Id", "?Dint",   "size_t"),
	"Ix"           : ("Iu", "?Dint",   "size_t"),
	"I8d"          : ("I8d", "?Dint",  "int8_t"),
	"I8i"          : ("I8d", "?Dint",  "int8_t"),
	"I8u"          : ("I8u", "?Dint",  "uint8_t"),
	"I8x"          : ("I8u", "?Dint",  "uint8_t"),
	"I16d"         : ("I16d", "?Dint", "int16_t"),
	"I16i"         : ("I16d", "?Dint", "int16_t"),
	"I16u"         : ("I16u", "?Dint", "uint16_t"),
	"I16x"         : ("I16u", "?Dint", "uint16_t"),
	"I32d"         : ("I32d", "?Dint", "int32_t"),
	"I32i"         : ("I32d", "?Dint", "int32_t"),
	"I32u"         : ("I32u", "?Dint", "uint32_t"),
	"I32x"         : ("I32u", "?Dint", "uint32_t"),
	"I64d"         : ("I64d", "?Dint", "int64_t"),
	"I64i"         : ("I64d", "?Dint", "int64_t"),
	"I64u"         : ("I64u", "?Dint", "uint64_t"),
	"I64x"         : ("I64u", "?Dint", "uint64_t"),
	"hhd"          : ("hhd", "?Dint",  "signed char"),
	"hhi"          : ("hhd", "?Dint",  "signed char"),
	"hhu"          : ("hhu", "?Dint",  "unsigned char"),
	"hhx"          : ("hhu", "?Dint",  "unsigned char"),
	"hd"           : ("hd", "?Dint",   "short"),
	"hi"           : ("hd", "?Dint",   "short"),
	"hu"           : ("hu", "?Dint",   "unsigned short"),
	"hx"           : ("hu", "?Dint",   "unsigned short"),
	"ld"           : ("ld", "?Dint",   "long"),
	"li"           : ("ld", "?Dint",   "long"),
	"lu"           : ("lu", "?Dint",   "unsigned long"),
	"lx"           : ("lu", "?Dint",   "unsigned long"),
	"lld"          : ("ld", "?Dint",   "__LONGLONG"),
	"lli"          : ("ld", "?Dint",   "__LONGLONG"),
	"llu"          : ("lu", "?Dint",   "__ULONGLONG"),
	"llx"          : ("lu", "?Dint",   "__ULONGLONG"),
	"f"            : ("f", "?Dfloat",  "float"),
	"D"            : ("D", "?Dfloat",  "double"),
	"LD"           : ("LD", "?Dfloat", "long double"),
	"obj"          : "o",
	"obj:any"      : "o",
	"obj:sequence" : ("o", "?S?O",     "DeeObject *"),
	"obj:buffer"   : ("o", "?DBytes",  "DeeObject *"),
	"obj:int"      : ("o", "?Dint",    "DeeIntObject *",
		"\tif (DeeObject_AssertTypeExact({obj}, &DeeInt_Type))\n"
		"\t\tgoto err;\n"),
	"obj:string"   : ("o", "?Dstring", "DeeStringObject *",
		"\tif (DeeObject_AssertTypeExact({obj}, &DeeString_Type))\n"
		"\t\tgoto err;\n"),
	"obj:callable" : ("o", "?DCallable", "DeeObject *"),
	"c:char[]"  : ("o", "?Dstring", "DeeStringObject *",
		"\tif (DeeObject_AssertTypeExact({obj}, &DeeString_Type))\n"
		"\t\tgoto err;\n"
		"\t{obj}_str = DeeString_AsUtf8((DeeObject *){obj});\n"
		"\tif unlikely(!{obj}_str)\n"
		"\t\tgoto err;\n",
		("/*utf-8*/ char const *", "{}_str")),
	"c:wchar_t[]"  : ("o", "?Dstring", "DeeStringObject *",
		"\tif (DeeObject_AssertTypeExact({obj}, &DeeString_Type))\n"
		"\t\tgoto err;\n"
		"\t{obj}_str = (Dee_wchar_t const *)DeeString_AsWide((DeeObject *){obj});\n"
		"\tif unlikely(!{obj}_str)\n"
		"\t\tgoto err;\n",
		("Dee_wchar_t const *", "{}_str")),
	"c:ptr"        : ("o", "?Aptr?Ectypes:void", "DeeObject *",
		"\tif (DeeCTypes_GetPointer({obj}, &{obj}_ptr))\n"
		"\t\tgoto err;\n",
		("void *", "{}_ptr")),
	"c:bool"       : ("b", "?Dbool",   "bool"),
	"c:uint8_t"    : ("I8u", "?Dint",  "uint8_t"),
	"c:uint16_t"   : ("I16u", "?Dint", "uint16_t"),
	"c:uint32_t"   : ("I32u", "?Dint", "uint32_t"),
	"c:uint64_t"   : ("I64u", "?Dint", "uint64_t"),
	"c:int8_t"     : ("I8d", "?Dint",  "int8_t"),
	"c:int16_t"    : ("I16d", "?Dint", "int16_t"),
	"c:int32_t"    : ("I32d", "?Dint", "int32_t"),
	"c:int64_t"    : ("I64d", "?Dint", "int64_t"),
	"c:size_t"     : ("Iu", "?Dint",   "size_t"),
	"c:Dee_ssize_t": ("Iu", "?Dint",   "Dee_ssize_t"),
	"c:ssize_t"    : "c:Dee_ssize_t",
	"c:uintptr_t"  : ("Iu", "?Dint",   "uintptr_t"),
	"c:intptr_t"   : ("Id", "?Dint",   "intptr_t"),
	"c:uint"       : ("u",  "?Dint",   "unsigned int"),
	"c:int"        : ("d",  "?Dint",   "int"),
	"c:ulong"      : ("lu", "?Dint",   "unsigned long"),
	"c:long"       : ("ld", "?Dint",   "long"),
	"c:ullong"     : ("llu", "?Dint",  "unsigned long long"),
	"c:llong"      : ("lld", "?Dint",  "long long"),
	"nt:LONG"      : ("I32s", "?Dint", "LONG"),
	"nt:ULONG"     : ("I32u", "?Dint", "ULONG"),
	"nt:ULONG64"   : ("I64u", "?Dint", "ULONG64"),
	"nt:UINT"      : ("I32u", "?Dint", "UINT"),
	"nt:DWORD"     : ("I32u", "?Dint", "DWORD"),
	"nt:SIZE_T"    : ("Iu", "?Dint",   "SIZE_T"),
	"unix:fd"      : ("o", "?X2?Dint?DFile", "DeeObject *",
		"\t{obj}_fd = DeeUnixSystem_GetFD({obj});\n"
		"\tif unlikely({obj}_fd == -1)\n"
		"\t\tgoto err;\n",
		("int", "{}_fd")),
	"nt:HANDLE"    : ("o", "?X3?Dint?DFile?Ewin32:HANDLE", "DeeObject *",
		"\tif (DeeNTSystem_TryGetHandle({obj}, (void **)&h{obj}))\n"
		"\t\tgoto err;\n",
		("HANDLE", "h{}")),
	"nt:LPCSTR"    : ("o", "?Dstring", "DeeStringObject *",
		"\tif (DeeObject_AssertTypeExact({obj}, &DeeString_Type))\n"
		"\t\tgoto err;\n"
		"\t{obj}_str = (LPCSTR)DeeString_AsUtf8((DeeObject *){obj});\n"
		"\tif unlikely(!{obj}_str)\n"
		"\t\tgoto err;\n",
		("LPCSTR", "{}_str")),
	"nt:LPCWSTR"   : ("o", "?Dstring", "DeeStringObject *",
		"\tif (DeeObject_AssertTypeExact({obj}, &DeeString_Type))\n"
		"\t\tgoto err;\n"
		"\t{obj}_str = (LPCWSTR)DeeString_AsWide((DeeObject *){obj});\n"
		"\tif unlikely(!{obj}_str)\n"
		"\t\tgoto err;\n",
		("LPCWSTR", "{}_str")),
};

local function get_converter(name: string): (string, string, string) {
	local result = converter_map[name];
	while (result is string)
		result = converter_map[result];
	return result;
}


@@Emit a #include directive, and write the remainder of input to another file
function include(filename: string) {
	print "#include", repr filename;
	File.stdout = File.open(filename, "w");
	print copyright;
	print "/* WARNING: Autogenerated file", repr filename, "*/";
}

function getDefaultLibnameOfSourceFile(filename: string): string {
	filename = fs.tailof(filename);
	if (filename.endswith(".c.inl")) {
		filename = filename[:-6];
	} else {
		filename = fs.fileof(filename);
	}
	return filename.replace("-", "_").replace(".", "_");
}

global MODULE_NAME: string | none = none;
#define AUTOLIBNAME() \
	(MODULE_NAME !is none ? MODULE_NAME : getDefaultLibnameOfSourceFile(Traceback()[1].file))

global KNOWN_INTEGER_CONSTANTS: {int: string} = Dict();

@@Define an integer constant (gi -- GenerateInteger)
function gi(
		name: string, value: string | int = none,
		libname: string = none, visi: string = "PRIVATE",
		isvarying: bool = false, doc: string = none) {
	if (libname is none)
		libname = AUTOLIBNAME();
	if (libname)
		libname = libname + "_";
	if (value is none)
		value = name;
	function define_with_bits(sign, n_bits) {
		print("#define OBJ_", libname, name, " ((DeeObject *)&", libname, name, ")");
		print(visi, " DEFINE_", sign ? "" : "U", "INT", n_bits, "(", libname, name, ", ", value, ");");
	}
	local macro_name = f"{libname.upper()}{name.upper()}_DEF";
	print File.stderr: macro_name;
	print("#define ", macro_name, " \\\n\t",
		"{ ", repr name, ", OBJ_", libname, name, ", ",
		isvarying ? "MODSYM_FNORMAL" : "MODSYM_FREADONLY | MODSYM_FCONSTEXPR"),;
	if (doc !is none)
		print(", ", repr doc),;
	print(" },");
	local valid_bits = [15, 30, 45, 60];
	if (value is int) {
		/* The constant is given directly. */
		local existingName = KNOWN_INTEGER_CONSTANTS.get(value);
		if (existingName is none) {
			final local DEFAULT_KNOWN_CONSTANTS: {int: string} = {
				-1 : "DeeInt_MinusOne",
				0 : "DeeInt_Zero",
				1 : "DeeInt_One",
			};
			existingName = DEFAULT_KNOWN_CONSTANTS.get(value);
		}
		if (existingName !is none) {
			print("#define OBJ_", libname, name, " ", existingName);
			return;
		}
		KNOWN_INTEGER_CONSTANTS[value] = f"OBJ_{libname}{name}";
		if (value < 0) {
			for (local b: valid_bits) {
				if (value < -(1 << (b - 1)))
					continue;
				define_with_bits(true, b);
				return;
			}
			define_with_bits(true, 75);
		} else {
			for (local b: valid_bits) {
				if (value > ((1 << b) - 1))
					continue;
				define_with_bits(false, b);
				return;
			}
			define_with_bits(false, 75);
		}
	} else {
		/* The constant is given via a macro that, meaning we must generate dynamic code. */
		print("#if DeeInt_IsSmallInt(", value, ")");
		print("#define OBJ_", libname, name, " DeeInt_ForSmallInt(", value, ")");
		print("#elif ", value, " >= 0");
		local isFirst = true;
		for (local b: valid_bits) {
			print(isFirst ? "#if " : "#elif ", value, " <= ", ((1 << b) - 1).hex(), "ull /* ", b, "-bit */");
			isFirst = false;
			define_with_bits(false, b);
		}
		print("#else");
		define_with_bits(false, 75);
		print("#endif");
		print("#else /* ", value, " >= 0 */");
		local isFirst = true;
		for (local b: valid_bits) {
			print(isFirst ? "#if " : "#elif ", value, " >= -", (1 << (b - 1)).hex(), "ll /* ", b, "-bit */");
			isFirst = false;
			define_with_bits(true, b);
		}
		print("#else");
		define_with_bits(true, 75);
		print("#endif");
		print("#endif /* ", value, " < 0 */");
	}
}

@@Same as #gi, but surround the definition with an #ifdef for @value
function gii(
		name: string, value: string = none,
		libname: string = none, visi: string = "PRIVATE",
		isvarying: bool = false, doc: string = none, check: string = none) {
	if (libname is none)
		libname = AUTOLIBNAME();
	if (value is none)
		value = name;
	if (check is none && value is string)
		check = value;
	if (check is none) {
		gi(name, value, libname, visi, isvarying, doc);
	} else {
		print("#ifdef ", check);
		gi(name, value, libname, visi, isvarying, doc);
		print("#else /* ", check, " */");
		if (libname)
			libname = libname + "_";
		print("#define ", libname.upper(), name.upper(), "_DEF /* nothing */");
		print("#endif /* !", check, " */");
	}
}


function gw(name: string, args: string = "", docdecl: bool = true, kw: bool | none = none,
            libname: string = none, visi: string = "PRIVATE", isvarying: bool = false,
            ispure: bool = false, isconst: bool = false) {
	if (libname is none)
		libname = AUTOLIBNAME();
	local print_libMethod = import(".unpack").print_libMethod;
	local dReturnType;
	args, none, dReturnType = args.rpartition("->")...;
	if (!args) {
		args = dReturnType;
		dReturnType = "";
	}
	return print_libMethod(
			name: name,
			params: args,
			dReturnType: dReturnType,
			kw: kw,
			libname: libname,
			visi: visi,
			isvarying: isvarying,
			ispure: ispure,
			isconst: isconst
	);
}

