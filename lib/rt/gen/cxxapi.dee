/* Copyright (c) 2018-2023 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2023 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

import * from deemon;
import * from doc;
import _Dee_HashSelect from rt.gen.hash;
import util;

function commonType(types: {Type...}): Type {
	if (!types)
		return Object;
	types = List(types);
	local result = types.first;
	for (local x: types[1:]) {
		while (result !== Object && !Type.baseof(result, x))
			result = Type.__base__(result);
	}
	return result;
}

global final cxxTypes: {Type: string} = {
	Object    : "Object",
	string    : "string",
	Numeric   : "Numeric",
	bool      : "deemon::bool_",  /* Need namespace because also exists a member */
	int       : "deemon::int_",   /* Need namespace because also exists a member */
	float     : "deemon::float_", /* Need namespace because also exists a member */
	type none : "None",
	Bytes     : "Bytes",
	File      : "File",
	Super     : "Super",
	Type      : "Type",
	Cell      : "Cell",
	Iterator  : "Iterator",
	Sequence  : "Sequence",
	Set       : "Set",
	HashSet   : "HashSet",
	Mapping   : "Mapping",
	Dict      : "Dict",
	List      : "List",
	Tuple     : "Tuple",
};
global final cxxTypenamesAsType: {string: Type} =
	Dict(for (local t, n: cxxTypes) (n, t)).frozen;

global final cxxGenericSequenceTypes: {string...} = {
	"Cell"     : "Cell<>",
	"Iterator" : "Iterator<>",
	"Sequence" : "Sequence<>",
	"Set"      : "Set<>",
	"HashSet"  : "HashSet<>",
	"Mapping"  : "Mapping<>",
	"Dict"     : "Dict<>",
	"List"     : "List<>",
	/* Tuple is special in that it doesn't have a universal element type in c++ */
	"Tuple"    : "Sequence<>",
};

@@Types that have special treatment when written as (e.g.) @"HashSet with string",
@@which in turn gets compiled as `HashSet<string>` within the c++ API.
global final cxxAbstractSequenceTypes: {string...} = {
	"Cell",
	"Iterator",
	"Sequence",
	"Set",
	"HashSet",
	"List",
	"Tuple",
};

function templateGt(s: string): string {
	if (s.endswith(">"))
		return s + " ";
	return s;
}

function finalizeCxxType(tp: string): string {
	return cxxGenericSequenceTypes.get(tp, tp);
}

global typeExprToCxxType;
function typeExprsToCxxType(txs: {TypeExpr...}): string {
	local variants: {string...} = HashSet(
		for (local x: txs)
			finalizeCxxType(typeExprToCxxType(x))
	);
	if (!variants)
		return "Object";
	if (#variants == 1)
		return variants.first;
	local deemonType = commonType(HashSet(
		for (local name: variants)
			cxxTypenamesAsType.get(name.partition("<").first, Object)
	));
	return cxxTypes[deemonType];
}

function typeExprToCxxType(tx: TypeExpr): string {
	switch (tx.kind) {

	case "C": {
		local cellType = typeExprToCxxType(tx.Ccelltype);
		if (cellType == "Tuple")
			cellType = "Sequence";
		if (cellType in cxxAbstractSequenceTypes) {
			local itemType = typeExprToCxxType(tx.Citemtype);
			local itemType = finalizeCxxType(itemType);
			return f"{cellType}<{templateGt(itemType)}>";
		}
	}	break;

	case "T": {
		local tupleElemTypes: {TypeExpr...} = tx.Ttypes;
		local cxxElemTypes: {string...} = List(
			for (local x: tupleElemTypes)
				finalizeCxxType(typeExprToCxxType(x))
		);
		if (cxxElemTypes.last.endswith(">"))
			cxxElemTypes = cxxElemTypes[:-1] + [templateGt(cxxElemTypes.last)];
		return f"_AbstractTuple<{", ".join(cxxElemTypes)}>";
	}	break;

	case "X":
		return typeExprsToCxxType(tx.Xtypes);

	case "S": {
		local elemType = finalizeCxxType(typeExprToCxxType(tx.Stype));
		return f"Sequence<{templateGt(elemType)}>";
	}	break;

	case "M": {
		local keyType   = finalizeCxxType(typeExprToCxxType(tx.Mkeytype));
		local valueType = finalizeCxxType(typeExprToCxxType(tx.Mvaluetype));
		return f"Mapping<{templateGt(keyType)}, {templateGt(valueType)}>";
	}	break;

	default:
		break;
	}
	local deemonType = commonType(tx.types);
	while (deemonType !in cxxTypes)
		deemonType = deemonType.__base__;
	return cxxTypes[deemonType];
}

global final cxxParameterTypes: {Type: {string...}} = {
	string  : { "char const *" },
	Numeric : { "size_t", "Dee_ssize_t", "double" },
	bool    : { "bool" },
	int     : { "size_t", "Dee_ssize_t" },
	float   : { "double" },
	Bytes   : { "char const *" },
};

global final cxxParameterPackFormat: {string: string} = {
	"int"          : repr "d",
	"unsigned int" : repr "u",
	"char const *" : repr "s",
	"size_t"       : "DEE_PCKuSIZ",
	"Dee_ssize_t"  : "DEE_PCKdSIZ",
	"double"       : repr "f",
	"DeeObject *"  : repr "o",
	"bool"         : repr "b",
};

global final cxxReservedNames: {string...} = {
	"int",
	"float",
	"this",
	"bool",
	"template",
	"signed",
	"unsigned",
	"union",
	"delete",
};

function cxxEscapeReservedName(name: string): string {
	while (name in cxxReservedNames)
		name = name + "_";
	return name;
}

function typeExprToCxxParameterTypes(tx: TypeExpr): {string...} {
	local deemonType = commonType(tx.types);
	while (deemonType !in cxxTypes)
		deemonType = deemonType.__base__;
	local types = cxxParameterTypes.get(deemonType);
	if (types !is none)
		yield types...;
	yield "DeeObject *";
}

function parameterToCxxParameterTypes(param: Parameter): {none | string...} {
	if (param.isoptional || param.defexpr !is none)
		yield none;
	yield typeExprToCxxParameterTypes(param.typ)...;
}

function packCxxParameterListFormatString(cxxTypes: {string...}): string {
	local result = "";
	local inRawString = false;
	for (local cxxType: cxxTypes) {
		local format = cxxParameterPackFormat[cxxType];
		if (format.startswith('"')) {
			assert format.endswith('"');
			if (!inRawString) {
				if (result)
					result += " ";
				result += '"';
				inRawString = true;
			}
			result += format[1:-1];
		} else {
			assert !format.endswith('"');
			if (inRawString) {
				result += '"';
				inRawString = false;
			}
			result += " ";
			result += format;
		}
	}
	if (inRawString)
		result += '"';
	if (!result)
		result = '""';
	return result;
}

@@Given a list of parameters, and their possible types, yield all possible permutations
function getParameterPermutations(types: {{string | none...}...}): {{string...}...} {
	if (types) {
		local firstArgTypes: {string | none...} = types.first;
		local remainingArgsPermutations: {{string...}...} =
			List(getParameterPermutations(types[1:]));
		if (!remainingArgsPermutations) {
			for (local firstArgType: firstArgTypes) {
				if (firstArgType is none) {
					yield ();
				} else {
					yield (firstArgType,);
				}
			}
		} else {
			for (local firstArgType: firstArgTypes) {
				if (firstArgType is none) {
					yield remainingArgsPermutations...;
				} else {
					for (local remainingArgs: remainingArgsPermutations) {
						yield (firstArgType, remainingArgs...);
					}
				}
			}
		}
	} else {
		yield ();
	}
}

function encodeTemplateParameters(
		attributeName: string,
		cxxReturnType: string,
		templateParameters: {string...}): string {
	if (templateParameters) {
		/* TODO: Deemon doc text needs a way to expression generic types, so we're
		 *       somehow able to encode RTTI information such that the runtime will
		 *       know that (e.g.) `Sequence<T>.frozen' returns `Sequence<T>'
		 * This also goes for deemon code, where `{string...}' is `Sequence<T>'.
		 * Also, get rid of the "Cell with int" syntax. - Instead, the syntax
		 * used should be "Cell<int>" (which simply feels much more natural).
		 *
		 * Also: it should be possible for user-defined deemon types to be written
		 *       such that they take template parameters:
		 * >> // "List<T>" here is parsed like "List", but the parameter is stored in RTTI and may be used by an IDE
		 * >> class MyList<T>: List<T> {
		 * >>     public operator [](index: int): T {
		 * >>         return super[index];
		 * >>     }
		 * >> }
		 *
		 * The existence of the template parameter "T" must then be stored within
		 * the type's doc-string, and use of "T" in doc strings of members must
		 * reference the template parameter of the surrounding class. The same must
		 * then also be possible for user-defined functions:
		 * >> function getitem<T>(seq: {T...}, index: int): T {
		 * >>     return seq[index];
		 * >> }
		 *
		 * When a template parameter list is specified alongside a type, it must
		 * always be complete (i.e. have the same # of parameters as are used by
		 * that type). If a template parameter list is omitted, behavior is the
		 * same as though all parameters were "Object from deemon".
		 *
		 * Anonymous classes and functions can't have template parameter lists.
		 */

		// FIXME: Super hacky and not very well defined at all!
		//print File.stderr: attributeName, repr cxxReturnType;
		local usedType;
		if (#templateParameters > 1) {
			local narrowCxxReturnType = cxxReturnType.replace(" ", "");
			usedType = f"_AbstractTuple<{templateGt(", ".join(templateParameters))}>";
			switch (attributeName) {
			case "byattr":
				return cxxReturnType;
			case "get":
			case "pop":
			case "setdefault":
			case "setold_ex":
			case "setnew_ex":
				usedType = templateParameters.last;
				break;
			case "keys":
				usedType = templateParameters.first;
				break;
			case "values":
				if (narrowCxxReturnType == "Sequence<>")
					return f"Sequence<{templateGt(templateParameters.last)}>";
				break;
			case "items":
				if (narrowCxxReturnType == "Sequence<>") {
					return f"Sequence<{
						templateGt(f'_AbstractTuple<{
							templateGt(", ".join(templateParameters))
						}>')
					}>";
				}
				break;
			case "iterkeys":
				if (narrowCxxReturnType == "Iterator<>")
					return f"Iterator<{templateGt(templateParameters.first)}>";
				break;
			case "itervalues":
				if (narrowCxxReturnType == "Iterator<>")
					return f"Iterator<{templateGt(templateParameters.last)}>";
				break;
			case "iteritems":
				if (narrowCxxReturnType == "Iterator<>") {
					return f"Iterator<{
						templateGt(f"_AbstractTuple<{
							templateGt(", ".join(templateParameters))
						}>")
					}>";
				}
				break;
			default:
				break;
			}
			if (#templateParameters == 2) {
				if (narrowCxxReturnType in ["Mapping<>", "Dict<>"]) {
					return narrowCxxReturnType.replace("<>", f"<{
						templateGt(", ".join(templateParameters))
					}>");
				}
				if ("_AbstractTuple<Object, Object>" in cxxReturnType) {
					return cxxReturnType.replace(
						"_AbstractTuple<Object, Object>",
						f"_AbstractTuple<{templateGt(", ".join(templateParameters))}>"
					);
				}
			}
		} else {
			usedType = templateParameters.first;
		}
		cxxReturnType = cxxReturnType
			.replace("Object", usedType)
			.replace("<>", f"<{templateGt(usedType)}>")
			.replace(">>", "> >");
	}
	return cxxReturnType;
}



final class CxxType {
	public member typ: Type;
	public member doc: Doc;
	public member base: CxxType | none;
	this(typ: Type) {
		this.typ = typ;
		this.doc = Doc(typ);
		local typBase = Type.__base__(typ);
		this.base = typBase is none ? none : CxxType(typBase);
	}

	@@@param: exclude:            Names of attributes to exclude
	@@@param: templateParameters: Template type parameter list
	public function printCxxApi(
			exclude: {string...} = (),
			templateParameters: {string...} = ()
	) {
		local encounteredNames: {string...} = HashSet();
		for (local c: doc) {
			if (c.isprivate)
				continue;
			local name = c.name;
			if (name in exclude)
				continue;
			local cxxName = cxxEscapeReservedName(name);
			local nameHashSelect = _Dee_HashSelect(name);
			switch (c.kind) {

			case "operator":
				/* TODO: Like "function", but generate overloads for the associated c++ operator */
				break;

			case "function": {
				if (!encounteredNames.insert(name))
					continue; /* FIXME: Work-around because `Doc(Type)' enumerates attributes twice. */
				/* Every deemon type should have a list of C types:
				 *  - int: {ssize_t, size_t}
				 *  - float: {double}
				 *  - string: {char const *, wchar_t const *, char16_t const *, char32_t const *}
				 *  - ...
				 * Additionally, any deemon type can also be encoded as `DEE_ENABLE_IF_OBJECT_PTR_T()'
				 * We must generate overloads for all possible permutations of argument types, and
				 * always chose the correct return type. */

				@@Mapping for @(cxxParameterTypes...) to @(cxxReturnType, {cxxArgumentNames...})
				local overloads: {{string...}: (string, {string...})} = Dict();
				for (local d: c.decls) {
					@@List of c++ types that can be used to each parameter
					local cxxParamTypes: {{none | string...}...} = [];
					local cxxReturnType: string = finalizeCxxType(typeExprToCxxType(d.ret));
					local params: {Parameter...} = d.parameters;
					local parameterNames: {string...} = List(params.each.name);
					for (local param: params) {
						cxxParamTypes.append(List(parameterToCxxParameterTypes(param)));
					}
					for (local overloadArgs: getParameterPermutations(cxxParamTypes)) {
						local overloadParameterNames = parameterNames[:#overloadArgs];
						local existingReturnType, existingParameternames =
							overloads.get(overloadArgs)...;
						if (existingReturnType is none) {
							existingReturnType     = cxxReturnType;
							existingParameternames = overloadParameterNames;
						} else {
							if (existingReturnType != cxxReturnType)
								existingReturnType = "Object";
							if (existingParameternames != overloadParameterNames) {
								existingParameternames = List(
									for (local old, new: util.zip(
											existingParameternames,
											overloadParameterNames))
										old == new ? old : f"{old}_or_{new}");
							}
						}
						overloads[overloadArgs] = (
							existingReturnType,
							existingParameternames
						);
					}
				}
				for (local argTypes: overloads.keys.sorted()) {
					local cxxReturnType: string;
					local parameterNames: {string...};
					cxxReturnType, parameterNames = overloads[argTypes]...;
					cxxReturnType = encodeTemplateParameters(name, cxxReturnType, templateParameters);
					parameterNames = List(for (local x: parameterNames) cxxEscapeReservedName(x));
					local returnsVoid = cxxReturnType == "None";
					print("	"),;
					if (!returnsVoid)
						print("WUNUSED "),;
					local objectArgumentIndices = List(
						for (local i, argType: util.enumerate(argTypes))
							if (argType == "DeeObject *") (i + 1)
					);
					if (objectArgumentIndices)
						print("NONNULL_CXX((", ", ".join(objectArgumentIndices), ")) "),;
					if (returnsVoid) {
						print("void"),;
					} else {
						print("Ref<", templateGt(cxxReturnType), ">"),;
					}
					print(" (", cxxName, ")("),;
					local isFirstArg = true;
					local areAllArgumentsObjects = true;
					for (local argName, argType: util.zip(parameterNames, argTypes)) {
						if (!isFirstArg)
							print(", "),;
						print(argType),;
						if (!argType.endswith("*"))
							print(" "),;
						if (argType != "DeeObject *")
							areAllArgumentsObjects = false;
						print(argName),;
						isFirstArg = false;
					}
					print(") {");
					local callExpr: string;
					if (areAllArgumentsObjects) {
						if (parameterNames) {
							local argsVarname = "args";
							while (argsVarname in parameterNames)
								argsVarname += "_";
							print("		DeeObject *", argsVarname, "[", #parameterNames, "];");
							for (local i, parameterName: util.enumerate(parameterNames)) {
								print("		", argsVarname, "[", i, "] = ", parameterName, ";");
							}
							callExpr = f"DeeObject_CallAttrStringHash(this, {
								repr name}, {nameHashSelect}, {#parameterNames}, {argsVarname})";
						} else {
							callExpr = f"DeeObject_CallAttrStringHash(this, {
								repr name}, {nameHashSelect}, 0, NULL)";
						}
					} else {
						callExpr = f"DeeObject_CallAttrStringHashf(this, {
							repr name}, {nameHashSelect}, {
							packCxxParameterListFormatString(argTypes)}, {
							", ".join(parameterNames)})";
					}
					if (returnsVoid) {
						print("		decref(throw_if_null(", callExpr, "));");
					} else {
						print("		return inherit(", callExpr, ");");
					}
					print("	}");
				}
			}	break;

			case "property": {
				if (!encounteredNames.insert(name))
					continue; /* FIXME: Work-around because `Doc(Type)' enumerates attributes twice. */
				local cxxReturnType: string = typeExprsToCxxType(c.decls.each.ret);
				cxxReturnType = encodeTemplateParameters(name, cxxReturnType, templateParameters);
				local propertyWrapperClassName = f"_Wrap_{cxxName}";
				print("	class ", propertyWrapperClassName),;
				local canget = c.canget;
				local candel = c.candel;
				local canset = c.canset;
				if (canget || canset) {
					print;
					print("		: public deemon::detail::Const", canget ? "G" : "S", "etRefProxy<",
						propertyWrapperClassName, ", ",
						templateGt(cxxReturnType), ">"),;
					if (canget && canset) {
						print;
						print("		, public deemon::detail::ConstSetRefProxy<",
							propertyWrapperClassName, ", ",
							templateGt(cxxReturnType), ">"),;
					}
				}
				print(" {");
				print("	private:");
				print("		DeeObject *m_self; /* [1..1] Linked object */");
				print("	public:");
				if (canset) {
					/* Because of copy-assign, we must inherit the assignment operator. */
					print("		using deemon::detail::ConstSetRefProxy<",
						propertyWrapperClassName, ", ",
						templateGt(cxxReturnType), ">::operator =;");
				}
				print("		", propertyWrapperClassName, "(DeeObject *self) DEE_CXX_NOTHROW");
				print("			: m_self(self) {}");
				if (canget) {
					print("		WUNUSED DREF DeeObject *_getref() const DEE_CXX_NOTHROW {");
					print("			return DeeObject_GetAttrStringHash("
						"m_self, ", repr name, ", ", nameHashSelect, ");");
					print("		}");
					print("		WUNUSED bool bound() const {");
					print("			return throw_if_minusone(DeeObject_BoundAttrStringHash("
						"m_self, ", repr name, ", ", nameHashSelect, "));");
					print("		}");
				}
				if (candel) {
					print("		void del() const {");
					print("			throw_if_nonzero(DeeObject_DelAttrStringHash("
						"m_self, ", repr name, ", ", nameHashSelect, "));");
					print("		}");
				}
				if (canset) {
					print("		int _setref(DeeObject *value) const DEE_CXX_NOTHROW {");
					print("			return DeeObject_SetAttrStringHash("
						"m_self, ", repr name, ", ", nameHashSelect, ", value);");
					print("		}");
				}
				print("	};");
				print("	WUNUSED ", propertyWrapperClassName, " (", cxxName, ")() {");
				print("		return this;");
				print("	}");
			}	break;

			default:
				break;
			}
		}
	}
}
