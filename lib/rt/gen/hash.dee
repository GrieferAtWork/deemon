/* Copyright (c) 2018-2023 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2023 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

import * from deemon;
import ..hash as rtHash;

@@Generator function to create C-code `_Dee_HashSelect(...)` that
@@expands to the correct hash-value for @value at compile-time.
function _Dee_HashSelect(value: string): string {
	local hash32 = rtHash.hash32(value);
	local hash64 = rtHash.hash64(value);
	if (int.SIZE_MAX > 0xffffffff) {
		assert value.operator hash() == hash64;
	} else {
		assert value.operator hash() == hash32;
	}
	return f"_Dee_HashSelect(UINT32_C({
		hash32.hex()
	}), UINT64_C({
		hash64.hex()
	}))";
}
