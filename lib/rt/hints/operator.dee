/* Copyright (c) 2018-2025 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2025 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

import * from deemon;

@@Map TypeNativeOperator to their internal ID.
@@e.g. @(TNO_BYNAME["call"] == 7)
global final TNO_BYNAME: {string: int} = {
/*[[[deemon (print_TNO_BYNAME from "....src.deemon.method-hints.method-hints")();]]]*/
	"assign": 0,
	"move_assign": 1,
	"str": 2,
	"print": 3,
	"repr": 4,
	"printrepr": 5,
	"bool": 6,
	"call": 7,
	"call_kw": 8,
	"thiscall": 9,
	"thiscall_kw": 10,
	"call_tuple": 11,
	"call_tuple_kw": 12,
	"thiscall_tuple": 13,
	"thiscall_tuple_kw": 14,
	"iter_next": 15,
	"nextpair": 16,
	"nextkey": 17,
	"nextvalue": 18,
	"advance": 19,
	"int": 20,
	"int32": 21,
	"int64": 22,
	"double": 23,
	"hash": 24,
	"compare_eq": 25,
	"compare": 26,
	"trycompare_eq": 27,
	"eq": 28,
	"ne": 29,
	"lo": 30,
	"le": 31,
	"gr": 32,
	"ge": 33,
	"iter": 34,
	"foreach": 35,
	"foreach_pair": 36,
	"sizeob": 37,
	"size": 38,
	"size_fast": 39,
	"contains": 40,
	"getitem_index_fast": 41,
	"getitem": 42,
	"getitem_index": 43,
	"getitem_string_hash": 44,
	"getitem_string_len_hash": 45,
	"trygetitem": 46,
	"trygetitem_index": 47,
	"trygetitem_string_hash": 48,
	"trygetitem_string_len_hash": 49,
	"bounditem": 50,
	"bounditem_index": 51,
	"bounditem_string_hash": 52,
	"bounditem_string_len_hash": 53,
	"hasitem": 54,
	"hasitem_index": 55,
	"hasitem_string_hash": 56,
	"hasitem_string_len_hash": 57,
	"delitem": 58,
	"delitem_index": 59,
	"delitem_string_hash": 60,
	"delitem_string_len_hash": 61,
	"setitem": 62,
	"setitem_index": 63,
	"setitem_string_hash": 64,
	"setitem_string_len_hash": 65,
	"getrange": 66,
	"getrange_index": 67,
	"getrange_index_n": 68,
	"delrange": 69,
	"delrange_index": 70,
	"delrange_index_n": 71,
	"setrange": 72,
	"setrange_index": 73,
	"setrange_index_n": 74,
	"inv": 75,
	"pos": 76,
	"neg": 77,
	"add": 78,
	"inplace_add": 79,
	"sub": 80,
	"inplace_sub": 81,
	"mul": 82,
	"inplace_mul": 83,
	"div": 84,
	"inplace_div": 85,
	"mod": 86,
	"inplace_mod": 87,
	"shl": 88,
	"inplace_shl": 89,
	"shr": 90,
	"inplace_shr": 91,
	"and": 92,
	"inplace_and": 93,
	"or": 94,
	"inplace_or": 95,
	"xor": 96,
	"inplace_xor": 97,
	"pow": 98,
	"inplace_pow": 99,
	"inc": 100,
	"dec": 101,
	"enter": 102,
	"leave": 103,
	"getattr": 104,
	"getattr_string_hash": 105,
	"getattr_string_len_hash": 106,
	"boundattr": 107,
	"boundattr_string_hash": 108,
	"boundattr_string_len_hash": 109,
	"hasattr": 110,
	"hasattr_string_hash": 111,
	"hasattr_string_len_hash": 112,
	"delattr": 113,
	"delattr_string_hash": 114,
	"delattr_string_len_hash": 115,
	"setattr": 116,
	"setattr_string_hash": 117,
	"setattr_string_len_hash": 118,
/*[[[end]]]*/
}.frozen;

@@Map TypeNativeOperator to their name, given their ID
@@e.g. @(TNO_BYID[7] == "call")
global final TNO_BYID: {int: string} = Mapping.frozen(
	for (local id, name: TNO_BYNAME) (name, id));
