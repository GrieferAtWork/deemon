/* Copyright (c) 2018-2023 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2023 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */
import * from deemon;

@[optional.gatw.doc("(items:?S?O)->")]
@[optional.gatw.doc("(items!)->")]
@@Returns the lowers element of @items or @none when empty
@@Objects are always compared with the current winner as left operand
function min(items...) {
	if (#items == 1)
		return items[0] < ...;
	return items < ...;
}

@[optional.gatw.doc("(items:?S?O)->")]
@[optional.gatw.doc("(items!)->")]
@@Returns the greatest element of @items or @none when empty
@@Objects are always compared with the current winner as left operand
function max(items...) {
	if (#items == 1)
		return items[0] > ...;
	return items > ...;
}

@[optional.gatw.doc("(items:?S?Dfloat)->?Dfloat")]
@[optional.gatw.doc("(items!)->?Dfloat")]
@@Returns the average of all elements in @items
@@All elements are casted to float, added and devided by @(#items)
function avg(items...) {
	if (#items == 1)
		items = items[0];
	local result = 0.0;
	local count = 0;
	for (local item: items) {
		result += item;
		++count;
	}
	return result / count;
}

@[optional.gatw.doc("(items:?S?O)->?Dbool")]
@[optional.gatw.doc("(items!)->?Dbool")]
@@Returns @true if all elements in @items evaluate to @true
function all(items...) {
	if (#items == 1)
		return items[0] && ...;
	return items && ...;
}

@[optional.gatw.doc("(items:?S?O)->?Dbool")]
@[optional.gatw.doc("(items!)->?Dbool")]
@@Returns @true if any element in @items evaluates to @true
function any(items...) {
	if (#items == 1)
		return items[0] || ...;
	return items || ...;
}

@[optional.gatw.doc("(items:?S?O)->")]
@[optional.gatw.doc("(items!)->")]
@@Returns the sum of all arguments by adding them together
@@The result is always replaced with the addition of @(result + next)
@@Returns @none if no arguments are given
@@NOTE: Use of this function is mostly redundant and code should be updated to use @(items + ...) instead
function sum(items...) {
	if (#items == 1)
		return items[0] + ...;
	return items + ...;
}

@@Returns the sqare of @x, that is @(x * x)
function sqr(x) {
	return x * x;
}

@@Returns the ceiled integral value of a given @float @x
function ceil(x: float): int {
	local result = (int)x;
	if (x > 0) {
		if (x != result)
			++result;
	}
	return result;
}

@@Returns the floored integral value of a given @float @x
function floor(x: float): int {
	local result = (int)x;
	if (x < 0) {
		if (x != result)
			--result;
	}
	return result;
}

@@Returns the rounded integral value of a given @float @x
function round(x: float): int {
	/* Truncated; aka. rounded towards zero. */
	local result = (int)x;
	local diff = x - result;
	if (x >= 0) {
		if (0.5 <= diff)
			++result;
	} else {
		if (-0.5 <= diff)
			++result;
	}
	return result;
}

@@Merges @seqs given sequences into a list of @seqs-elemntal sequences,
@@where the index in every of those sequences is equivalent to the position of
@@the origin Sequence in the original argument list
@@HINT: The size of the returned list is @((for (x: seqs) #x) < ...)
@@>import zip from util;
@@>print zip([10, 20, 30], [40, 50, 60])...;     /* "(10, 40) (20, 50) (30, 60)" */
@@>print zip([10, 20, 30], [40, 50, 60, 70])...; /* "(10, 40) (20, 50) (30, 60)" */
@@>/* `70' is ignored because the shortest Sequence's length is used */
function zip(seqs...: Sequence): {Sequence...} {
	local iterators = {(
		for (local x: seqs)
			x.operator iter()
	)...};
	try {
		for (;;) {
			yield Tuple(
				for (local it: iterators)
					it.operator next());
		}
	} catch (Signal.StopIteration) {
	}
}

@@Iterate the given @seq and yield its items, as well as
@@an associated index number, starting at @start or @0
@@>import enumerate from util;
@@>function enumItems() {
@@>    yield 10;
@@>    yield 20;
@@>    yield 30;
@@>}
@@>for (local index, item: enumerate(enumItems())) {
@@>    /* Item number 0 is 10 */
@@>    /* Item number 1 is 20 */
@@>    /* Item number 2 is 30 */
@@>    print "Item number", index, "is", item;
@@>}
function enumerate(seq: Sequence, start: int = 0): Sequence {
	local index = start;
	for (local item: seq) {
		yield pack(index, item);
		++index;
	}
}

@[optional.gatw.doc("(x:?Dint)->?Dint")]
@[optional.gatw.doc("(x:?Dfloat)->?Dfloat")]
@[optional.gatw.doc("(x)->?O")]
@@Return the absolute value of @x
@@>import abs from util;
@@>print abs(10);  /* 10 */
@@>print abs(-10); /* 10 */
function abs(x) {
	return x < 0 ? -x : x;
}


@@Helper function that implements the normalization/clamping of
@@conventional @(operator [:]) and friends of all built-in sequence
@@types, including @List and @Tuple.
@@
@@> import clamprange from util;
@@> print repr clamprange(0, 10, length: 20);      // (0, 10)
@@> print repr clamprange(0, 20, length: 20);      // (0, 20)
@@> print repr clamprange(0, 21, length: 20);      // (0, 20)
@@> print repr clamprange(0, -1, length: 20);      // (0, 19)
@@> print repr clamprange(-2, -1, length: 20);     // (18, 19)
@@> print repr clamprange(-20, -1, length: 20);    // (0, 19)
@@> print repr clamprange(-21, -1, length: 20);    // (19, 19)
@@> print repr clamprange(-22, -21, length: 20);   // (18, 19)
@@> print repr clamprange(5, 0, length: 20);       // (5, 5)
@@> print repr clamprange(5, none, length: 20);    // (5, 20)
@@> print repr clamprange(none, 19, length: 20);   // (0, 19)
@@> print repr clamprange(none, none, length: 20); // (0, 20)
@@> print repr clamprange(-1, 10, length: 0);      // (0, 0)
@@
@@@param start:  The range's starting index, or @none if omitted (as in @foo[:end])
@@@param end:    The range's end index, or @none if omitted (as in @foo[start:])
@@@param length: The associated sequence's length. The returned range's start/end
@@               indices are guarantied to be `<=` this value. Behavior is undefined
@@               when this value is negative.
@@@return: The [lo,hi) bounds of of the range that is *actually* being accessed.
@@         This function guaranties that `lo <= hi <= length`
function clamprange(start: int | none, end: int | none, length: int): (int, int) {
	/* NOTE: This function's implementation mirrors `DeeSeqRange_DoClamp()'
	 *       from deemon's C implementation. */
	if (start is none) {
		start = 0;
	} else if (start >= length) {
		goto empty_range;
	} else if (start < 0) {
		start += length;
		@[unlikely]
		if (start < 0) {
			try {
#if 0 /* Not needed because deemon uses floor-mod */
				start = length - ((-start) % length);
#else
				start %= length;
#endif
			} catch (Error.ValueError.ArithmeticError.DivideByZero) {
				goto empty_range;
			}
		}
	}
	/*assert start <= length;*/

	if (end is none) {
		end = length;
	} else if (end < 0) {
		end += length;
		@[unlikely]
		if (end < 0) {
			try {
#if 0 /* Not needed because deemon uses floor-mod */
				end = length - ((-end) % length);
#else
				end %= length;
#endif
			} catch (Error.ValueError.ArithmeticError.DivideByZero) {
				goto empty_range;
			}
		}
	} else if (end > length) {
		end = length;
	}
	/*assert end <= length;*/

	@[unlikely]
	if (end < start)
		end = start;
	return (start, end);
empty_range:
	return (length, length);
}
