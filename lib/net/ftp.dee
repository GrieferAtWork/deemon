/* Copyright (c) 2018-2022 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2022 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

import * from deemon;
import NetError, socket, sockaddr from net;

local function recvAll(sock: socket): Bytes {
	local result = sock.recv();
	local temp = result;
	while (temp) {
		temp = sock.recv();
		result += temp;
	}
	return result;
}


@@An object-oriented interface for working with the FTP protocol
@@>local session = FTPClient()
@@>    .CONNECT("ftp.unicode.org")
@@>    .USER()
@@>    .PASS()
@@>    .CWD("/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS");
@@>for (local line: session.LIST())
@@>    print repr line;
class FTPClient {

	private member m_socket: socket;
	private member m_passv_address: sockaddr;
	private member m_verbose: bool;

	this(sock: socket = none, verbose: bool = false) {
		if (sock is none)
			sock = socket("INET", "STREAM", "TCP");
		m_socket = sock;
		m_verbose = verbose;
	}

	function CONNECT(addr: string, port: int = 21): FTPClient {
		m_socket.connect(addr, port);
		local resp = m_socket.recv();
		if (!resp.startswith("220 "))
			throw NetError("Not an FTP server: {!r}".format({ resp }));
		if (m_verbose)
			print "CONNECT:", repr resp;
		return this;
	}

	function USER(name: string = "anonymous"): FTPClient {
		m_socket.send("USER {}\r\n".format({ name }));
		local resp = m_socket.recv();
		if (!resp.startswith("331 "))
			throw NetError("FTP login failed: {!r}".format({ resp }));
		if (m_verbose)
			print "USER:", repr resp;
		return this;
	}

	function PASS(pass: string = "mozilla@example.com"): FTPClient {
		m_socket.send("PASS {}\r\n".format({ pass }));
		local resp = m_socket.recv();
		if (!resp.startswith("230 "))
			throw NetError("FTP password rejected: {!r}".format({ resp }));
		if (m_verbose)
			print "PASS:", repr resp;
		return this;
	}

	function PASV(): FTPClient {
		m_socket.send("PASV\r\n");
		local resp = m_socket.recv();
		if (!resp.startswith("227 "))
			throw NetError("FTP passive mode failed: {!r}".format({ resp }));
		local a, b, c, d, e, f = resp[resp.index("(") + 1:].scanf("%d,%d,%d,%d,%d,%d")...;
		m_passv_address = sockaddr("INET", a, b, c, d, (e << 8) | f);
		if (m_verbose)
			print "PASV:", repr resp;
		return this;
	}

	function CWD(path: string): FTPClient {
		m_socket.send("CWD {}\r\n".format({ path }));
		local resp = m_socket.recv();
		if (!resp.startswith("250 "))
			throw NetError("FTP CWD failed: {!r}".format({ resp }));
		if (m_verbose)
			print "CWD:", repr resp;
		return this;
	}

	private function receive(commandName: string, command: string): string {
		if (m_passv_address !is bound)
			PASV();
		m_socket.send(command);
		local passiveSocket = socket("INET", "STREAM", "TCP");
		passiveSocket.connect(m_passv_address);
		del m_passv_address;
		local resp = m_socket.recv();
		if (!resp.startswith("150 "))
			throw NetError("FTP {} failed: {!r}".format({ commandName, resp }));
		if (m_verbose)
			print commandName + ":", repr resp;
		local result = recvAll(passiveSocket);
		passiveSocket.close();
		local resp = m_socket.recv();
		if (!resp.startswith("226 "))
			throw NetError("FTP {} failed: {!r}".format({ commandName, resp }));
		if (m_verbose)
			print commandName + ":", repr resp;
		return result;
	}

	function LIST(): {Bytes...} {
		return receive("LIST", "LIST\r\n").rstrip().splitlines();
	}

	function RETR(filename: string): Bytes {
		return receive("RETR", "RETR {}\r\n".format({ filename }));
	}

}




















