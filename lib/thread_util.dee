/* Copyright (c) 2018-2025 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2025 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

import * from deemon;
import * from threading;


@@Suspends executing within the given thread @t until the returned object has
@@been destroyed, or until its @(operator leave) operator has been invoked.
@@
@@Make sure not to acquire any lock that the thread may be holding while
@@you're suspending it. Doing so will cause a deadlock.
@@
@@Also note that this function acts synchronously, meaning that once it returns
@@the with_closure to the caller, the given thread @t will already be suspended.
@@Also note that the thread @t can still be interrupted
@@
@@>import Thread from deemon;
@@>import milliseconds, seconds from time;
@@>import suspend_thread from thread_util;
@@>local myThread = Thread(() -> {
@@>    for (;;) {
@@>        print "In thread";
@@>        Thread.sleep(milliseconds(20));
@@>    }
@@>});
@@>myThread.start();
@@>Thread.sleep(seconds(1));
@@>with (suspend_thread(myThread)) {
@@>    print "The thread is now suspended";
@@>    Thread.sleep(milliseconds(100));
@@>}
@@>print "The thread is now running again";
@@>Thread.sleep(seconds(1));
@@>myThread.interrupt();
@@>myThread.join();
function suspend_thread(t: Thread) {
	local key = Semaphore(0);
	local sync = Semaphore(0);

	/* Send an interrupt to the thread. */
	t.interrupt(() -> {
		/* Signal to indicate that the thread is now suspended. */
		sync.release();
		/* Wait until we're allowed to resume again. */
		key.waitfor();
	}, pack());

	/* Wait for the interrupt to be acknowledged. */
	sync.waitfor();

	/* Return a with-compatible object. */
	return (class {
		private member m_key: Semaphore;
		this(key: Semaphore) { m_key = key; }
		operator leave() { m_key.release(); }
		operator enter() { }
	})(key);
}
