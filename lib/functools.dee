/* Copyright (c) 2018-2022 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2022 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

import * from deemon;

@@Convert an old-style compare predicate to a new-style key function
@@When called as @(cmp(lhs, rhs)), the given @cmp function should
@@return @(return < 0) when @(lhs < rhs), return @(return == 0)
@@when @(lhs == rhs) and return @(return > 0) when @(lhs > rhs)
function predcmp2key(cmp: Callable): Callable {
	class KeyClass {
		private member m_self;
		this(self) { m_self = self; }
		operator <  (other) -> cmp(this.m_self, other.m_self) <  0;
		operator <= (other) -> cmp(this.m_self, other.m_self) <= 0;
		operator == (other) -> cmp(this.m_self, other.m_self) == 0;
		operator != (other) -> cmp(this.m_self, other.m_self) != 0;
		operator >  (other) -> cmp(this.m_self, other.m_self) >  0;
		operator >= (other) -> cmp(this.m_self, other.m_self) >= 0;
	}
	return KeyClass;
}

@@Convert an old-style compare-lo predicate to a new-style key function
@@>import string from deemon;
@@>import predlo2key from functools;
@@>local x = ["FOO", "bar", "FOoBaR"];
@@>x.sort(key: predlo2key((x, y) -> x.lower() < y.lower()));
@@>x.sort(key: x -> x.lower()); /* Same as this */
@@>x.sort(key: string.lower);   /* Same as this */
function predlo2key(pred_lo: Callable): Callable {
	class KeyClass {
		private member m_self;
		this(self) { m_self = self; }
		operator < (other) -> pred_lo(this.m_self, other.m_self);
		operator <= (other) -> !pred_lo(other.m_self, this.m_self);
		operator == (other) -> !pred_lo(this.m_self, other.m_self) && !pred_lo(other.m_self, this.m_self);
	}
	return KeyClass;
}

@@Convert an old-style compare-eq predicate to a new-style key function
@@>import string from deemon;
@@>import predeq2key from functools;
@@>local x = ["FOO", "foo", "FOoBaR"];
@@>print x.find("foo", key: predeq2key((x, y) -> x.lower() == y.lower()));
@@>print x.find("foo", key: x -> x.lower()); /* Same as this */
@@>print x.find("foo", key: string.lower);   /* Same as this */
function predeq2key(pred_eq: Callable): Callable {
	class KeyClass {
		private member m_self;
		this(self) { m_self = self; }
		operator == (other) -> pred_eq(this.m_self, other.m_self);
	}
	return KeyClass;
}


@@@return Always re-returns @ob
@@An identity key function that simply re-returns the given @ob
@@Since key functions are usually optional, this function may be used as a
@@default binding by implementations not designed to be used without any key function
final function identity(ob: Object): Object {
	return ob;
}

@@@return A key function that is the combination of all given @keys
@@Construct and return a key function which, when executed, transforms the
@@given object using all of the given @keys functions in reverse order,
@@meaning that the last function is executed first, while the return value
@@of the first function is eventually propagated as the actual key value
function keycombine(keys...: Callable): Callable {
	if (#keys == 1)
		return keys[0];
	local keyfuncs = keys.reversed();
	return x -> {
		for (local f: keyfuncs)
			x = f(x);
		return x;
	};
}



