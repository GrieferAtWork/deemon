/* Copyright (c) 2018 Griefer@Work                                            *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement in the product documentation would be  *
 *    appreciated but is not required.                                        *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

/* Functions from this module are referenced by the
 * compiler when addressing unbound operators:
 * >> local items = [10,30,20,7];
 * >> items.sort(operator <); // Compiled as `items.sort(lo from operators)'
 */

import * from deemon;

@@Bind a given @operator_function to execute the associated operator for a specific type @tp only:
@@>import bind from operators;
@@>import * from deemon;
@@>local sequence_add = bind(sequence,operator +);
@@>local foo = [10,20,30];
@@>local bar = [40,50,60];
@@>// Invokes `(foo as sequence).operator + (bar)'
@@>print repr sequence_add(foo,bar);
@@>// Invokes `foo.operator + (bar)'
@@>print repr operator + (foo,bar);
function bind(tp: type object, operator_function: callable): callable {
	return [](x,args...) {
		import Error from deemon;
		if (x !is tp && !tp.isgeneric) {
			throw Error.TypeError(
				"Instance of {} is not derived from {}".
				format({ type x, tp }));
		}
		return operator_function((x as tp),args...);
	};
}


/* Don't warn about the use of reserved keywords as identifiers.
 * This module is _supposed_ to define symbols with those names! */
#pragma warning("-Wno-reserved")

function constructor(self,args...): none -> self.operator constructor(args...);
function copy(self) -> copy self;
function deepcopy(self) -> deepcopy self;
function destructor(self): none -> self.operator destructor();
function assign(self,other) -> self := other;
function moveassign(self,other) -> self.operator = move (other);
function str(self): string -> str self;
function repr(self): string -> repr self;
function bool(self): bool from deemon -> !!self;
function call(self: callable | object, args: tuple) -> self(args...);
function next(self: iterator | object) -> self.operator next();
function int(self: numeric | object): int from deemon -> self.operator int();
function float(self): float from deemon -> self.operator float();
function inv(self) -> ~self;
function pos(self) -> +self;
function neg(self) -> -self;
function add(self,other) -> self + other;
function sub(self,other) -> self - other;
function mul(self,other) -> self * other;
function div(self,other) -> self / other;
function mod(self,other) -> self % other;
function shl(self,other) -> self << other;
function shr(self,other) -> self >> other;
function and(self,other) -> self & other;
function or(self,other) -> self | other;
function xor(self,other) -> self ^ other;
function pow(self,other) -> self ** other;
function inc(self) -> self.operator ++ ();
function dec(self) -> self.operator -- ();
function iadd(self,other) -> self.operator += (other);
function isub(self,other) -> self.operator -= (other);
function imul(self,other) -> self.operator *= (other);
function idiv(self,other) -> self.operator /= (other);
function imod(self,other) -> self.operator %= (other);
function ishl(self,other) -> self.operator <<= (other);
function ishr(self,other) -> self.operator >>= (other);
function iand(self,other) -> self.operator &= (other);
function ior(self,other) -> self.operator |= (other);
function ixor(self,other) -> self.operator ^= (other);
function ipow(self,other) -> self.operator **= (other);
function hash(self): int from deemon -> self.operator hash();
function eq(self,other): bool from deemon | object -> self == other;
function ne(self,other): bool from deemon | object -> self != other;
function lo(self,other): bool from deemon | object -> self < other;
function le(self,other): bool from deemon | object -> self <= other;
function gr(self,other): bool from deemon | object -> self > other;
function ge(self,other): bool from deemon | object -> self >= other;
function iter(self: sequence | object): iterator | object -> self.operator iter();
function size(self: sequence | object): int from deemon | object -> #self;
function contains(self: sequence | object, item): bool from deemon | object -> item in self;
function getitem(self: sequence | object, index: int from deemon | object) -> self[index];
function delitem(self: sequence | object, index: int from deemon | object): none -> self.operator del[] (index);
function setitem(self: sequence | object, index: int from deemon | object, value): none -> self.operator [] (index,value);
function getrange(self: sequence | object, begin: int from deemon | object, end: int from deemon | object) -> self[begin:end];
function delrange(self: sequence | object, begin: int from deemon | object, end: int from deemon | object): none -> self.operator del[:] (begin,end);
function setrange(self: sequence | object, begin: int from deemon | object, end: int from deemon | object, value: sequence | object): none -> self.operator [:] (begin,end,value);
function getattr(self, name: string) -> self.operator . (name);
function delattr(self, name: string): none -> self.operator del. (name);
function setattr(self, name: string, value): none -> self.operator .= (name,value);
function enumattr(self): {attribute...} -> self.operator enumattr();
function enter(self): none -> self.operator enter();
function leave(self): none -> self.operator leave();
@[gatw.doc("(self:?Dfile,max_bytes=!-1)->?Dstring")]
function read(self,...) -> self.operator read(...);
@[gatw.doc("(self:?Dfile,data:?Dbytes,start=!0,end=!-1)->?Dint")]
@[gatw.doc("(self:?Dfile,data:?Dstring,start=!0,end=!-1)->?Dint")]
function write(self,...) -> self.operator write(...);
function seek(self: file, off: int from deemon, whence: int from deemon): int from deemon -> self.operator seek(off,whence);
function sync(self: file): none -> self.operator sync();
function trunc(self: file, pos: int from deemon): none -> self.operator trunc(pos);
function close(self: file): none -> self.operator close();
@[gatw.doc("(self:?Dfile,pos:?Dint)->?Dstring")]
@[gatw.doc("(self:?Dfile,max_bytes:?Dint,pos:?Dint)->?Dstring")]
function pread(self,...) -> self.operator pread(...);
@[gatw.doc("(self:?Dfile,data:?Dbytes,pos:?Dint)->?Dint")]
@[gatw.doc("(self:?Dfile,data:?Dbytes,max_bytes:?Dint,pos:?Dint)->?Dint")]
@[gatw.doc("(self:?Dfile,data:?Dbytes,start:?Dint,end:?Dint,pos:?Dint)->?Dint")]
@[gatw.doc("(self:?Dfile,data:?Dstring,pos:?Dint)->?Dint")]
@[gatw.doc("(self:?Dfile,data:?Dstring,max_bytes:?Dint,pos:?Dint)->?Dint")]
@[gatw.doc("(self:?Dfile,data:?Dstring,start:?Dint,end:?Dint,pos:?Dint)->?Dint")]
function pwrite(self,...) -> self.operator pwrite(...);
function getc(self: file): int from deemon -> self.operator getc();
function ungetc(self: file, c: int from deemon): int from deemon -> self.operator ungetc(c);
function putc(self: file, c: int from deemon): int from deemon -> self.operator putc(c);

/* Implementation-specific functions for ambiguous operator calls.
 * An implementation is required to provide these, but have them
 * invoke the (overridable) regular operators exported from this
 * module. */

#if __DEEMON_VARIANT__ == "gatw" && \
	__has_feature(deemon_inline_assembly)

@[gatw.doc("(a,b?)->")]
@[gatw.doc("pos(a) or add(a,b)")]
function __pooad(a,b...) {
	__asm__({
		push   arg @a
		push   cmp eq, #arg @b, $0
		jf     pop, 1f
		push   call global @pos, #1
		ret    pop
	.adjstack 1
1:		unpack arg @b, #1
		push   call global @add, #2
		ret    pop
	}	:
		: "x" (a)
		, "x" (b)
		: "noreturn"
	);
}

@[gatw.doc("(a,b?)->")]
@[gatw.doc("neg(a) or sub(a,b)")]
function __neosb(a,b...) {
	__asm__({
		push   arg @a
		push   cmp eq, #arg @b, $0
		jf     pop, 1f
		push   call global @neg, #1
		ret    pop
	.adjstack 1
1:		unpack arg @b, #1
		push   call global @sub, #2
		ret    pop
	}	:
		: "x" (a)
		, "x" (b)
		: "noreturn"
	);
}

@[gatw.doc("(seq,index,opt?)->")]
@[gatw.doc("getitem(seq,index) or setitem(seq,index,opt)")]
function __giosi(seq,index,opt...) {
	__asm__({
		push   arg @seq
		push   arg @index
		push   cmp eq, #arg @opt, $0
		jf     pop, 1f
		push   call global @getitem, #2
		ret    pop
	.adjstack 2
1:		unpack arg @opt, #1
		push   call global @setitem, #3
		ret    pop
	}	:
		: "x" (seq)
		, "x" (index)
		, "x" (opt)
		: "noreturn"
	);
}

@[gatw.doc("(seq,start,end,opt?)->")]
@[gatw.doc("getrange(seq,start,end) or setrange(seq,start,end,opt)")]
function __grosr(seq,start,end,opt...) {
	__asm__({
		push   arg @seq
		push   arg @start
		push   arg @end
		push   cmp eq, #arg @opt, $0
		jf     pop, 1f
		push   call global @getrange, #3
		ret    pop
	.adjstack 3
1:		unpack arg @opt, #1
		push   call global @setrange, #4
		ret    pop
	}	:
		: "x" (seq)
		, "x" (start)
		, "x" (end)
		, "x" (opt)
		: "noreturn"
	);
}

@[gatw.doc("(obj,attr,opt?)->")]
@[gatw.doc("getattr(obj,attr) or setattr(obj,attr,opt)")]
function __gaosa(obj,attr,opt...) {
	__asm__({
		push   arg @obj
		push   arg @attr
		push   cmp eq, #arg @opt, $0
		jf     pop, 1f
		push   call global @getattr, #2
		ret    pop
	.adjstack 2
1:		unpack arg @opt, #1
		push   call global @setattr, #3
		ret    pop
	}	:
		: "x" (obj)
		, "x" (attr)
		, "x" (opt)
		: "noreturn"
	);
}
#else

@@pos(a) or add(a,b)
function __pooad(a,b?) {
	return b !is bound ? pos(a) : add(a,b);
}

@@neg(a) or sub(a,b)
function __neosb(a,b?) {
	return b !is bound ? neg(a) : sub(a,b);
}

@@getitem(seq,index) or setitem(seq,index,opt)
function __giosi(seq,index,opt?) {
	return opt !is bound ? getitem(seq,index) : setitem(seq,index,opt);
}

@@getrange(seq,begin,end) or setrange(seq,begin,end,opt)
function __grosr(seq,begin,end,opt?) {
	return opt !is bound ? getrange(seq,begin,end) : setrange(seq,begin,end,opt);
}

@@getattr(obj,attr) or setattr(obj,attr,opt)
function __gaosa(obj,attr,opt?) {
	return opt !is bound ? getattr(obj,attr) : setattr(obj,attr,opt);
}
#endif



@@Operator fallback function.
@@Any operator not exported as its S-name will invoke this function, passing its implementation-specific ID as first argument with all the other arguments following thereafter.
@@Additionally, any operator with an unknown S-name calls this function to implement its callback.
function operator(id: int from deemon, args...) {
	throw Error.TypeError("Cannot invoke unknown operator #%X" % id);
}




