/* Copyright (c) 2018-2023 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2023 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

/* Functions from this module are referenced by the
 * compiler when addressing unbound operators:
 * >> local items = [10, 30, 20, 7];
 * >> items.sort(operator <); // Compiled as `items.sort(lo from operators)'
 */

import * from deemon;

@@Bind a given @operator_function to execute the
@@associated operator for a specific type @tp only:
@@>import bind from operators;
@@>import * from deemon;
@@>local sequence_add = bind(Sequence, operator +);
@@>local foo = [10, 20, 30];
@@>local bar = [40, 50, 60];
@@>// Invokes `(foo as Sequence).operator + (bar)'
@@>print repr sequence_add(foo, bar);
@@>// Invokes `foo.operator + (bar)'
@@>print repr operator + (foo, bar);
function bind(tp: Type, operator_function: Callable): Callable {
	return (x, args...) -> {
		import Error from deemon;
		if (x !is tp && !tp.isgeneric)
			throw Error.TypeError(f"Instance of {type x} is not derived from {tp}");
		return operator_function((x as tp), args...);
	};
}


/* Don't warn about the use of reserved keywords as identifiers.
 * This module is _supposed_ to define symbols with those names! */
#pragma warning("-Wno-reserved")

/* NOTE: All of the operation functions must be declared as `varying',
 *       since user-code is actually allowed to override these with
 *       custom bindings.
 * It is undefined what/where doing so would have any effect, but it's
 * still something they're allowed to do. */
varying function constructor(self, args...): none -> self.operator constructor(args...);
varying function copy(self) -> copy self;
varying function deepcopy(self) -> deepcopy self;
varying function destructor(self): none -> self.operator destructor();
varying function assign(self, other) -> self := other;
varying function moveassign(self, other) -> self.operator move := (other);
varying function str(self): string -> str self;
varying function repr(self): string -> repr self;
varying function bool(self): bool from deemon -> !!self;
varying function call(self: Callable | Object, args: Tuple) -> self(args...);
varying function next(self: Iterator | Object) -> self.operator next();
varying function int(self: Numeric | Object): int from deemon -> self.operator int();
varying function float(self): float from deemon -> self.operator float();
varying function inv(self) -> ~self;
varying function pos(self) -> +self;
varying function neg(self) -> -self;
varying function add(self, other) -> self + other;
varying function sub(self, other) -> self - other;
varying function mul(self, other) -> self * other;
varying function div(self, other) -> self / other;
varying function mod(self, other) -> self % other;
varying function shl(self, other) -> self << other;
varying function shr(self, other) -> self >> other;
varying function and(self, other) -> self & other;
varying function or(self, other) -> self | other;
varying function xor(self, other) -> self ^ other;
varying function pow(self, other) -> self ** other;
varying function inc(self) -> self.operator ++ ();
varying function dec(self) -> self.operator -- ();
varying function iadd(self, other) -> self.operator += (other);
varying function isub(self, other) -> self.operator -= (other);
varying function imul(self, other) -> self.operator *= (other);
varying function idiv(self, other) -> self.operator /= (other);
varying function imod(self, other) -> self.operator %= (other);
varying function ishl(self, other) -> self.operator <<= (other);
varying function ishr(self, other) -> self.operator >>= (other);
varying function iand(self, other) -> self.operator &= (other);
varying function ior(self, other) -> self.operator |= (other);
varying function ixor(self, other) -> self.operator ^= (other);
varying function ipow(self, other) -> self.operator **= (other);
varying function hash(self): int from deemon -> self.operator hash();
varying function eq(self, other): bool from deemon | Object -> self == other;
varying function ne(self, other): bool from deemon | Object -> self != other;
varying function lo(self, other): bool from deemon | Object -> self < other;
varying function le(self, other): bool from deemon | Object -> self <= other;
varying function gr(self, other): bool from deemon | Object -> self > other;
varying function ge(self, other): bool from deemon | Object -> self >= other;
varying function iter(self: Sequence | Object): Iterator | Object -> self.operator iter();
varying function size(self: Sequence | Object): int from deemon | Object -> #self;
varying function contains(self: Sequence | Object, item): bool from deemon | Object -> item in self;
varying function getitem(self: Sequence | Object, index: int from deemon | Object) -> self[index];
varying function delitem(self: Sequence | Object, index: int from deemon | Object): none -> self.operator del[] (index);
varying function setitem(self: Sequence | Object, index: int from deemon | Object, value): none -> self.operator [] (index, value);
varying function getrange(self: Sequence | Object, begin: int from deemon | Object, end: int from deemon | Object) -> self[begin:end];
varying function delrange(self: Sequence | Object, begin: int from deemon | Object, end: int from deemon | Object): none -> self.operator del[:] (begin, end);
varying function setrange(self: Sequence | Object, begin: int from deemon | Object, end: int from deemon | Object, value: Sequence | Object): none -> self.operator [:] (begin, end, value);
varying function getattr(self, name: string) -> self.operator . (name);
varying function delattr(self, name: string): none -> self.operator del. (name);
varying function setattr(self, name: string, value): none -> self.operator .= (name, value);
varying function enumattr(self): {Attribute...} -> self.operator enumattr();
varying function enter(self): none -> self.operator enter();
varying function leave(self): none -> self.operator leave();
@[optional.gatw.doc("(self:?DFile,max_bytes=!-1)->?Dstring")]
varying function read(self, ...) -> self.operator read(...);
@[optional.gatw.doc("(self:?DFile,data:?X2?DBytes?Dstring,start=!0,end=!-1)->?Dint")]
varying function write(self, ...) -> self.operator write(...);
varying function seek(self: File, off: int from deemon, whence: int from deemon): int from deemon -> self.operator seek(off, whence);
varying function sync(self: File): none -> self.operator sync();
varying function trunc(self: File, pos: int from deemon): none -> self.operator trunc(pos);
varying function close(self: File): none -> self.operator close();
@[optional.gatw.doc("(self:?DFile,pos:?Dint)->?Dstring")]
@[optional.gatw.doc("(self:?DFile,max_bytes:?Dint,pos:?Dint)->?Dstring")]
varying function pread(self, ...) -> self.operator pread(...);
@[optional.gatw.doc("(self:?DFile,data:?X2?DBytes?Dstring,pos:?Dint)->?Dint")]
@[optional.gatw.doc("(self:?DFile,data:?X2?DBytes?Dstring,max_bytes:?Dint,pos:?Dint)->?Dint")]
@[optional.gatw.doc("(self:?DFile,data:?X2?DBytes?Dstring,start:?Dint,end:?Dint,pos:?Dint)->?Dint")]
varying function pwrite(self, ...) -> self.operator pwrite(...);
varying function getc(self: File): int from deemon -> self.operator getc();
varying function ungetc(self: File, c: int from deemon): int from deemon -> self.operator ungetc(c);
varying function putc(self: File, c: int from deemon): int from deemon -> self.operator putc(c);

/* Implementation-specific functions for ambiguous operator calls.
 * An implementation is required to provide these, but have them
 * invoke the (overrideable) regular operators exported from this
 * module. */

#if __DEEMON_VARIANT__ == "gatw" && \
	__has_feature(deemon_inline_assembly)

@[gatw.doc("(a,b?)->")]
@[gatw.doc("Performs as either ${pos(a)} or ${add(a, b)}")]
function __pooad(a, b...) {
	__asm__({
		push   arg @a
		push   cmp eq, #arg @b, $0
		jf     pop, 1f
		push   call global @pos, #1
		ret    pop
	.adjstack 1
1:		unpack arg @b, #1
		push   call global @add, #2
		ret    pop
	}	:
		: "X" (a)
		, "X" (b)
		: "noreturn"
	);
}

@[gatw.doc("(a,b?)->")]
@[gatw.doc("Performs as either ${neg(a)} or ${sub(a, b)}")]
function __neosb(a, b...) {
	__asm__({
		push   arg @a
		push   cmp eq, #arg @b, $0
		jf     pop, 1f
		push   call global @neg, #1
		ret    pop
	.adjstack 1
1:		unpack arg @b, #1
		push   call global @sub, #2
		ret    pop
	}	:
		: "X" (a)
		, "X" (b)
		: "noreturn"
	);
}

@[gatw.doc("(seq,index,opt?)->")]
@[gatw.doc("Performs as either ${getitem(seq, index)} or ${setitem(seq, index, opt)}")]
function __giosi(seq, index, opt...) {
	__asm__({
		push   arg @seq
		push   arg @index
		push   cmp eq, #arg @opt, $0
		jf     pop, 1f
		push   call global @getitem, #2
		ret    pop
	.adjstack 2
1:		unpack arg @opt, #1
		push   call global @setitem, #3
		ret    pop
	}	:
		: "X" (seq)
		, "X" (index)
		, "X" (opt)
		: "noreturn"
	);
}

@[gatw.doc("(seq,start,end,opt?)->")]
@[gatw.doc("Performs as either ${getrange(seq, start, end)} or ${setrange(seq, start, end, opt)}")]
function __grosr(seq, start, end, opt...) {
	__asm__({
		push   arg @seq
		push   arg @start
		push   arg @end
		push   cmp eq, #arg @opt, $0
		jf     pop, 1f
		push   call global @getrange, #3
		ret    pop
	.adjstack 3
1:		unpack arg @opt, #1
		push   call global @setrange, #4
		ret    pop
	}	:
		: "X" (seq)
		, "X" (start)
		, "X" (end)
		, "X" (opt)
		: "noreturn"
	);
}

@[gatw.doc("(obj,attr,opt?)->")]
@[gatw.doc("Performs as either ${getattr(obj, attr)} or ${setattr(obj, attr, opt)}")]
function __gaosa(obj, attr, opt...) {
	__asm__({
		push   arg @obj
		push   arg @attr
		push   cmp eq, #arg @opt, $0
		jf     pop, 1f
		push   call global @getattr, #2
		ret    pop
	.adjstack 2
1:		unpack arg @opt, #1
		push   call global @setattr, #3
		ret    pop
	}	:
		: "X" (obj)
		, "X" (attr)
		, "X" (opt)
		: "noreturn"
	);
}
#else

@@Performs as either @pos(a) or @add(a, b)
function __pooad(a, b?) {
	return b !is bound ? pos(a) : add(a, b);
}

@@Performs as either @neg(a) or @sub(a, b)
function __neosb(a, b?) {
	return b !is bound ? neg(a) : sub(a, b);
}

@@Performs as either @getitem(seq, index) or @setitem(seq, index, opt)
function __giosi(seq, index, opt?) {
	return opt !is bound ? getitem(seq, index) : setitem(seq, index, opt);
}

@@Performs as either @getrange(seq, begin, end) or @setrange(seq, begin, end, opt)
function __grosr(seq, begin, end, opt?) {
	return opt !is bound ? getrange(seq, begin, end) : setrange(seq, begin, end, opt);
}

@@Performs as either @getattr(obj, attr) or @setattr(obj, attr, opt)
function __gaosa(obj, attr, opt?) {
	return opt !is bound ? getattr(obj, attr) : setattr(obj, attr, opt);
}
#endif



@@Operator fallback function.
@@
@@Any operator not exported as its S-name will invoke this function, passing its
@@implementation-specific ID as first argument with all the other arguments following
@@thereafter.
@@
@@Additionally, any operator with an unknown S-name
@@calls this function to implement its callback.
varying function operator(id: int from deemon, args...) {
	throw Error.TypeError("Cannot invoke unknown operator #%X" % id);
}
