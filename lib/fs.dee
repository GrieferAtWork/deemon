/* Copyright (c) 2018-2024 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2024 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

import * from deemon;
import * from errors;
import posix;

global final stat = posix.stat;
global final lstat = posix.lstat;

@@TODO
final class User {
}

@@TODO
final class Group {
}

/* Exceptions. (deprecated; use the symbols from `errors` instead) */
global final NoDirectory = Error.SystemError.FSError.FileNotFound.NoDirectory;
global final IsDirectory = Error.SystemError.FSError.FileExists.IsDirectory;
global final CrossDevice = Error.SystemError.FSError.CrossDeviceLink;
global final NotEmpty = Error.SystemError.FSError.FileExists.DirectoryNotEmpty;
global final BusyFile = Error.SystemError.FSError.BusyFile;
global final NoLink = Error.SystemError.FSError.FileNotFound.NoSymlink;

/* Nowadays, this'd be called "Dir", but this is here for backwards compat */
class dir: Sequence {
	public static final member Iterator: Type = YieldFunctionIterator from rt;

	@@The internal posix-DIR object.
	private member m_dir: posix.DIR;

	@@@interrupt
	@@Construct a sequence for enumerating the contents of a directory
	this(path: string)
		: m_dir(posix.opendir(path))
	{}

	@@Enumerate the names of the files within the given directory
	public operator for(): {string...} {
		for (local ent: m_dir)
			yield ent.d_name;
	}
}

/* Nowadays, this'd be called "Query", but this is here for backwards compat */
class query: dir {
	public static final member Iterator: Type = YieldFunctionIterator from rt;

	@@The wildcard-enabled pattern with which to filter files
	private member m_pattern: string;

	@@@interrupt
	@@Construct a directory query that yields the names of all filesystem
	@@objects addressed by the given wildcard-enabled @pattern string
	this(pattern: string)
		: super(posix.headof(pattern))
		, m_pattern(posix.tailof(pattern))
	{}

	@@Enumerate the names of the files within the given directory
	public operator for(): {string...} {
		for (local filename: super) {
			if (posix.FS_ICASE) {
				if (filename.casewmatch(m_pattern))
					yield filename;
			} else {
				if (filename.wmatch(m_pattern))
					yield filename;
			}
		}
	}
}


global final environ = posix.environ;
global final gettmp = posix.gettmp;
global final getcwd = posix.getcwd;
global final gethostname = posix.gethostname;
global final chdir = posix.chdir;

@@@interrupt
@@@throw FileNotFound    The given @path could not be found
@@@throw NoDirectory     A part of the given @path is not a directory
@@@throw FileClosed      The given file @fp was closed, or the given handle @fd is invalid
@@@throw FileAccessError The current user does not have permissions to
@@                       change at least one of the given timestamps.
@@                       Note that some hosts (linux) don't allow
@@                       modification of the creation time, in which
@@                       case any attempt to change it will result
@@                       in this error being thrown
@@@throw ReadOnlyFile    The file-system or device hosting the file found under
@@                       @path is in read-only operations mode, preventing the
@@                       file's timestamps from being changed
@@@throw SystemError     Failed to change time for some reason
@@@param atime The new last-accessed timestamp to set, or @none to leave unchanged (s.a. @stat.st_atime)
@@@param mtime The new last-modified timestamp to set, or @none to leave unchanged (s.a. @stat.st_mtime)
@@@param ctime The new birth timestamp to set, or @none to leave unchanged (s.a. @stat.st_birthtime)
@@Change the timestamps associated with the given @path
@@CAUTION: The @ctime parameter actually sets the file's `st_birthtime` (rather than its `st_ctime`)
function chtime(path_or_fd: File | string | int,
                atime: Time from time = none,
                mtime: Time from time = none,
                ctime: Time from time = none) {
	if (path_or_fd is string)
		return posix.utime(path_or_fd, atime: atime, mtime: mtime, birthtime: ctime);
	return posix.futime(path_or_fd, atime: atime, mtime: mtime, birthtime: ctime);
}

@@@interrupt
@@@throw FileNotFound    The given @path_or_fd could not be found
@@@throw NoDirectory     A part of the given @path_or_fd is not a directory
@@@throw FileClosed      The given file @path_or_fd was closed
@@@throw FileAccessError The current user does not have permissions
@@                       to change the mode of the given file @path_or_fd
@@@throw ReadOnlyFile    The file-system or device hosting the file found under
@@                       @path_or_fd is in read-only operations mode, preventing the
@@                       file's mode from being changed
@@@throw SystemError     Failed to change permission for some reason
@@@throw ValueError      The given @mode is malformed or not recognized
@@Change the permissions associated with a given @path_or_fd
function chmod(path_or_fd: File | string | int, mode: string | int) {
	if (path_or_fd is string)
		return posix.chmod(path_or_fd, mode);
	return posix.fchmod(path_or_fd, mode);
}

global final lchmod = posix.lchmod;

@@@interrupt
@@@throw FileNotFound    The given @path_or_fd could not be found
@@@throw NoDirectory     A part of the given @path_or_fd is not a directory
@@@throw FileClosed      The given file @path_or_fd was closed
@@@throw FileAccessError The current user does not have permissions
@@                       to change the ownership of the given file @path_or_fd
@@@throw ReadOnlyFile    The file-system or device hosting the file found under
@@                       @path_or_fd is in read-only operations mode, preventing
@@                       the file's ownership from being changed
@@@throw ValueError      The given @user or @group could not be found
@@@throw SystemError     Failed to change ownership for some reason
@@Change the ownership of a given @path_or_fd
function chown(path_or_fd: File | string | int,
               uid: string | int,
               gid: string | int) {
	if (path_or_fd is string)
		return posix.chown(path_or_fd, uid, gid);
	return posix.fchown(path_or_fd, uid, gid);
}

global final lchown = posix.lchown;
global final mkdir = posix.mkdir;
global final rmdir = posix.rmdir;
global final unlink = posix.unlink;
global final remove = posix.remove;
global final rename = posix.rename;

@@Helper class to wrap @posix.CopyFileProgress in a way that is
@@compatible with the traditional progress-info-DTO format of
@@the @copyfile method of the `fs` module.
local final class _FsCopyFileProgress {
	private member posixInfo: posix.CopyFileProgress;
	this = default;
	public operator float() {
		return (float)posixInfo.copied / (float)posixInfo.total;
	}
	public property siz: int = { get() -> posixInfo.total; };
	public property cur: int = { get() -> posixInfo.copied; };
	public property rem: int = { get() -> posixInfo.total - posixInfo.copied; };
}

@@@interrupt
@@@throw FileExists      The given @new_file already exists
@@@throw NoDirectory     A part of the given @existing_file or @new_file is not a directory
@@@throw FileNotFound    The given @existing_file could not be found, or a parent directory
@@                       of @new_file does not exist
@@@throw IsDirectory     The given @existing_file is a directory
@@@throw FileAccessError The current user does not have permissions to access 
@@                       the file @existing_file for reading, or the directory
@@                       containing the non-existent file @new_file for writing
@@@throw ReadOnlyFile    The file-system or device hosting the directory
@@                       containing the non-existent file @new_file is
@@                       in read-only operations mode, preventing the
@@                       creation of new files
@@@throw SystemError     Failed to copy the given @existing_file for some reason
@@
@@Copies a given @existing_file to be create a duplicate named @new_file
@@
@@When given, @progress is invoked periodically during the copy operation using @operator()
@@while passing an internal progress descriptor object implementing the following functions:
@@
@@+----------------------+-----------------------------------------------------+
@@| Function name        | Behavior                                            |
@@+----------------------+-----------------------------------------------------+
@@| @(operator float)    | Returns the overall progress as a floating-point    |
@@|                      | value between @0.0 and @1.0                         |
@@|                      |                                                     |
@@| @(property siz: int) | The total number of bytes that must be copied       |
@@|                      |                                                     |
@@| @(property cur: int) | The total number of bytes already copied            |
@@|                      |                                                     |
@@| @(property rem: int) | The total number of bytes that must still be copied |
@@+----------------------+-----------------------------------------------------+
@@
@@The callback may throw an error to abort the copy operation, which is then
@@propagated, though the partially copied file isn't deleted in this case (or
@@in the case of any other I/O error happening while writing)
function copyfile(existing_file: string | File | int,
                  new_file: string | File | int,
                  progress: Callable = none) {
	if (progress is none)
		return posix.copyfile(existing_file, new_file);
	return posix.copyfile(existing_file, new_file,
		progress: info -> progress(_FsCopyFileProgress(info)));
}

global final link = posix.link;


@@@interrupt
@@@throw FileExists      A file or directory named @link_path already exists
@@@throw FileNotFound    A parent directory of @link_path does not exist
@@@throw NoDirectory     A part of the given @link_path is not a directory
@@@throw UnsupportedAPI  The underlying file-system does not support (or allow
@@                       *cough* windows...) symbolic links
@@@throw FileAccessError The current user does not have permissions to access
@@                       the directory containing the non-existent file @link_path
@@                       for writing
@@@throw ReadOnlyFile    The file-system or device hosting the directory
@@                       containing the non-existent object @link_path is
@@                       in read-only operations mode, preventing the
@@                       creation of new symbolic links
@@@throw SystemError     Failed to create a symbolic link under @link_path for
@@                       some reason
@@
@@Symbolic links are file-system redirection points which you can think of as
@@keyword-style macros that exist in directories. When addressed, simply imagine
@@their name being replaced with @target_text, at which point the resulting path
@@is then re-evaluated:
@@
@@>import symlink from fs;
@@>import File from deemon;
@@>
@@>symlink("../foo", "/path/to/link");
@@>
@@>/* 1: "/path/to/[link]/file.txt" */
@@>/* 2: "/path/to/[../foo]/file.txt" */
@@>/* 3: "/path/foo/file.txt" */
@@>File.open("/path/to/link/file.txt");
@@
@@Because of the fact that some file-system support alternative path separators,
@@those separators may not be allowed to appear in symbolic link texts. If this
@@is the case and if @format_target is @true, the given @target_text will be
@@normalized to fix inconsistencies that might otherwise prevent the link from
@@functioning properly
function symlink(text: string, path: string, format_target: bool = true) {
	return format_target
		? posix.symlink(text, path)
		: posix._symlink(text, path);
}

global final readlink = posix.readlink;
global final headof = posix.headof;
global final tailof = posix.tailof;

@@@return: The file portion of a path, excluding the file extension
@@>> import fileof from fs;
@@>> print fileof("bar");            /* "bar" */
@@>> print fileof("bar.txt");        /* "bar" */
@@>> print fileof("/foo/bar.txt");   /* "bar" */
@@>> print fileof("C:/foo/bar.txt"); /* "bar" */
function fileof(path: string): string {
	local tail = posix.tailof(path);
	local pos = tail.rfind(".");
	if (pos == -1)
		return tail;
	return tail[:pos];
}

@@@return: The extension of a path, including the leading @"." character
@@>> import extof from fs;
@@>> print extof("bar");            /* "" */
@@>> print extof("bar.txt");        /* ".txt" */
@@>> print extof("/foo/bar.txt");   /* ".txt" */
@@>> print extof("C:/foo/bar.txt"); /* ".txt" */
function extof(path: string): string {
	local tail = posix.tailof(path);
	local pos = tail.rfind(".");
	if (pos == -1)
		return "";
	return tail[pos+1:];
}

global final driveof = posix.driveof;
global final inctrail = posix.inctrail;
global final exctrail = posix.exctrail;
global final abspath = posix.abspath;
global final relpath = posix.relpath;
global final isabs = posix.isabs;
global final isrel = posix.isrel;
global final issep = posix.issep;
global final joinpath = posix.joinpath;

local function _gethome(user: string = none): string {
	if (user is none) {
		local result = posix.environ.get("HOME");
		if (result !is none)
			return result;
	}
	// TODO
	return "/home/me";
}

@@@interrupt
@@@param env A Dict-style mapping used to resolve variable names. Defaults to @posix.environ
@@@throw ValueError The given @options string contains unrecognized options
@@@throw ValueError An unknown environment variable was accessed and @"f" isn't part of @options
@@
@@Expand parts of the given @path, according to @options which is either an
@@implementation-specific bitset, or a sequence of the following option characters:
@@
@@+------+--------------------------------------------------------------------------+
@@| Name | Behavior                                                                 |
@@+------+--------------------------------------------------------------------------+
@@| @"h" | Expand @"~" and @"~<nam>" to the return value of @(User([<nam>]).home()) |
@@|      |                                                                          |
@@| @"v" | Expand @"$<nam>" and @"${<nam>}" to @env[nam]                            |
@@|      |                                                                          |
@@| @"V" | Expand @"%<nam>%" to @env[nam]                                           |
@@|      |                                                                          |
@@| @"p" | Expand @"." and @".." folders names while also deleting multiple         |
@@|      | consecutive slashes, as well as all whitespace surrounding them. On      |
@@|      | hosts with an @ALTSEP differing from @SEP, all occurrences of @ALTSEP    |
@@|      | are also replaced with @SEP.                                             |
@@|      | This option, alongside @"c" and @"a" should be used before a path-string |
@@|      | can be considered uniform and suitable to be used as key in a hash-table |
@@|      | used for mapping files to objects.                                       |
@@|      | Note that the deemon core uses an option similar to this to implement    |
@@|      | the mapping between modules and their associated files.                  |
@@|      | Also note that this option is identical to @posix.normalpath.            |
@@|      |                                                                          |
@@| @"a" | Force the returned path to be absolute in relation to @getcwd            |
@@|      |                                                                          |
@@| @"r" | Force the returned path to be relative to @getcwd (Overrules @"a")       |
@@|      |                                                                          |
@@| @"c" | When the host file-system is case-insensitive, force all case-sensitive  |
@@|      | parts into a uniform casing. If the host's file-system isn't case-       |
@@|      | sensitive, this flag is ignored.                                         |
@@|      |                                                                          |
@@| @"f" | When used with @"h", @"v" or @"V", handle errors for unknown environment |
@@|      | variables or @(KeyError)s when accessing @env, or a failure to determine |
@@|      | the user's home directory by not expanding that part of the path.        |
@@+------+--------------------------------------------------------------------------+
@@
@@Passing the same option more than once is allowed and simply ignored
function expand(path: string, options: string = "hvpf", env: {string: string} = none) {
	if (env is none)
		env = posix.environ;
	local opt_HOME   = false; /* `h': Expand a `~' prefix with `_gethome()' */
	local opt_VARS   = false; /* `v': Expand `$nam' and `${nam}' with `env[nam]' */
	local opt_WVARS  = false; /* `V': Expand `%nam%' with `env[nam]' */
	local opt_PATH   = false; /* `p': Expand `.' and `..' folders and delete multiple consecutive
	                           *      slashes, as well as whitespace surrounding them. */
	local opt_ABS    = false; /* `a': Force the path to become absolute (same as `posix.abspath(path)'). */
	local opt_REL    = false; /* `r': Force the path to become relative (same as `posix.relpath(path)'). - Overrules `opt_ABS' */
	local opt_CASE   = false; /* `c': Force all parts of the path to share the same casing when the host file-system is case-insensitive. */
	local opt_NOFAIL = false; /* `f': Skip expansion when a variable isn't known, or the home path cannot be determined. */
	for (local ch: options) {
		switch (ch) {
		case 'h': opt_HOME   = true; break;
		case 'v': opt_VARS   = true; break;
		case 'V': opt_WVARS  = true; break;
		case 'p': opt_PATH   = true; break;
		case 'a': opt_ABS    = true; break;
		case 'r': opt_REL    = true; break;
		case 'c': opt_CASE   = true; break;
		case 'f': opt_NOFAIL = true; break;
		default: throw ValueError(f"Invalid expand options {repr options}");
		}
	}
	if (opt_PATH)
		path = posix.normalpath(path);
	if (opt_ABS)
		path = posix.abspath(path);
	local fp = File.Writer();
	local i = 0, flushStart = 0, len = #path;
	while (i < len) {
		local ch = path[i];
		switch (ch) {

		case '~': {
			if (!opt_HOME)
				break;
			fp << path[flushStart:i];
			++i;
			local userName = none;
			if (i < len && path.issymstrt(i)) {
				local userNameStart = i;
				do {
					++i;
				} while (i < len && path.issymcont(i));
				userName = path[userNameStart:i];
			}
			fp << _gethome(userName);
			flushStart = i;
			continue;
		}

		case '$': {
			if (!opt_VARS)
				break;
			local envStart = i;
			++i;
			local varName: string;
			if (i < len && path[i] == "{") {
				++i;
				local varNameStart = i;
				while (i < len && path[i] != "}")
					++i;
				varName = path[varNameStart:i];
				if (i < len)
					++i;
			} else {
				local varNameStart = i;
				while (i < len && path.issymcont(i))
					++i;
				varName = path[varNameStart:i];
			}
			if (opt_NOFAIL) {
				varName = env.get(varName);
				if (varName is none)
					continue;
			} else {
				varName = env[varName];
			}
			fp << path[flushStart:envStart] << varName;
			flushStart = i;
			continue;
		}

		case '%': {
			if (!opt_WVARS)
				break;
			local envStart = i;
			++i;
			local varNameStart = i;
			while (i < len && path[i] != "%")
				++i;
			local varName = path[varNameStart:i];
			if (i < len)
				++i;
			if (opt_NOFAIL) {
				varName = env.get(varName);
				if (varName is none)
					continue;
			} else {
				varName = env[varName];
			}
			fp << path[flushStart:envStart] << varName;
			flushStart = i;
			continue;
		}

		default:
			break;
		}
		++i;
	}
	if (flushStart < len)
		fp << path[flushStart:len];
	local result = fp.string;
	if (opt_REL)
		result = posix.relpath(result);
	if (opt_CASE && posix.FS_ICASE)
		result = result.upper();
	return result;
}

global final SEP = posix.FS_SEP;
global final ALTSEP = posix.FS_ALTSEP;
global final DELIM = posix.FS_DELIM;
global final DEV_NULL = posix.DEV_NULL;
global final DEV_TTY = posix.DEV_TTY;
global final DEV_STDIN = posix.DEV_STDIN;
global final DEV_STDOUT = posix.DEV_STDOUT;
global final DEV_STDERR = posix.DEV_STDERR;

global final S_IFMT = posix.S_IFMT;
global final S_IFDIR = posix.S_IFDIR;
global final S_IFCHR = posix.S_IFCHR;
global final S_IFBLK = posix.S_IFBLK;
global final S_IFREG = posix.S_IFREG;
global final S_IFIFO = posix.S_IFIFO;
global final S_IFLNK = posix.S_IFLNK;
global final S_IFSOCK = posix.S_IFSOCK;
global final S_ISUID = posix.S_ISUID;
global final S_ISGID = posix.S_ISGID;
global final S_ISVTX = posix.S_ISVTX;
global final S_IRUSR = posix.S_IRUSR;
global final S_IWUSR = posix.S_IWUSR;
global final S_IXUSR = posix.S_IXUSR;
global final S_IRGRP = posix.S_IRGRP;
global final S_IWGRP = posix.S_IWGRP;
global final S_IXGRP = posix.S_IXGRP;
global final S_IROTH = posix.S_IROTH;
global final S_IWOTH = posix.S_IWOTH;
global final S_IXOTH = posix.S_IXOTH;

global final S_ISDIR = posix.S_ISDIR;
global final S_ISCHR = posix.S_ISCHR;
global final S_ISBLK = posix.S_ISBLK;
global final S_ISREG = posix.S_ISREG;
global final S_ISFIFO = posix.S_ISFIFO;
global final S_ISLNK = posix.S_ISLNK;
global final S_ISSOCK = posix.S_ISSOCK;

#ifdef __WINDOWS__
global final fixunc_np, chattr_np;
try {
	local win32 = import("win32");
	fixunc_np = win32.operator . ("FixUncPath");
	chattr_np = win32.operator . ("SetFileAttributes");
} catch (...) {
}
#endif /* __WINDOWS__ */
