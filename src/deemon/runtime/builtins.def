/* Copyright (c) 2018-2023 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2023 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

#ifndef BUILTIN
#error "Must `#define BUILTIN(name, object, flags)' before including this file"
#endif /* !BUILTIN */
#ifndef BUILTIN_DOC
#define BUILTIN_DOC(name, object, flags, doc) BUILTIN(name, object, flags)
#endif /* !BUILTIN_DOC */

#include <deemon/compiler/compiler.h>

#include <deemon/api.h>
#include <deemon/attribute.h>
#include <deemon/bool.h>
#include <deemon/bytes.h>
#include <deemon/callable.h>
#include <deemon/cell.h>
#include <deemon/class.h>
#include <deemon/code.h>
#include <deemon/dict.h>
#include <deemon/error.h>
#include <deemon/file.h>
#include <deemon/float.h>
#include <deemon/hashset.h>
#include <deemon/instancemethod.h>
#include <deemon/int.h>
#include <deemon/list.h>
#include <deemon/map.h>
#include <deemon/module.h>
#include <deemon/none.h>
#include <deemon/numeric.h>
#include <deemon/object.h>
#include <deemon/objmethod.h>
#include <deemon/property.h>
#include <deemon/seq.h>
#include <deemon/set.h>
#include <deemon/string.h>
#include <deemon/super.h>
#include <deemon/thread.h>
#include <deemon/traceback.h>
#include <deemon/tuple.h>
#include <deemon/weakref.h>

/* Very important symbols: `Signal', `Error' and `Traceback' */
BUILTIN(Signal, &DeeError_Signal, MODSYM_FREADONLY | MODSYM_FCONSTEXPR)
BUILTIN(Error, &DeeError_Error, MODSYM_FREADONLY | MODSYM_FCONSTEXPR)
BUILTIN(Traceback, &DeeTraceback_Type, MODSYM_FREADONLY | MODSYM_FCONSTEXPR)

/* Basic, builtin types. */
BUILTIN(bool, &DeeBool_Type, MODSYM_FREADONLY | MODSYM_FCONSTEXPR)
BUILTIN(string, &DeeString_Type, MODSYM_FREADONLY | MODSYM_FCONSTEXPR)
BUILTIN(int, &DeeInt_Type, MODSYM_FREADONLY | MODSYM_FCONSTEXPR)
BUILTIN(float, &DeeFloat_Type, MODSYM_FREADONLY | MODSYM_FCONSTEXPR)
BUILTIN(Bytes, &DeeBytes_Type, MODSYM_FREADONLY | MODSYM_FCONSTEXPR)
BUILTIN(Tuple, &DeeTuple_Type, MODSYM_FREADONLY | MODSYM_FCONSTEXPR)
BUILTIN(List, &DeeList_Type, MODSYM_FREADONLY | MODSYM_FCONSTEXPR)
BUILTIN(Dict, &DeeDict_Type, MODSYM_FREADONLY | MODSYM_FCONSTEXPR)
BUILTIN(HashSet, &DeeHashSet_Type, MODSYM_FREADONLY | MODSYM_FCONSTEXPR)
BUILTIN(Object, &DeeObject_Type, MODSYM_FREADONLY | MODSYM_FCONSTEXPR)
BUILTIN(Type, &DeeType_Type, MODSYM_FREADONLY | MODSYM_FCONSTEXPR)
BUILTIN(Cell, &DeeCell_Type, MODSYM_FREADONLY | MODSYM_FCONSTEXPR)
BUILTIN(WeakRef, &DeeWeakRef_Type, MODSYM_FREADONLY | MODSYM_FCONSTEXPR)

/* Abstract base classes. */
BUILTIN(Sequence, &DeeSeq_Type, MODSYM_FREADONLY | MODSYM_FCONSTEXPR)
BUILTIN(Mapping, &DeeMapping_Type, MODSYM_FREADONLY | MODSYM_FCONSTEXPR)
BUILTIN(Set, &DeeSet_Type, MODSYM_FREADONLY | MODSYM_FCONSTEXPR)
BUILTIN(Iterator, &DeeIterator_Type, MODSYM_FREADONLY | MODSYM_FCONSTEXPR)
BUILTIN(Callable, &DeeCallable_Type, MODSYM_FREADONLY | MODSYM_FCONSTEXPR)
BUILTIN(Numeric, &DeeNumeric_Type, MODSYM_FREADONLY | MODSYM_FCONSTEXPR)

/* XXX: This one should be removed when classes have been overhauled to
 *      include weakref-functionality as an option flag during class
 *      creation.
 * >> How about this this: Extend the class feature byte to 16-bit, or have
 *    one of the first 8 bits act as an extension bit that enables the second
 *    byte. (we simply need more that 8 bits to fit everything...)
 *    Or better yet, make member table fields mandatory and free up 2 bits,
 *    one of which could be used for this very purpose!
 * XXX: Then what should the syntax look like for declaring a user-class as
 *      being WeakRefAble? Should it look like this:
 *      >> @[weakref]
 *      >> class MyClass {
 *      >>     this = default;
 *      >> };
 *      >> local a = MyClass();
 *      >> local b = WeakRef(a);
 */
BUILTIN(WeakRefAble, &DeeWeakRefAble_Type, MODSYM_FREADONLY | MODSYM_FCONSTEXPR)

/* Objects that can also be accessed as builtin compiler keywords. */
BUILTIN(none, Dee_None, MODSYM_FREADONLY | MODSYM_FCONSTEXPR)
BUILTIN(true, Dee_True, MODSYM_FREADONLY | MODSYM_FCONSTEXPR)
BUILTIN(false, Dee_False, MODSYM_FREADONLY | MODSYM_FCONSTEXPR)

/* Core functional types. */
BUILTIN(Function, &DeeFunction_Type, MODSYM_FREADONLY | MODSYM_FCONSTEXPR)
BUILTIN(Module, &DeeModule_Type, MODSYM_FREADONLY | MODSYM_FCONSTEXPR)
BUILTIN(Thread, &DeeThread_Type, MODSYM_FREADONLY | MODSYM_FCONSTEXPR)
BUILTIN(Super, &DeeSuper_Type, MODSYM_FREADONLY | MODSYM_FCONSTEXPR)
BUILTIN(InstanceMethod, &DeeInstanceMethod_Type, MODSYM_FREADONLY | MODSYM_FCONSTEXPR)
BUILTIN(Property, &DeeProperty_Type, MODSYM_FREADONLY | MODSYM_FCONSTEXPR)
BUILTIN(File, &DeeFile_Type, MODSYM_FREADONLY | MODSYM_FCONSTEXPR)
BUILTIN(Attribute, &DeeAttribute_Type, MODSYM_FREADONLY | MODSYM_FCONSTEXPR)
BUILTIN(Frame, &DeeFrame_Type, MODSYM_FREADONLY | MODSYM_FCONSTEXPR)
BUILTIN(enumattr, &DeeEnumAttr_Type, MODSYM_FREADONLY | MODSYM_FCONSTEXPR)

/* Functionality groups. */
BUILTIN_DOC(gc, &DeeGCEnumTracked_Singleton, MODSYM_FREADONLY,
            "A sequence-like singleton that can be used to either enumerate all "
            /**/ "tracked GC objects, check if an object is being tracked, or collect "
            /**/ "all GC objects no longer referenced anywhere else")

#ifndef BUILTIN_RUNTIME_DEFINED
#define BUILTIN_RUNTIME_DEFINED 1
DECL_BEGIN

INTDEF DeeCMethodObject rt_pooad;
INTDEF DeeCMethodObject rt_neosb;
INTDEF DeeCMethodObject rt_giosi;
INTDEF DeeCMethodObject rt_grosr;
INTDEF DeeCMethodObject rt_gaosa;
INTDEF DeeCMethodObject rt_assert;
INTDEF DeeCMethodObject rt_badcall;
INTDEF DeeCMethodObject rt_roloc;
INTDEF DeeCMethodObject builtin_hasattr;
INTDEF DeeCMethodObject builtin_hasitem;
INTDEF DeeCMethodObject builtin_boundattr;
INTDEF DeeCMethodObject builtin_bounditem;
INTDEF DeeKwCMethodObject builtin_compare;
INTDEF DeeKwCMethodObject builtin_import;
INTDEF DeeKwCMethodObject builtin_hash;
INTDEF DeeKwCMethodObject builtin_exec;

DECL_END
#endif /* !BUILTIN_RUNTIME_DEFINED */

/* Check if an object has a given attribute.
 * >> hasattr(ob: Object, attr: string): bool; */
BUILTIN_DOC(hasattr, &builtin_hasattr, MODSYM_FREADONLY | MODSYM_FCONSTEXPR,
            "(ob,attr:?Dstring)->?Dbool\n"
            "@return Indicative of @ob containing an attribute @attr")

/* Check if an object has a given item */
BUILTIN_DOC(hasitem, &builtin_hasitem, MODSYM_FREADONLY | MODSYM_FCONSTEXPR,
            "(ob,key:?O)->?Dbool\n"
            "(ob,index:?Dint)->?Dbool\n"
            "@return Indicative of @ob containing an item @key or @index")

/* Check if a given object attribute is bound.
 * >> boundattr(ob: Object, attr: string, allow_missing: bool = true): bool; */
BUILTIN_DOC(boundattr, &builtin_boundattr, MODSYM_FREADONLY | MODSYM_FCONSTEXPR,
            "(ob,attr:?Dstring,allow_missing=!t)->?Dbool\n"
            "@throw AttributeError The attribute doesn't exist, and @allow_missing is ?f\n"
            "@return Indicative of attribute @attr of @ob currently being bound\n"
            "If the attribute doesn't exist, return ?f, or throw an :AttributeError, "
            /**/ "depending on the given @allow_missing\n"
            "${"
            /**/ "import boundattr from deemon;\n"
            /**/ "print boundattr(foo, \"bar\", true);\n"
            /**/ "print foo.bar is bound; /* Functionally equivalent */"
            "}")

/* Check if a given object item is bound.
 * >> bounditem(ob: Object, index: int | Object, allow_missing: bool = true): bool; */
BUILTIN_DOC(bounditem, &builtin_bounditem, MODSYM_FREADONLY | MODSYM_FCONSTEXPR,
            "(ob,index:?Dint,allow_missing=!t)->?Dbool\n"
            "(ob,key:?O,allow_missing=!t)->?Dbool\n"
            "@throw IndexError The given @index doesn't exist, and @allow_missing is ?f\n"
            "@throw KeyError The given @key doesn't exist, and @allow_missing is ?f\n"
            "@return Indicative of item @index or @key of @ob currently being bound\n"
            "If the item doesn't exist, return ?f, or throw an :IndexError or :KeyError, "
            /**/ "depending on the given @allow_missing\n"
            "${"
            /**/ "import bounditem from deemon;\n"
            /**/ "print bounditem(foo, 42, true);\n"
            /**/ "print foo[42] is bound; /* Functionally equivalent */"
            "}")

/* Compare 2 objects, returning one of -1, 0 or 1.
 * >> compare(lhs: Object, rhs: Object): int; */
BUILTIN_DOC(compare, &builtin_compare, MODSYM_FREADONLY | MODSYM_FCONSTEXPR,
            "(lhs,rhs)->?Dint\n"
            "@throw NotImplemented The type of @lhs does not implement comparison\n"
            "@throw TypeError The types of @lhs and @rhs cannot be compared\n"
            "@throw ValueError The instances @lhs and @rhs cannot be compared\n"
            "@return One of ${-1}, $0, or $1, indicative of the relation between @lhs and @rhs\n"
            "${"
            /**/ "import compare from deemon;\n"
            /**/ "print compare(\"foo\", \"bar\"); /* 1 */"
            "}")

/* Load a module, given its name.
 * >> import(module_name: string, base?: Module) -> string;
 * NOTE: This is what `import' links against when
 *       as a stand-alone within an expression. */
BUILTIN_DOC(import, &builtin_import, MODSYM_FNORMAL,
            "(module_name:?Dstring,base?:?DModule)->?DModule\n"
            "@throw ValueError The given @module_name is invalid\n"
            "@throw FileNotFound The named @module_name could not be found\n"
            "@return The ?DModule associated with the given @module_name")


/* Load a module, given its name.
 * >> import(module_name: string, base?: Module) -> string;
 * NOTE: This is what `import' links against when
 *       as a stand-alone within an expression. */
BUILTIN_DOC(hash, &builtin_hash, MODSYM_FREADONLY | MODSYM_FCONSTEXPR,
            "(objects!)->?Dint\n"
            "Combine the hashes of a given set of objects in a way that also "
            /**/ "tries to preserve the order in which objects are being hashed.\n"
            "For example, ${hash(\"foo\", \"bar\")} may return a different hash "
            /**/ "value than ${hash(\"bar\", \"foo\")}.\n"
            "If you wish to combine hashes such that element ordering doesn't play any "
            /**/ "role, you can just do ${\"bar\".operator hash() ^ \"foo\".operator hash()}")


/* TODO: Add more options to this function */
BUILTIN_DOC(exec, &builtin_exec, MODSYM_FNORMAL,
            "(expr:?X3?Dstring?DBytes?DFile,globals?:?S?T2?Dstring?O,base?:?DModule)->?O\n"
            "Evaluate a user-code deemon expression and return the result\n"
            "This type of evaluation is much more restrictive than evaluation of "
            /**/ "normal user-code, as rather than being parsed, optimized, assembled "
            /**/ "and linked into a full byte-code object, execution happens with the "
            /**/ "help of a separate JIT compiler\n"
            "Note however that this compiler will never support preprocessor features "
            /**/ "such as directives, macros or escaped line-feeds, as well as other "
            /**/ "language-level features such as goto-labels or true support for type "
            /**/ "annotations\n"
            "The given @expr is either evaluated as an expression or statement, "
            /**/ "i.e. both $\"10 + 20\" and $\"print 42;\" are accepted")


/* Builtin runtime operator helpers. */
BUILTIN(__pooad, &rt_pooad, MODSYM_FREADONLY | MODSYM_FHIDDEN)
BUILTIN(__neosb, &rt_neosb, MODSYM_FREADONLY | MODSYM_FHIDDEN)
BUILTIN(__giosi, &rt_giosi, MODSYM_FREADONLY | MODSYM_FHIDDEN)
BUILTIN(__grosr, &rt_grosr, MODSYM_FREADONLY | MODSYM_FHIDDEN)
BUILTIN(__gaosa, &rt_gaosa, MODSYM_FREADONLY | MODSYM_FHIDDEN)
BUILTIN(__roloc, &rt_roloc, MODSYM_FREADONLY | MODSYM_FHIDDEN)

/* Used to implement the `assert' keyword.
 * NOTE: This function is not marked as read-only,
 *       because user-code is allowed to override it! */
BUILTIN(__assert, &rt_assert, MODSYM_FHIDDEN)

/* Internal function used to implement argument count checks in
 * function taking optional arguments. */
BUILTIN(__badcall, &rt_badcall, MODSYM_FREADONLY | MODSYM_FHIDDEN)

#undef BUILTIN_DOC
#undef BUILTIN
