/* Copyright (c) 2018-2025 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2025 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */
/* WARNING: Autogenerated file "p-readwrite-constants.def" */
#ifdef SEEK_SET
#define POSIX_SEEK_SET_DEF \
	{ "SEEK_SET", (DeeObject *)&posix_SEEK_SET, MODSYM_FREADONLY | MODSYM_FCONSTEXPR },
#if DeeInt_IsSmallInt(SEEK_SET)
#define posix_SEEK_SET (*DeeInt_ForSmallInt(SEEK_SET))
#elif SEEK_SET >= 0
#if SEEK_SET <= 0x7fffull /* 15-bit */
PRIVATE DEFINE_UINT15(posix_SEEK_SET, SEEK_SET);
#elif SEEK_SET <= 0x3fffffffull /* 30-bit */
PRIVATE DEFINE_UINT30(posix_SEEK_SET, SEEK_SET);
#elif SEEK_SET <= 0x1fffffffffffull /* 45-bit */
PRIVATE DEFINE_UINT45(posix_SEEK_SET, SEEK_SET);
#elif SEEK_SET <= 0xfffffffffffffffull /* 60-bit */
PRIVATE DEFINE_UINT60(posix_SEEK_SET, SEEK_SET);
#else
PRIVATE DEFINE_UINT75(posix_SEEK_SET, SEEK_SET);
#endif
#else /* SEEK_SET >= 0 */
#if SEEK_SET >= -0x4000ll /* 15-bit */
PRIVATE DEFINE_INT15(posix_SEEK_SET, SEEK_SET);
#elif SEEK_SET >= -0x20000000ll /* 30-bit */
PRIVATE DEFINE_INT30(posix_SEEK_SET, SEEK_SET);
#elif SEEK_SET >= -0x100000000000ll /* 45-bit */
PRIVATE DEFINE_INT45(posix_SEEK_SET, SEEK_SET);
#elif SEEK_SET >= -0x800000000000000ll /* 60-bit */
PRIVATE DEFINE_INT60(posix_SEEK_SET, SEEK_SET);
#else
PRIVATE DEFINE_INT75(posix_SEEK_SET, SEEK_SET);
#endif
#endif /* SEEK_SET < 0 */
#else /* SEEK_SET */
#define POSIX_SEEK_SET_DEF /* nothing */
#endif /* !SEEK_SET */
#ifdef SEEK_CUR
#define POSIX_SEEK_CUR_DEF \
	{ "SEEK_CUR", (DeeObject *)&posix_SEEK_CUR, MODSYM_FREADONLY | MODSYM_FCONSTEXPR },
#if DeeInt_IsSmallInt(SEEK_CUR)
#define posix_SEEK_CUR (*DeeInt_ForSmallInt(SEEK_CUR))
#elif SEEK_CUR >= 0
#if SEEK_CUR <= 0x7fffull /* 15-bit */
PRIVATE DEFINE_UINT15(posix_SEEK_CUR, SEEK_CUR);
#elif SEEK_CUR <= 0x3fffffffull /* 30-bit */
PRIVATE DEFINE_UINT30(posix_SEEK_CUR, SEEK_CUR);
#elif SEEK_CUR <= 0x1fffffffffffull /* 45-bit */
PRIVATE DEFINE_UINT45(posix_SEEK_CUR, SEEK_CUR);
#elif SEEK_CUR <= 0xfffffffffffffffull /* 60-bit */
PRIVATE DEFINE_UINT60(posix_SEEK_CUR, SEEK_CUR);
#else
PRIVATE DEFINE_UINT75(posix_SEEK_CUR, SEEK_CUR);
#endif
#else /* SEEK_CUR >= 0 */
#if SEEK_CUR >= -0x4000ll /* 15-bit */
PRIVATE DEFINE_INT15(posix_SEEK_CUR, SEEK_CUR);
#elif SEEK_CUR >= -0x20000000ll /* 30-bit */
PRIVATE DEFINE_INT30(posix_SEEK_CUR, SEEK_CUR);
#elif SEEK_CUR >= -0x100000000000ll /* 45-bit */
PRIVATE DEFINE_INT45(posix_SEEK_CUR, SEEK_CUR);
#elif SEEK_CUR >= -0x800000000000000ll /* 60-bit */
PRIVATE DEFINE_INT60(posix_SEEK_CUR, SEEK_CUR);
#else
PRIVATE DEFINE_INT75(posix_SEEK_CUR, SEEK_CUR);
#endif
#endif /* SEEK_CUR < 0 */
#else /* SEEK_CUR */
#define POSIX_SEEK_CUR_DEF /* nothing */
#endif /* !SEEK_CUR */
#ifdef SEEK_END
#define POSIX_SEEK_END_DEF \
	{ "SEEK_END", (DeeObject *)&posix_SEEK_END, MODSYM_FREADONLY | MODSYM_FCONSTEXPR },
#if DeeInt_IsSmallInt(SEEK_END)
#define posix_SEEK_END (*DeeInt_ForSmallInt(SEEK_END))
#elif SEEK_END >= 0
#if SEEK_END <= 0x7fffull /* 15-bit */
PRIVATE DEFINE_UINT15(posix_SEEK_END, SEEK_END);
#elif SEEK_END <= 0x3fffffffull /* 30-bit */
PRIVATE DEFINE_UINT30(posix_SEEK_END, SEEK_END);
#elif SEEK_END <= 0x1fffffffffffull /* 45-bit */
PRIVATE DEFINE_UINT45(posix_SEEK_END, SEEK_END);
#elif SEEK_END <= 0xfffffffffffffffull /* 60-bit */
PRIVATE DEFINE_UINT60(posix_SEEK_END, SEEK_END);
#else
PRIVATE DEFINE_UINT75(posix_SEEK_END, SEEK_END);
#endif
#else /* SEEK_END >= 0 */
#if SEEK_END >= -0x4000ll /* 15-bit */
PRIVATE DEFINE_INT15(posix_SEEK_END, SEEK_END);
#elif SEEK_END >= -0x20000000ll /* 30-bit */
PRIVATE DEFINE_INT30(posix_SEEK_END, SEEK_END);
#elif SEEK_END >= -0x100000000000ll /* 45-bit */
PRIVATE DEFINE_INT45(posix_SEEK_END, SEEK_END);
#elif SEEK_END >= -0x800000000000000ll /* 60-bit */
PRIVATE DEFINE_INT60(posix_SEEK_END, SEEK_END);
#else
PRIVATE DEFINE_INT75(posix_SEEK_END, SEEK_END);
#endif
#endif /* SEEK_END < 0 */
#else /* SEEK_END */
#define POSIX_SEEK_END_DEF /* nothing */
#endif /* !SEEK_END */
#ifdef SEEK_HOLE
#define POSIX_SEEK_HOLE_DEF \
	{ "SEEK_HOLE", (DeeObject *)&posix_SEEK_HOLE, MODSYM_FREADONLY | MODSYM_FCONSTEXPR },
#if DeeInt_IsSmallInt(SEEK_HOLE)
#define posix_SEEK_HOLE (*DeeInt_ForSmallInt(SEEK_HOLE))
#elif SEEK_HOLE >= 0
#if SEEK_HOLE <= 0x7fffull /* 15-bit */
PRIVATE DEFINE_UINT15(posix_SEEK_HOLE, SEEK_HOLE);
#elif SEEK_HOLE <= 0x3fffffffull /* 30-bit */
PRIVATE DEFINE_UINT30(posix_SEEK_HOLE, SEEK_HOLE);
#elif SEEK_HOLE <= 0x1fffffffffffull /* 45-bit */
PRIVATE DEFINE_UINT45(posix_SEEK_HOLE, SEEK_HOLE);
#elif SEEK_HOLE <= 0xfffffffffffffffull /* 60-bit */
PRIVATE DEFINE_UINT60(posix_SEEK_HOLE, SEEK_HOLE);
#else
PRIVATE DEFINE_UINT75(posix_SEEK_HOLE, SEEK_HOLE);
#endif
#else /* SEEK_HOLE >= 0 */
#if SEEK_HOLE >= -0x4000ll /* 15-bit */
PRIVATE DEFINE_INT15(posix_SEEK_HOLE, SEEK_HOLE);
#elif SEEK_HOLE >= -0x20000000ll /* 30-bit */
PRIVATE DEFINE_INT30(posix_SEEK_HOLE, SEEK_HOLE);
#elif SEEK_HOLE >= -0x100000000000ll /* 45-bit */
PRIVATE DEFINE_INT45(posix_SEEK_HOLE, SEEK_HOLE);
#elif SEEK_HOLE >= -0x800000000000000ll /* 60-bit */
PRIVATE DEFINE_INT60(posix_SEEK_HOLE, SEEK_HOLE);
#else
PRIVATE DEFINE_INT75(posix_SEEK_HOLE, SEEK_HOLE);
#endif
#endif /* SEEK_HOLE < 0 */
#else /* SEEK_HOLE */
#define POSIX_SEEK_HOLE_DEF /* nothing */
#endif /* !SEEK_HOLE */
#ifdef SEEK_DATA
#define POSIX_SEEK_DATA_DEF \
	{ "SEEK_DATA", (DeeObject *)&posix_SEEK_DATA, MODSYM_FREADONLY | MODSYM_FCONSTEXPR },
#if DeeInt_IsSmallInt(SEEK_DATA)
#define posix_SEEK_DATA (*DeeInt_ForSmallInt(SEEK_DATA))
#elif SEEK_DATA >= 0
#if SEEK_DATA <= 0x7fffull /* 15-bit */
PRIVATE DEFINE_UINT15(posix_SEEK_DATA, SEEK_DATA);
#elif SEEK_DATA <= 0x3fffffffull /* 30-bit */
PRIVATE DEFINE_UINT30(posix_SEEK_DATA, SEEK_DATA);
#elif SEEK_DATA <= 0x1fffffffffffull /* 45-bit */
PRIVATE DEFINE_UINT45(posix_SEEK_DATA, SEEK_DATA);
#elif SEEK_DATA <= 0xfffffffffffffffull /* 60-bit */
PRIVATE DEFINE_UINT60(posix_SEEK_DATA, SEEK_DATA);
#else
PRIVATE DEFINE_UINT75(posix_SEEK_DATA, SEEK_DATA);
#endif
#else /* SEEK_DATA >= 0 */
#if SEEK_DATA >= -0x4000ll /* 15-bit */
PRIVATE DEFINE_INT15(posix_SEEK_DATA, SEEK_DATA);
#elif SEEK_DATA >= -0x20000000ll /* 30-bit */
PRIVATE DEFINE_INT30(posix_SEEK_DATA, SEEK_DATA);
#elif SEEK_DATA >= -0x100000000000ll /* 45-bit */
PRIVATE DEFINE_INT45(posix_SEEK_DATA, SEEK_DATA);
#elif SEEK_DATA >= -0x800000000000000ll /* 60-bit */
PRIVATE DEFINE_INT60(posix_SEEK_DATA, SEEK_DATA);
#else
PRIVATE DEFINE_INT75(posix_SEEK_DATA, SEEK_DATA);
#endif
#endif /* SEEK_DATA < 0 */
#else /* SEEK_DATA */
#define POSIX_SEEK_DATA_DEF /* nothing */
#endif /* !SEEK_DATA */
