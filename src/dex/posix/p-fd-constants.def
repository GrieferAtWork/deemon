/* Copyright (c) 2018-2023 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2023 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */
/* WARNING: Autogenerated file "p-fd-constants.def" */
#ifdef STDIN_FILENO
#define POSIX_STDIN_FILENO_DEF \
	{ "STDIN_FILENO", (DeeObject *)&posix_STDIN_FILENO, MODSYM_FREADONLY | MODSYM_FCONSTEXPR },
#if DeeInt_IsSmallInt(STDIN_FILENO)
#define posix_STDIN_FILENO (*DeeInt_ForSmallInt(STDIN_FILENO))
#elif STDIN_FILENO >= 0
#if STDIN_FILENO <= 0x7fffull /* 15-bit */
PRIVATE DEFINE_UINT15(posix_STDIN_FILENO, STDIN_FILENO);
#elif STDIN_FILENO <= 0x3fffffffull /* 30-bit */
PRIVATE DEFINE_UINT30(posix_STDIN_FILENO, STDIN_FILENO);
#elif STDIN_FILENO <= 0x1fffffffffffull /* 45-bit */
PRIVATE DEFINE_UINT45(posix_STDIN_FILENO, STDIN_FILENO);
#elif STDIN_FILENO <= 0xfffffffffffffffull /* 60-bit */
PRIVATE DEFINE_UINT60(posix_STDIN_FILENO, STDIN_FILENO);
#else
PRIVATE DEFINE_UINT75(posix_STDIN_FILENO, STDIN_FILENO);
#endif
#else /* STDIN_FILENO >= 0 */
#if STDIN_FILENO >= -0x4000ll /* 15-bit */
PRIVATE DEFINE_INT15(posix_STDIN_FILENO, STDIN_FILENO);
#elif STDIN_FILENO >= -0x20000000ll /* 30-bit */
PRIVATE DEFINE_INT30(posix_STDIN_FILENO, STDIN_FILENO);
#elif STDIN_FILENO >= -0x100000000000ll /* 45-bit */
PRIVATE DEFINE_INT45(posix_STDIN_FILENO, STDIN_FILENO);
#elif STDIN_FILENO >= -0x800000000000000ll /* 60-bit */
PRIVATE DEFINE_INT60(posix_STDIN_FILENO, STDIN_FILENO);
#else
PRIVATE DEFINE_INT75(posix_STDIN_FILENO, STDIN_FILENO);
#endif
#endif /* STDIN_FILENO < 0 */
#else /* STDIN_FILENO */
#define POSIX_STDIN_FILENO_DEF /* nothing */
#endif /* !STDIN_FILENO */
#ifdef STDOUT_FILENO
#define POSIX_STDOUT_FILENO_DEF \
	{ "STDOUT_FILENO", (DeeObject *)&posix_STDOUT_FILENO, MODSYM_FREADONLY | MODSYM_FCONSTEXPR },
#if DeeInt_IsSmallInt(STDOUT_FILENO)
#define posix_STDOUT_FILENO (*DeeInt_ForSmallInt(STDOUT_FILENO))
#elif STDOUT_FILENO >= 0
#if STDOUT_FILENO <= 0x7fffull /* 15-bit */
PRIVATE DEFINE_UINT15(posix_STDOUT_FILENO, STDOUT_FILENO);
#elif STDOUT_FILENO <= 0x3fffffffull /* 30-bit */
PRIVATE DEFINE_UINT30(posix_STDOUT_FILENO, STDOUT_FILENO);
#elif STDOUT_FILENO <= 0x1fffffffffffull /* 45-bit */
PRIVATE DEFINE_UINT45(posix_STDOUT_FILENO, STDOUT_FILENO);
#elif STDOUT_FILENO <= 0xfffffffffffffffull /* 60-bit */
PRIVATE DEFINE_UINT60(posix_STDOUT_FILENO, STDOUT_FILENO);
#else
PRIVATE DEFINE_UINT75(posix_STDOUT_FILENO, STDOUT_FILENO);
#endif
#else /* STDOUT_FILENO >= 0 */
#if STDOUT_FILENO >= -0x4000ll /* 15-bit */
PRIVATE DEFINE_INT15(posix_STDOUT_FILENO, STDOUT_FILENO);
#elif STDOUT_FILENO >= -0x20000000ll /* 30-bit */
PRIVATE DEFINE_INT30(posix_STDOUT_FILENO, STDOUT_FILENO);
#elif STDOUT_FILENO >= -0x100000000000ll /* 45-bit */
PRIVATE DEFINE_INT45(posix_STDOUT_FILENO, STDOUT_FILENO);
#elif STDOUT_FILENO >= -0x800000000000000ll /* 60-bit */
PRIVATE DEFINE_INT60(posix_STDOUT_FILENO, STDOUT_FILENO);
#else
PRIVATE DEFINE_INT75(posix_STDOUT_FILENO, STDOUT_FILENO);
#endif
#endif /* STDOUT_FILENO < 0 */
#else /* STDOUT_FILENO */
#define POSIX_STDOUT_FILENO_DEF /* nothing */
#endif /* !STDOUT_FILENO */
#ifdef STDERR_FILENO
#define POSIX_STDERR_FILENO_DEF \
	{ "STDERR_FILENO", (DeeObject *)&posix_STDERR_FILENO, MODSYM_FREADONLY | MODSYM_FCONSTEXPR },
#if DeeInt_IsSmallInt(STDERR_FILENO)
#define posix_STDERR_FILENO (*DeeInt_ForSmallInt(STDERR_FILENO))
#elif STDERR_FILENO >= 0
#if STDERR_FILENO <= 0x7fffull /* 15-bit */
PRIVATE DEFINE_UINT15(posix_STDERR_FILENO, STDERR_FILENO);
#elif STDERR_FILENO <= 0x3fffffffull /* 30-bit */
PRIVATE DEFINE_UINT30(posix_STDERR_FILENO, STDERR_FILENO);
#elif STDERR_FILENO <= 0x1fffffffffffull /* 45-bit */
PRIVATE DEFINE_UINT45(posix_STDERR_FILENO, STDERR_FILENO);
#elif STDERR_FILENO <= 0xfffffffffffffffull /* 60-bit */
PRIVATE DEFINE_UINT60(posix_STDERR_FILENO, STDERR_FILENO);
#else
PRIVATE DEFINE_UINT75(posix_STDERR_FILENO, STDERR_FILENO);
#endif
#else /* STDERR_FILENO >= 0 */
#if STDERR_FILENO >= -0x4000ll /* 15-bit */
PRIVATE DEFINE_INT15(posix_STDERR_FILENO, STDERR_FILENO);
#elif STDERR_FILENO >= -0x20000000ll /* 30-bit */
PRIVATE DEFINE_INT30(posix_STDERR_FILENO, STDERR_FILENO);
#elif STDERR_FILENO >= -0x100000000000ll /* 45-bit */
PRIVATE DEFINE_INT45(posix_STDERR_FILENO, STDERR_FILENO);
#elif STDERR_FILENO >= -0x800000000000000ll /* 60-bit */
PRIVATE DEFINE_INT60(posix_STDERR_FILENO, STDERR_FILENO);
#else
PRIVATE DEFINE_INT75(posix_STDERR_FILENO, STDERR_FILENO);
#endif
#endif /* STDERR_FILENO < 0 */
#else /* STDERR_FILENO */
#define POSIX_STDERR_FILENO_DEF /* nothing */
#endif /* !STDERR_FILENO */
