/* Copyright (c) 2018-2025 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2025 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */
/* WARNING: Autogenerated file "p-errno-constants.def" */
#ifdef EOK
#define POSIX_EOK_DEF \
	{ "EOK", OBJ_posix_EOK, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Success" },
#if DeeInt_IsSmallInt(EOK)
#define OBJ_posix_EOK DeeInt_ForSmallInt(EOK)
#elif EOK >= 0
#if EOK <= 0x7fffull /* 15-bit */
#define OBJ_posix_EOK ((DeeObject *)&posix_EOK)
PRIVATE DEFINE_UINT15(posix_EOK, EOK);
#elif EOK <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EOK ((DeeObject *)&posix_EOK)
PRIVATE DEFINE_UINT30(posix_EOK, EOK);
#elif EOK <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EOK ((DeeObject *)&posix_EOK)
PRIVATE DEFINE_UINT45(posix_EOK, EOK);
#elif EOK <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EOK ((DeeObject *)&posix_EOK)
PRIVATE DEFINE_UINT60(posix_EOK, EOK);
#else
#define OBJ_posix_EOK ((DeeObject *)&posix_EOK)
PRIVATE DEFINE_UINT75(posix_EOK, EOK);
#endif
#else /* EOK >= 0 */
#if EOK >= -0x4000ll /* 15-bit */
#define OBJ_posix_EOK ((DeeObject *)&posix_EOK)
PRIVATE DEFINE_INT15(posix_EOK, EOK);
#elif EOK >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EOK ((DeeObject *)&posix_EOK)
PRIVATE DEFINE_INT30(posix_EOK, EOK);
#elif EOK >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EOK ((DeeObject *)&posix_EOK)
PRIVATE DEFINE_INT45(posix_EOK, EOK);
#elif EOK >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EOK ((DeeObject *)&posix_EOK)
PRIVATE DEFINE_INT60(posix_EOK, EOK);
#else
#define OBJ_posix_EOK ((DeeObject *)&posix_EOK)
PRIVATE DEFINE_INT75(posix_EOK, EOK);
#endif
#endif /* EOK < 0 */
#else /* EOK */
#define POSIX_EOK_DEF /* nothing */
#endif /* !EOK */
#ifdef EPERM
#define POSIX_EPERM_DEF \
	{ "EPERM", OBJ_posix_EPERM, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Operation not permitted" },
#if DeeInt_IsSmallInt(EPERM)
#define OBJ_posix_EPERM DeeInt_ForSmallInt(EPERM)
#elif EPERM >= 0
#if EPERM <= 0x7fffull /* 15-bit */
#define OBJ_posix_EPERM ((DeeObject *)&posix_EPERM)
PRIVATE DEFINE_UINT15(posix_EPERM, EPERM);
#elif EPERM <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EPERM ((DeeObject *)&posix_EPERM)
PRIVATE DEFINE_UINT30(posix_EPERM, EPERM);
#elif EPERM <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EPERM ((DeeObject *)&posix_EPERM)
PRIVATE DEFINE_UINT45(posix_EPERM, EPERM);
#elif EPERM <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EPERM ((DeeObject *)&posix_EPERM)
PRIVATE DEFINE_UINT60(posix_EPERM, EPERM);
#else
#define OBJ_posix_EPERM ((DeeObject *)&posix_EPERM)
PRIVATE DEFINE_UINT75(posix_EPERM, EPERM);
#endif
#else /* EPERM >= 0 */
#if EPERM >= -0x4000ll /* 15-bit */
#define OBJ_posix_EPERM ((DeeObject *)&posix_EPERM)
PRIVATE DEFINE_INT15(posix_EPERM, EPERM);
#elif EPERM >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EPERM ((DeeObject *)&posix_EPERM)
PRIVATE DEFINE_INT30(posix_EPERM, EPERM);
#elif EPERM >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EPERM ((DeeObject *)&posix_EPERM)
PRIVATE DEFINE_INT45(posix_EPERM, EPERM);
#elif EPERM >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EPERM ((DeeObject *)&posix_EPERM)
PRIVATE DEFINE_INT60(posix_EPERM, EPERM);
#else
#define OBJ_posix_EPERM ((DeeObject *)&posix_EPERM)
PRIVATE DEFINE_INT75(posix_EPERM, EPERM);
#endif
#endif /* EPERM < 0 */
#else /* EPERM */
#define POSIX_EPERM_DEF /* nothing */
#endif /* !EPERM */
#ifdef ENOENT
#define POSIX_ENOENT_DEF \
	{ "ENOENT", OBJ_posix_ENOENT, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "No such file or directory" },
#if DeeInt_IsSmallInt(ENOENT)
#define OBJ_posix_ENOENT DeeInt_ForSmallInt(ENOENT)
#elif ENOENT >= 0
#if ENOENT <= 0x7fffull /* 15-bit */
#define OBJ_posix_ENOENT ((DeeObject *)&posix_ENOENT)
PRIVATE DEFINE_UINT15(posix_ENOENT, ENOENT);
#elif ENOENT <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ENOENT ((DeeObject *)&posix_ENOENT)
PRIVATE DEFINE_UINT30(posix_ENOENT, ENOENT);
#elif ENOENT <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ENOENT ((DeeObject *)&posix_ENOENT)
PRIVATE DEFINE_UINT45(posix_ENOENT, ENOENT);
#elif ENOENT <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ENOENT ((DeeObject *)&posix_ENOENT)
PRIVATE DEFINE_UINT60(posix_ENOENT, ENOENT);
#else
#define OBJ_posix_ENOENT ((DeeObject *)&posix_ENOENT)
PRIVATE DEFINE_UINT75(posix_ENOENT, ENOENT);
#endif
#else /* ENOENT >= 0 */
#if ENOENT >= -0x4000ll /* 15-bit */
#define OBJ_posix_ENOENT ((DeeObject *)&posix_ENOENT)
PRIVATE DEFINE_INT15(posix_ENOENT, ENOENT);
#elif ENOENT >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ENOENT ((DeeObject *)&posix_ENOENT)
PRIVATE DEFINE_INT30(posix_ENOENT, ENOENT);
#elif ENOENT >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ENOENT ((DeeObject *)&posix_ENOENT)
PRIVATE DEFINE_INT45(posix_ENOENT, ENOENT);
#elif ENOENT >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ENOENT ((DeeObject *)&posix_ENOENT)
PRIVATE DEFINE_INT60(posix_ENOENT, ENOENT);
#else
#define OBJ_posix_ENOENT ((DeeObject *)&posix_ENOENT)
PRIVATE DEFINE_INT75(posix_ENOENT, ENOENT);
#endif
#endif /* ENOENT < 0 */
#else /* ENOENT */
#define POSIX_ENOENT_DEF /* nothing */
#endif /* !ENOENT */
#ifdef ESRCH
#define POSIX_ESRCH_DEF \
	{ "ESRCH", OBJ_posix_ESRCH, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "No such process" },
#if DeeInt_IsSmallInt(ESRCH)
#define OBJ_posix_ESRCH DeeInt_ForSmallInt(ESRCH)
#elif ESRCH >= 0
#if ESRCH <= 0x7fffull /* 15-bit */
#define OBJ_posix_ESRCH ((DeeObject *)&posix_ESRCH)
PRIVATE DEFINE_UINT15(posix_ESRCH, ESRCH);
#elif ESRCH <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ESRCH ((DeeObject *)&posix_ESRCH)
PRIVATE DEFINE_UINT30(posix_ESRCH, ESRCH);
#elif ESRCH <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ESRCH ((DeeObject *)&posix_ESRCH)
PRIVATE DEFINE_UINT45(posix_ESRCH, ESRCH);
#elif ESRCH <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ESRCH ((DeeObject *)&posix_ESRCH)
PRIVATE DEFINE_UINT60(posix_ESRCH, ESRCH);
#else
#define OBJ_posix_ESRCH ((DeeObject *)&posix_ESRCH)
PRIVATE DEFINE_UINT75(posix_ESRCH, ESRCH);
#endif
#else /* ESRCH >= 0 */
#if ESRCH >= -0x4000ll /* 15-bit */
#define OBJ_posix_ESRCH ((DeeObject *)&posix_ESRCH)
PRIVATE DEFINE_INT15(posix_ESRCH, ESRCH);
#elif ESRCH >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ESRCH ((DeeObject *)&posix_ESRCH)
PRIVATE DEFINE_INT30(posix_ESRCH, ESRCH);
#elif ESRCH >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ESRCH ((DeeObject *)&posix_ESRCH)
PRIVATE DEFINE_INT45(posix_ESRCH, ESRCH);
#elif ESRCH >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ESRCH ((DeeObject *)&posix_ESRCH)
PRIVATE DEFINE_INT60(posix_ESRCH, ESRCH);
#else
#define OBJ_posix_ESRCH ((DeeObject *)&posix_ESRCH)
PRIVATE DEFINE_INT75(posix_ESRCH, ESRCH);
#endif
#endif /* ESRCH < 0 */
#else /* ESRCH */
#define POSIX_ESRCH_DEF /* nothing */
#endif /* !ESRCH */
#ifdef EINTR
#define POSIX_EINTR_DEF \
	{ "EINTR", OBJ_posix_EINTR, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Interrupted system call" },
#if DeeInt_IsSmallInt(EINTR)
#define OBJ_posix_EINTR DeeInt_ForSmallInt(EINTR)
#elif EINTR >= 0
#if EINTR <= 0x7fffull /* 15-bit */
#define OBJ_posix_EINTR ((DeeObject *)&posix_EINTR)
PRIVATE DEFINE_UINT15(posix_EINTR, EINTR);
#elif EINTR <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EINTR ((DeeObject *)&posix_EINTR)
PRIVATE DEFINE_UINT30(posix_EINTR, EINTR);
#elif EINTR <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EINTR ((DeeObject *)&posix_EINTR)
PRIVATE DEFINE_UINT45(posix_EINTR, EINTR);
#elif EINTR <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EINTR ((DeeObject *)&posix_EINTR)
PRIVATE DEFINE_UINT60(posix_EINTR, EINTR);
#else
#define OBJ_posix_EINTR ((DeeObject *)&posix_EINTR)
PRIVATE DEFINE_UINT75(posix_EINTR, EINTR);
#endif
#else /* EINTR >= 0 */
#if EINTR >= -0x4000ll /* 15-bit */
#define OBJ_posix_EINTR ((DeeObject *)&posix_EINTR)
PRIVATE DEFINE_INT15(posix_EINTR, EINTR);
#elif EINTR >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EINTR ((DeeObject *)&posix_EINTR)
PRIVATE DEFINE_INT30(posix_EINTR, EINTR);
#elif EINTR >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EINTR ((DeeObject *)&posix_EINTR)
PRIVATE DEFINE_INT45(posix_EINTR, EINTR);
#elif EINTR >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EINTR ((DeeObject *)&posix_EINTR)
PRIVATE DEFINE_INT60(posix_EINTR, EINTR);
#else
#define OBJ_posix_EINTR ((DeeObject *)&posix_EINTR)
PRIVATE DEFINE_INT75(posix_EINTR, EINTR);
#endif
#endif /* EINTR < 0 */
#else /* EINTR */
#define POSIX_EINTR_DEF /* nothing */
#endif /* !EINTR */
#ifdef EIO
#define POSIX_EIO_DEF \
	{ "EIO", OBJ_posix_EIO, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "I/O error" },
#if DeeInt_IsSmallInt(EIO)
#define OBJ_posix_EIO DeeInt_ForSmallInt(EIO)
#elif EIO >= 0
#if EIO <= 0x7fffull /* 15-bit */
#define OBJ_posix_EIO ((DeeObject *)&posix_EIO)
PRIVATE DEFINE_UINT15(posix_EIO, EIO);
#elif EIO <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EIO ((DeeObject *)&posix_EIO)
PRIVATE DEFINE_UINT30(posix_EIO, EIO);
#elif EIO <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EIO ((DeeObject *)&posix_EIO)
PRIVATE DEFINE_UINT45(posix_EIO, EIO);
#elif EIO <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EIO ((DeeObject *)&posix_EIO)
PRIVATE DEFINE_UINT60(posix_EIO, EIO);
#else
#define OBJ_posix_EIO ((DeeObject *)&posix_EIO)
PRIVATE DEFINE_UINT75(posix_EIO, EIO);
#endif
#else /* EIO >= 0 */
#if EIO >= -0x4000ll /* 15-bit */
#define OBJ_posix_EIO ((DeeObject *)&posix_EIO)
PRIVATE DEFINE_INT15(posix_EIO, EIO);
#elif EIO >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EIO ((DeeObject *)&posix_EIO)
PRIVATE DEFINE_INT30(posix_EIO, EIO);
#elif EIO >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EIO ((DeeObject *)&posix_EIO)
PRIVATE DEFINE_INT45(posix_EIO, EIO);
#elif EIO >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EIO ((DeeObject *)&posix_EIO)
PRIVATE DEFINE_INT60(posix_EIO, EIO);
#else
#define OBJ_posix_EIO ((DeeObject *)&posix_EIO)
PRIVATE DEFINE_INT75(posix_EIO, EIO);
#endif
#endif /* EIO < 0 */
#else /* EIO */
#define POSIX_EIO_DEF /* nothing */
#endif /* !EIO */
#ifdef ENXIO
#define POSIX_ENXIO_DEF \
	{ "ENXIO", OBJ_posix_ENXIO, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "No such device or address" },
#if DeeInt_IsSmallInt(ENXIO)
#define OBJ_posix_ENXIO DeeInt_ForSmallInt(ENXIO)
#elif ENXIO >= 0
#if ENXIO <= 0x7fffull /* 15-bit */
#define OBJ_posix_ENXIO ((DeeObject *)&posix_ENXIO)
PRIVATE DEFINE_UINT15(posix_ENXIO, ENXIO);
#elif ENXIO <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ENXIO ((DeeObject *)&posix_ENXIO)
PRIVATE DEFINE_UINT30(posix_ENXIO, ENXIO);
#elif ENXIO <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ENXIO ((DeeObject *)&posix_ENXIO)
PRIVATE DEFINE_UINT45(posix_ENXIO, ENXIO);
#elif ENXIO <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ENXIO ((DeeObject *)&posix_ENXIO)
PRIVATE DEFINE_UINT60(posix_ENXIO, ENXIO);
#else
#define OBJ_posix_ENXIO ((DeeObject *)&posix_ENXIO)
PRIVATE DEFINE_UINT75(posix_ENXIO, ENXIO);
#endif
#else /* ENXIO >= 0 */
#if ENXIO >= -0x4000ll /* 15-bit */
#define OBJ_posix_ENXIO ((DeeObject *)&posix_ENXIO)
PRIVATE DEFINE_INT15(posix_ENXIO, ENXIO);
#elif ENXIO >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ENXIO ((DeeObject *)&posix_ENXIO)
PRIVATE DEFINE_INT30(posix_ENXIO, ENXIO);
#elif ENXIO >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ENXIO ((DeeObject *)&posix_ENXIO)
PRIVATE DEFINE_INT45(posix_ENXIO, ENXIO);
#elif ENXIO >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ENXIO ((DeeObject *)&posix_ENXIO)
PRIVATE DEFINE_INT60(posix_ENXIO, ENXIO);
#else
#define OBJ_posix_ENXIO ((DeeObject *)&posix_ENXIO)
PRIVATE DEFINE_INT75(posix_ENXIO, ENXIO);
#endif
#endif /* ENXIO < 0 */
#else /* ENXIO */
#define POSIX_ENXIO_DEF /* nothing */
#endif /* !ENXIO */
#ifdef E2BIG
#define POSIX_E2BIG_DEF \
	{ "E2BIG", OBJ_posix_E2BIG, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Argument list too long" },
#if DeeInt_IsSmallInt(E2BIG)
#define OBJ_posix_E2BIG DeeInt_ForSmallInt(E2BIG)
#elif E2BIG >= 0
#if E2BIG <= 0x7fffull /* 15-bit */
#define OBJ_posix_E2BIG ((DeeObject *)&posix_E2BIG)
PRIVATE DEFINE_UINT15(posix_E2BIG, E2BIG);
#elif E2BIG <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_E2BIG ((DeeObject *)&posix_E2BIG)
PRIVATE DEFINE_UINT30(posix_E2BIG, E2BIG);
#elif E2BIG <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_E2BIG ((DeeObject *)&posix_E2BIG)
PRIVATE DEFINE_UINT45(posix_E2BIG, E2BIG);
#elif E2BIG <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_E2BIG ((DeeObject *)&posix_E2BIG)
PRIVATE DEFINE_UINT60(posix_E2BIG, E2BIG);
#else
#define OBJ_posix_E2BIG ((DeeObject *)&posix_E2BIG)
PRIVATE DEFINE_UINT75(posix_E2BIG, E2BIG);
#endif
#else /* E2BIG >= 0 */
#if E2BIG >= -0x4000ll /* 15-bit */
#define OBJ_posix_E2BIG ((DeeObject *)&posix_E2BIG)
PRIVATE DEFINE_INT15(posix_E2BIG, E2BIG);
#elif E2BIG >= -0x20000000ll /* 30-bit */
#define OBJ_posix_E2BIG ((DeeObject *)&posix_E2BIG)
PRIVATE DEFINE_INT30(posix_E2BIG, E2BIG);
#elif E2BIG >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_E2BIG ((DeeObject *)&posix_E2BIG)
PRIVATE DEFINE_INT45(posix_E2BIG, E2BIG);
#elif E2BIG >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_E2BIG ((DeeObject *)&posix_E2BIG)
PRIVATE DEFINE_INT60(posix_E2BIG, E2BIG);
#else
#define OBJ_posix_E2BIG ((DeeObject *)&posix_E2BIG)
PRIVATE DEFINE_INT75(posix_E2BIG, E2BIG);
#endif
#endif /* E2BIG < 0 */
#else /* E2BIG */
#define POSIX_E2BIG_DEF /* nothing */
#endif /* !E2BIG */
#ifdef ENOEXEC
#define POSIX_ENOEXEC_DEF \
	{ "ENOEXEC", OBJ_posix_ENOEXEC, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Exec format error" },
#if DeeInt_IsSmallInt(ENOEXEC)
#define OBJ_posix_ENOEXEC DeeInt_ForSmallInt(ENOEXEC)
#elif ENOEXEC >= 0
#if ENOEXEC <= 0x7fffull /* 15-bit */
#define OBJ_posix_ENOEXEC ((DeeObject *)&posix_ENOEXEC)
PRIVATE DEFINE_UINT15(posix_ENOEXEC, ENOEXEC);
#elif ENOEXEC <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ENOEXEC ((DeeObject *)&posix_ENOEXEC)
PRIVATE DEFINE_UINT30(posix_ENOEXEC, ENOEXEC);
#elif ENOEXEC <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ENOEXEC ((DeeObject *)&posix_ENOEXEC)
PRIVATE DEFINE_UINT45(posix_ENOEXEC, ENOEXEC);
#elif ENOEXEC <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ENOEXEC ((DeeObject *)&posix_ENOEXEC)
PRIVATE DEFINE_UINT60(posix_ENOEXEC, ENOEXEC);
#else
#define OBJ_posix_ENOEXEC ((DeeObject *)&posix_ENOEXEC)
PRIVATE DEFINE_UINT75(posix_ENOEXEC, ENOEXEC);
#endif
#else /* ENOEXEC >= 0 */
#if ENOEXEC >= -0x4000ll /* 15-bit */
#define OBJ_posix_ENOEXEC ((DeeObject *)&posix_ENOEXEC)
PRIVATE DEFINE_INT15(posix_ENOEXEC, ENOEXEC);
#elif ENOEXEC >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ENOEXEC ((DeeObject *)&posix_ENOEXEC)
PRIVATE DEFINE_INT30(posix_ENOEXEC, ENOEXEC);
#elif ENOEXEC >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ENOEXEC ((DeeObject *)&posix_ENOEXEC)
PRIVATE DEFINE_INT45(posix_ENOEXEC, ENOEXEC);
#elif ENOEXEC >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ENOEXEC ((DeeObject *)&posix_ENOEXEC)
PRIVATE DEFINE_INT60(posix_ENOEXEC, ENOEXEC);
#else
#define OBJ_posix_ENOEXEC ((DeeObject *)&posix_ENOEXEC)
PRIVATE DEFINE_INT75(posix_ENOEXEC, ENOEXEC);
#endif
#endif /* ENOEXEC < 0 */
#else /* ENOEXEC */
#define POSIX_ENOEXEC_DEF /* nothing */
#endif /* !ENOEXEC */
#ifdef EBADF
#define POSIX_EBADF_DEF \
	{ "EBADF", OBJ_posix_EBADF, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Bad file number" },
#if DeeInt_IsSmallInt(EBADF)
#define OBJ_posix_EBADF DeeInt_ForSmallInt(EBADF)
#elif EBADF >= 0
#if EBADF <= 0x7fffull /* 15-bit */
#define OBJ_posix_EBADF ((DeeObject *)&posix_EBADF)
PRIVATE DEFINE_UINT15(posix_EBADF, EBADF);
#elif EBADF <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EBADF ((DeeObject *)&posix_EBADF)
PRIVATE DEFINE_UINT30(posix_EBADF, EBADF);
#elif EBADF <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EBADF ((DeeObject *)&posix_EBADF)
PRIVATE DEFINE_UINT45(posix_EBADF, EBADF);
#elif EBADF <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EBADF ((DeeObject *)&posix_EBADF)
PRIVATE DEFINE_UINT60(posix_EBADF, EBADF);
#else
#define OBJ_posix_EBADF ((DeeObject *)&posix_EBADF)
PRIVATE DEFINE_UINT75(posix_EBADF, EBADF);
#endif
#else /* EBADF >= 0 */
#if EBADF >= -0x4000ll /* 15-bit */
#define OBJ_posix_EBADF ((DeeObject *)&posix_EBADF)
PRIVATE DEFINE_INT15(posix_EBADF, EBADF);
#elif EBADF >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EBADF ((DeeObject *)&posix_EBADF)
PRIVATE DEFINE_INT30(posix_EBADF, EBADF);
#elif EBADF >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EBADF ((DeeObject *)&posix_EBADF)
PRIVATE DEFINE_INT45(posix_EBADF, EBADF);
#elif EBADF >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EBADF ((DeeObject *)&posix_EBADF)
PRIVATE DEFINE_INT60(posix_EBADF, EBADF);
#else
#define OBJ_posix_EBADF ((DeeObject *)&posix_EBADF)
PRIVATE DEFINE_INT75(posix_EBADF, EBADF);
#endif
#endif /* EBADF < 0 */
#else /* EBADF */
#define POSIX_EBADF_DEF /* nothing */
#endif /* !EBADF */
#ifdef ECHILD
#define POSIX_ECHILD_DEF \
	{ "ECHILD", OBJ_posix_ECHILD, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "No child processes" },
#if DeeInt_IsSmallInt(ECHILD)
#define OBJ_posix_ECHILD DeeInt_ForSmallInt(ECHILD)
#elif ECHILD >= 0
#if ECHILD <= 0x7fffull /* 15-bit */
#define OBJ_posix_ECHILD ((DeeObject *)&posix_ECHILD)
PRIVATE DEFINE_UINT15(posix_ECHILD, ECHILD);
#elif ECHILD <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ECHILD ((DeeObject *)&posix_ECHILD)
PRIVATE DEFINE_UINT30(posix_ECHILD, ECHILD);
#elif ECHILD <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ECHILD ((DeeObject *)&posix_ECHILD)
PRIVATE DEFINE_UINT45(posix_ECHILD, ECHILD);
#elif ECHILD <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ECHILD ((DeeObject *)&posix_ECHILD)
PRIVATE DEFINE_UINT60(posix_ECHILD, ECHILD);
#else
#define OBJ_posix_ECHILD ((DeeObject *)&posix_ECHILD)
PRIVATE DEFINE_UINT75(posix_ECHILD, ECHILD);
#endif
#else /* ECHILD >= 0 */
#if ECHILD >= -0x4000ll /* 15-bit */
#define OBJ_posix_ECHILD ((DeeObject *)&posix_ECHILD)
PRIVATE DEFINE_INT15(posix_ECHILD, ECHILD);
#elif ECHILD >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ECHILD ((DeeObject *)&posix_ECHILD)
PRIVATE DEFINE_INT30(posix_ECHILD, ECHILD);
#elif ECHILD >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ECHILD ((DeeObject *)&posix_ECHILD)
PRIVATE DEFINE_INT45(posix_ECHILD, ECHILD);
#elif ECHILD >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ECHILD ((DeeObject *)&posix_ECHILD)
PRIVATE DEFINE_INT60(posix_ECHILD, ECHILD);
#else
#define OBJ_posix_ECHILD ((DeeObject *)&posix_ECHILD)
PRIVATE DEFINE_INT75(posix_ECHILD, ECHILD);
#endif
#endif /* ECHILD < 0 */
#else /* ECHILD */
#define POSIX_ECHILD_DEF /* nothing */
#endif /* !ECHILD */
#ifdef EAGAIN
#define POSIX_EAGAIN_DEF \
	{ "EAGAIN", OBJ_posix_EAGAIN, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Try again" },
#if DeeInt_IsSmallInt(EAGAIN)
#define OBJ_posix_EAGAIN DeeInt_ForSmallInt(EAGAIN)
#elif EAGAIN >= 0
#if EAGAIN <= 0x7fffull /* 15-bit */
#define OBJ_posix_EAGAIN ((DeeObject *)&posix_EAGAIN)
PRIVATE DEFINE_UINT15(posix_EAGAIN, EAGAIN);
#elif EAGAIN <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EAGAIN ((DeeObject *)&posix_EAGAIN)
PRIVATE DEFINE_UINT30(posix_EAGAIN, EAGAIN);
#elif EAGAIN <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EAGAIN ((DeeObject *)&posix_EAGAIN)
PRIVATE DEFINE_UINT45(posix_EAGAIN, EAGAIN);
#elif EAGAIN <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EAGAIN ((DeeObject *)&posix_EAGAIN)
PRIVATE DEFINE_UINT60(posix_EAGAIN, EAGAIN);
#else
#define OBJ_posix_EAGAIN ((DeeObject *)&posix_EAGAIN)
PRIVATE DEFINE_UINT75(posix_EAGAIN, EAGAIN);
#endif
#else /* EAGAIN >= 0 */
#if EAGAIN >= -0x4000ll /* 15-bit */
#define OBJ_posix_EAGAIN ((DeeObject *)&posix_EAGAIN)
PRIVATE DEFINE_INT15(posix_EAGAIN, EAGAIN);
#elif EAGAIN >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EAGAIN ((DeeObject *)&posix_EAGAIN)
PRIVATE DEFINE_INT30(posix_EAGAIN, EAGAIN);
#elif EAGAIN >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EAGAIN ((DeeObject *)&posix_EAGAIN)
PRIVATE DEFINE_INT45(posix_EAGAIN, EAGAIN);
#elif EAGAIN >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EAGAIN ((DeeObject *)&posix_EAGAIN)
PRIVATE DEFINE_INT60(posix_EAGAIN, EAGAIN);
#else
#define OBJ_posix_EAGAIN ((DeeObject *)&posix_EAGAIN)
PRIVATE DEFINE_INT75(posix_EAGAIN, EAGAIN);
#endif
#endif /* EAGAIN < 0 */
#else /* EAGAIN */
#define POSIX_EAGAIN_DEF /* nothing */
#endif /* !EAGAIN */
#ifdef ENOMEM
#define POSIX_ENOMEM_DEF \
	{ "ENOMEM", OBJ_posix_ENOMEM, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Out of memory" },
#if DeeInt_IsSmallInt(ENOMEM)
#define OBJ_posix_ENOMEM DeeInt_ForSmallInt(ENOMEM)
#elif ENOMEM >= 0
#if ENOMEM <= 0x7fffull /* 15-bit */
#define OBJ_posix_ENOMEM ((DeeObject *)&posix_ENOMEM)
PRIVATE DEFINE_UINT15(posix_ENOMEM, ENOMEM);
#elif ENOMEM <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ENOMEM ((DeeObject *)&posix_ENOMEM)
PRIVATE DEFINE_UINT30(posix_ENOMEM, ENOMEM);
#elif ENOMEM <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ENOMEM ((DeeObject *)&posix_ENOMEM)
PRIVATE DEFINE_UINT45(posix_ENOMEM, ENOMEM);
#elif ENOMEM <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ENOMEM ((DeeObject *)&posix_ENOMEM)
PRIVATE DEFINE_UINT60(posix_ENOMEM, ENOMEM);
#else
#define OBJ_posix_ENOMEM ((DeeObject *)&posix_ENOMEM)
PRIVATE DEFINE_UINT75(posix_ENOMEM, ENOMEM);
#endif
#else /* ENOMEM >= 0 */
#if ENOMEM >= -0x4000ll /* 15-bit */
#define OBJ_posix_ENOMEM ((DeeObject *)&posix_ENOMEM)
PRIVATE DEFINE_INT15(posix_ENOMEM, ENOMEM);
#elif ENOMEM >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ENOMEM ((DeeObject *)&posix_ENOMEM)
PRIVATE DEFINE_INT30(posix_ENOMEM, ENOMEM);
#elif ENOMEM >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ENOMEM ((DeeObject *)&posix_ENOMEM)
PRIVATE DEFINE_INT45(posix_ENOMEM, ENOMEM);
#elif ENOMEM >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ENOMEM ((DeeObject *)&posix_ENOMEM)
PRIVATE DEFINE_INT60(posix_ENOMEM, ENOMEM);
#else
#define OBJ_posix_ENOMEM ((DeeObject *)&posix_ENOMEM)
PRIVATE DEFINE_INT75(posix_ENOMEM, ENOMEM);
#endif
#endif /* ENOMEM < 0 */
#else /* ENOMEM */
#define POSIX_ENOMEM_DEF /* nothing */
#endif /* !ENOMEM */
#ifdef EACCES
#define POSIX_EACCES_DEF \
	{ "EACCES", OBJ_posix_EACCES, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Permission denied" },
#if DeeInt_IsSmallInt(EACCES)
#define OBJ_posix_EACCES DeeInt_ForSmallInt(EACCES)
#elif EACCES >= 0
#if EACCES <= 0x7fffull /* 15-bit */
#define OBJ_posix_EACCES ((DeeObject *)&posix_EACCES)
PRIVATE DEFINE_UINT15(posix_EACCES, EACCES);
#elif EACCES <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EACCES ((DeeObject *)&posix_EACCES)
PRIVATE DEFINE_UINT30(posix_EACCES, EACCES);
#elif EACCES <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EACCES ((DeeObject *)&posix_EACCES)
PRIVATE DEFINE_UINT45(posix_EACCES, EACCES);
#elif EACCES <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EACCES ((DeeObject *)&posix_EACCES)
PRIVATE DEFINE_UINT60(posix_EACCES, EACCES);
#else
#define OBJ_posix_EACCES ((DeeObject *)&posix_EACCES)
PRIVATE DEFINE_UINT75(posix_EACCES, EACCES);
#endif
#else /* EACCES >= 0 */
#if EACCES >= -0x4000ll /* 15-bit */
#define OBJ_posix_EACCES ((DeeObject *)&posix_EACCES)
PRIVATE DEFINE_INT15(posix_EACCES, EACCES);
#elif EACCES >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EACCES ((DeeObject *)&posix_EACCES)
PRIVATE DEFINE_INT30(posix_EACCES, EACCES);
#elif EACCES >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EACCES ((DeeObject *)&posix_EACCES)
PRIVATE DEFINE_INT45(posix_EACCES, EACCES);
#elif EACCES >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EACCES ((DeeObject *)&posix_EACCES)
PRIVATE DEFINE_INT60(posix_EACCES, EACCES);
#else
#define OBJ_posix_EACCES ((DeeObject *)&posix_EACCES)
PRIVATE DEFINE_INT75(posix_EACCES, EACCES);
#endif
#endif /* EACCES < 0 */
#else /* EACCES */
#define POSIX_EACCES_DEF /* nothing */
#endif /* !EACCES */
#ifdef EFAULT
#define POSIX_EFAULT_DEF \
	{ "EFAULT", OBJ_posix_EFAULT, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Bad address" },
#if DeeInt_IsSmallInt(EFAULT)
#define OBJ_posix_EFAULT DeeInt_ForSmallInt(EFAULT)
#elif EFAULT >= 0
#if EFAULT <= 0x7fffull /* 15-bit */
#define OBJ_posix_EFAULT ((DeeObject *)&posix_EFAULT)
PRIVATE DEFINE_UINT15(posix_EFAULT, EFAULT);
#elif EFAULT <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EFAULT ((DeeObject *)&posix_EFAULT)
PRIVATE DEFINE_UINT30(posix_EFAULT, EFAULT);
#elif EFAULT <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EFAULT ((DeeObject *)&posix_EFAULT)
PRIVATE DEFINE_UINT45(posix_EFAULT, EFAULT);
#elif EFAULT <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EFAULT ((DeeObject *)&posix_EFAULT)
PRIVATE DEFINE_UINT60(posix_EFAULT, EFAULT);
#else
#define OBJ_posix_EFAULT ((DeeObject *)&posix_EFAULT)
PRIVATE DEFINE_UINT75(posix_EFAULT, EFAULT);
#endif
#else /* EFAULT >= 0 */
#if EFAULT >= -0x4000ll /* 15-bit */
#define OBJ_posix_EFAULT ((DeeObject *)&posix_EFAULT)
PRIVATE DEFINE_INT15(posix_EFAULT, EFAULT);
#elif EFAULT >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EFAULT ((DeeObject *)&posix_EFAULT)
PRIVATE DEFINE_INT30(posix_EFAULT, EFAULT);
#elif EFAULT >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EFAULT ((DeeObject *)&posix_EFAULT)
PRIVATE DEFINE_INT45(posix_EFAULT, EFAULT);
#elif EFAULT >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EFAULT ((DeeObject *)&posix_EFAULT)
PRIVATE DEFINE_INT60(posix_EFAULT, EFAULT);
#else
#define OBJ_posix_EFAULT ((DeeObject *)&posix_EFAULT)
PRIVATE DEFINE_INT75(posix_EFAULT, EFAULT);
#endif
#endif /* EFAULT < 0 */
#else /* EFAULT */
#define POSIX_EFAULT_DEF /* nothing */
#endif /* !EFAULT */
#ifdef ENOTBLK
#define POSIX_ENOTBLK_DEF \
	{ "ENOTBLK", OBJ_posix_ENOTBLK, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Block device required" },
#if DeeInt_IsSmallInt(ENOTBLK)
#define OBJ_posix_ENOTBLK DeeInt_ForSmallInt(ENOTBLK)
#elif ENOTBLK >= 0
#if ENOTBLK <= 0x7fffull /* 15-bit */
#define OBJ_posix_ENOTBLK ((DeeObject *)&posix_ENOTBLK)
PRIVATE DEFINE_UINT15(posix_ENOTBLK, ENOTBLK);
#elif ENOTBLK <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ENOTBLK ((DeeObject *)&posix_ENOTBLK)
PRIVATE DEFINE_UINT30(posix_ENOTBLK, ENOTBLK);
#elif ENOTBLK <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ENOTBLK ((DeeObject *)&posix_ENOTBLK)
PRIVATE DEFINE_UINT45(posix_ENOTBLK, ENOTBLK);
#elif ENOTBLK <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ENOTBLK ((DeeObject *)&posix_ENOTBLK)
PRIVATE DEFINE_UINT60(posix_ENOTBLK, ENOTBLK);
#else
#define OBJ_posix_ENOTBLK ((DeeObject *)&posix_ENOTBLK)
PRIVATE DEFINE_UINT75(posix_ENOTBLK, ENOTBLK);
#endif
#else /* ENOTBLK >= 0 */
#if ENOTBLK >= -0x4000ll /* 15-bit */
#define OBJ_posix_ENOTBLK ((DeeObject *)&posix_ENOTBLK)
PRIVATE DEFINE_INT15(posix_ENOTBLK, ENOTBLK);
#elif ENOTBLK >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ENOTBLK ((DeeObject *)&posix_ENOTBLK)
PRIVATE DEFINE_INT30(posix_ENOTBLK, ENOTBLK);
#elif ENOTBLK >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ENOTBLK ((DeeObject *)&posix_ENOTBLK)
PRIVATE DEFINE_INT45(posix_ENOTBLK, ENOTBLK);
#elif ENOTBLK >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ENOTBLK ((DeeObject *)&posix_ENOTBLK)
PRIVATE DEFINE_INT60(posix_ENOTBLK, ENOTBLK);
#else
#define OBJ_posix_ENOTBLK ((DeeObject *)&posix_ENOTBLK)
PRIVATE DEFINE_INT75(posix_ENOTBLK, ENOTBLK);
#endif
#endif /* ENOTBLK < 0 */
#else /* ENOTBLK */
#define POSIX_ENOTBLK_DEF /* nothing */
#endif /* !ENOTBLK */
#ifdef EBUSY
#define POSIX_EBUSY_DEF \
	{ "EBUSY", OBJ_posix_EBUSY, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Device or resource busy" },
#if DeeInt_IsSmallInt(EBUSY)
#define OBJ_posix_EBUSY DeeInt_ForSmallInt(EBUSY)
#elif EBUSY >= 0
#if EBUSY <= 0x7fffull /* 15-bit */
#define OBJ_posix_EBUSY ((DeeObject *)&posix_EBUSY)
PRIVATE DEFINE_UINT15(posix_EBUSY, EBUSY);
#elif EBUSY <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EBUSY ((DeeObject *)&posix_EBUSY)
PRIVATE DEFINE_UINT30(posix_EBUSY, EBUSY);
#elif EBUSY <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EBUSY ((DeeObject *)&posix_EBUSY)
PRIVATE DEFINE_UINT45(posix_EBUSY, EBUSY);
#elif EBUSY <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EBUSY ((DeeObject *)&posix_EBUSY)
PRIVATE DEFINE_UINT60(posix_EBUSY, EBUSY);
#else
#define OBJ_posix_EBUSY ((DeeObject *)&posix_EBUSY)
PRIVATE DEFINE_UINT75(posix_EBUSY, EBUSY);
#endif
#else /* EBUSY >= 0 */
#if EBUSY >= -0x4000ll /* 15-bit */
#define OBJ_posix_EBUSY ((DeeObject *)&posix_EBUSY)
PRIVATE DEFINE_INT15(posix_EBUSY, EBUSY);
#elif EBUSY >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EBUSY ((DeeObject *)&posix_EBUSY)
PRIVATE DEFINE_INT30(posix_EBUSY, EBUSY);
#elif EBUSY >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EBUSY ((DeeObject *)&posix_EBUSY)
PRIVATE DEFINE_INT45(posix_EBUSY, EBUSY);
#elif EBUSY >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EBUSY ((DeeObject *)&posix_EBUSY)
PRIVATE DEFINE_INT60(posix_EBUSY, EBUSY);
#else
#define OBJ_posix_EBUSY ((DeeObject *)&posix_EBUSY)
PRIVATE DEFINE_INT75(posix_EBUSY, EBUSY);
#endif
#endif /* EBUSY < 0 */
#else /* EBUSY */
#define POSIX_EBUSY_DEF /* nothing */
#endif /* !EBUSY */
#ifdef EEXIST
#define POSIX_EEXIST_DEF \
	{ "EEXIST", OBJ_posix_EEXIST, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "File exists" },
#if DeeInt_IsSmallInt(EEXIST)
#define OBJ_posix_EEXIST DeeInt_ForSmallInt(EEXIST)
#elif EEXIST >= 0
#if EEXIST <= 0x7fffull /* 15-bit */
#define OBJ_posix_EEXIST ((DeeObject *)&posix_EEXIST)
PRIVATE DEFINE_UINT15(posix_EEXIST, EEXIST);
#elif EEXIST <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EEXIST ((DeeObject *)&posix_EEXIST)
PRIVATE DEFINE_UINT30(posix_EEXIST, EEXIST);
#elif EEXIST <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EEXIST ((DeeObject *)&posix_EEXIST)
PRIVATE DEFINE_UINT45(posix_EEXIST, EEXIST);
#elif EEXIST <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EEXIST ((DeeObject *)&posix_EEXIST)
PRIVATE DEFINE_UINT60(posix_EEXIST, EEXIST);
#else
#define OBJ_posix_EEXIST ((DeeObject *)&posix_EEXIST)
PRIVATE DEFINE_UINT75(posix_EEXIST, EEXIST);
#endif
#else /* EEXIST >= 0 */
#if EEXIST >= -0x4000ll /* 15-bit */
#define OBJ_posix_EEXIST ((DeeObject *)&posix_EEXIST)
PRIVATE DEFINE_INT15(posix_EEXIST, EEXIST);
#elif EEXIST >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EEXIST ((DeeObject *)&posix_EEXIST)
PRIVATE DEFINE_INT30(posix_EEXIST, EEXIST);
#elif EEXIST >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EEXIST ((DeeObject *)&posix_EEXIST)
PRIVATE DEFINE_INT45(posix_EEXIST, EEXIST);
#elif EEXIST >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EEXIST ((DeeObject *)&posix_EEXIST)
PRIVATE DEFINE_INT60(posix_EEXIST, EEXIST);
#else
#define OBJ_posix_EEXIST ((DeeObject *)&posix_EEXIST)
PRIVATE DEFINE_INT75(posix_EEXIST, EEXIST);
#endif
#endif /* EEXIST < 0 */
#else /* EEXIST */
#define POSIX_EEXIST_DEF /* nothing */
#endif /* !EEXIST */
#ifdef EXDEV
#define POSIX_EXDEV_DEF \
	{ "EXDEV", OBJ_posix_EXDEV, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Cross-device link" },
#if DeeInt_IsSmallInt(EXDEV)
#define OBJ_posix_EXDEV DeeInt_ForSmallInt(EXDEV)
#elif EXDEV >= 0
#if EXDEV <= 0x7fffull /* 15-bit */
#define OBJ_posix_EXDEV ((DeeObject *)&posix_EXDEV)
PRIVATE DEFINE_UINT15(posix_EXDEV, EXDEV);
#elif EXDEV <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EXDEV ((DeeObject *)&posix_EXDEV)
PRIVATE DEFINE_UINT30(posix_EXDEV, EXDEV);
#elif EXDEV <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EXDEV ((DeeObject *)&posix_EXDEV)
PRIVATE DEFINE_UINT45(posix_EXDEV, EXDEV);
#elif EXDEV <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EXDEV ((DeeObject *)&posix_EXDEV)
PRIVATE DEFINE_UINT60(posix_EXDEV, EXDEV);
#else
#define OBJ_posix_EXDEV ((DeeObject *)&posix_EXDEV)
PRIVATE DEFINE_UINT75(posix_EXDEV, EXDEV);
#endif
#else /* EXDEV >= 0 */
#if EXDEV >= -0x4000ll /* 15-bit */
#define OBJ_posix_EXDEV ((DeeObject *)&posix_EXDEV)
PRIVATE DEFINE_INT15(posix_EXDEV, EXDEV);
#elif EXDEV >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EXDEV ((DeeObject *)&posix_EXDEV)
PRIVATE DEFINE_INT30(posix_EXDEV, EXDEV);
#elif EXDEV >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EXDEV ((DeeObject *)&posix_EXDEV)
PRIVATE DEFINE_INT45(posix_EXDEV, EXDEV);
#elif EXDEV >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EXDEV ((DeeObject *)&posix_EXDEV)
PRIVATE DEFINE_INT60(posix_EXDEV, EXDEV);
#else
#define OBJ_posix_EXDEV ((DeeObject *)&posix_EXDEV)
PRIVATE DEFINE_INT75(posix_EXDEV, EXDEV);
#endif
#endif /* EXDEV < 0 */
#else /* EXDEV */
#define POSIX_EXDEV_DEF /* nothing */
#endif /* !EXDEV */
#ifdef ENODEV
#define POSIX_ENODEV_DEF \
	{ "ENODEV", OBJ_posix_ENODEV, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "No such device" },
#if DeeInt_IsSmallInt(ENODEV)
#define OBJ_posix_ENODEV DeeInt_ForSmallInt(ENODEV)
#elif ENODEV >= 0
#if ENODEV <= 0x7fffull /* 15-bit */
#define OBJ_posix_ENODEV ((DeeObject *)&posix_ENODEV)
PRIVATE DEFINE_UINT15(posix_ENODEV, ENODEV);
#elif ENODEV <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ENODEV ((DeeObject *)&posix_ENODEV)
PRIVATE DEFINE_UINT30(posix_ENODEV, ENODEV);
#elif ENODEV <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ENODEV ((DeeObject *)&posix_ENODEV)
PRIVATE DEFINE_UINT45(posix_ENODEV, ENODEV);
#elif ENODEV <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ENODEV ((DeeObject *)&posix_ENODEV)
PRIVATE DEFINE_UINT60(posix_ENODEV, ENODEV);
#else
#define OBJ_posix_ENODEV ((DeeObject *)&posix_ENODEV)
PRIVATE DEFINE_UINT75(posix_ENODEV, ENODEV);
#endif
#else /* ENODEV >= 0 */
#if ENODEV >= -0x4000ll /* 15-bit */
#define OBJ_posix_ENODEV ((DeeObject *)&posix_ENODEV)
PRIVATE DEFINE_INT15(posix_ENODEV, ENODEV);
#elif ENODEV >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ENODEV ((DeeObject *)&posix_ENODEV)
PRIVATE DEFINE_INT30(posix_ENODEV, ENODEV);
#elif ENODEV >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ENODEV ((DeeObject *)&posix_ENODEV)
PRIVATE DEFINE_INT45(posix_ENODEV, ENODEV);
#elif ENODEV >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ENODEV ((DeeObject *)&posix_ENODEV)
PRIVATE DEFINE_INT60(posix_ENODEV, ENODEV);
#else
#define OBJ_posix_ENODEV ((DeeObject *)&posix_ENODEV)
PRIVATE DEFINE_INT75(posix_ENODEV, ENODEV);
#endif
#endif /* ENODEV < 0 */
#else /* ENODEV */
#define POSIX_ENODEV_DEF /* nothing */
#endif /* !ENODEV */
#ifdef ENOTDIR
#define POSIX_ENOTDIR_DEF \
	{ "ENOTDIR", OBJ_posix_ENOTDIR, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Not a directory" },
#if DeeInt_IsSmallInt(ENOTDIR)
#define OBJ_posix_ENOTDIR DeeInt_ForSmallInt(ENOTDIR)
#elif ENOTDIR >= 0
#if ENOTDIR <= 0x7fffull /* 15-bit */
#define OBJ_posix_ENOTDIR ((DeeObject *)&posix_ENOTDIR)
PRIVATE DEFINE_UINT15(posix_ENOTDIR, ENOTDIR);
#elif ENOTDIR <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ENOTDIR ((DeeObject *)&posix_ENOTDIR)
PRIVATE DEFINE_UINT30(posix_ENOTDIR, ENOTDIR);
#elif ENOTDIR <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ENOTDIR ((DeeObject *)&posix_ENOTDIR)
PRIVATE DEFINE_UINT45(posix_ENOTDIR, ENOTDIR);
#elif ENOTDIR <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ENOTDIR ((DeeObject *)&posix_ENOTDIR)
PRIVATE DEFINE_UINT60(posix_ENOTDIR, ENOTDIR);
#else
#define OBJ_posix_ENOTDIR ((DeeObject *)&posix_ENOTDIR)
PRIVATE DEFINE_UINT75(posix_ENOTDIR, ENOTDIR);
#endif
#else /* ENOTDIR >= 0 */
#if ENOTDIR >= -0x4000ll /* 15-bit */
#define OBJ_posix_ENOTDIR ((DeeObject *)&posix_ENOTDIR)
PRIVATE DEFINE_INT15(posix_ENOTDIR, ENOTDIR);
#elif ENOTDIR >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ENOTDIR ((DeeObject *)&posix_ENOTDIR)
PRIVATE DEFINE_INT30(posix_ENOTDIR, ENOTDIR);
#elif ENOTDIR >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ENOTDIR ((DeeObject *)&posix_ENOTDIR)
PRIVATE DEFINE_INT45(posix_ENOTDIR, ENOTDIR);
#elif ENOTDIR >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ENOTDIR ((DeeObject *)&posix_ENOTDIR)
PRIVATE DEFINE_INT60(posix_ENOTDIR, ENOTDIR);
#else
#define OBJ_posix_ENOTDIR ((DeeObject *)&posix_ENOTDIR)
PRIVATE DEFINE_INT75(posix_ENOTDIR, ENOTDIR);
#endif
#endif /* ENOTDIR < 0 */
#else /* ENOTDIR */
#define POSIX_ENOTDIR_DEF /* nothing */
#endif /* !ENOTDIR */
#ifdef EISDIR
#define POSIX_EISDIR_DEF \
	{ "EISDIR", OBJ_posix_EISDIR, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Is a directory" },
#if DeeInt_IsSmallInt(EISDIR)
#define OBJ_posix_EISDIR DeeInt_ForSmallInt(EISDIR)
#elif EISDIR >= 0
#if EISDIR <= 0x7fffull /* 15-bit */
#define OBJ_posix_EISDIR ((DeeObject *)&posix_EISDIR)
PRIVATE DEFINE_UINT15(posix_EISDIR, EISDIR);
#elif EISDIR <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EISDIR ((DeeObject *)&posix_EISDIR)
PRIVATE DEFINE_UINT30(posix_EISDIR, EISDIR);
#elif EISDIR <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EISDIR ((DeeObject *)&posix_EISDIR)
PRIVATE DEFINE_UINT45(posix_EISDIR, EISDIR);
#elif EISDIR <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EISDIR ((DeeObject *)&posix_EISDIR)
PRIVATE DEFINE_UINT60(posix_EISDIR, EISDIR);
#else
#define OBJ_posix_EISDIR ((DeeObject *)&posix_EISDIR)
PRIVATE DEFINE_UINT75(posix_EISDIR, EISDIR);
#endif
#else /* EISDIR >= 0 */
#if EISDIR >= -0x4000ll /* 15-bit */
#define OBJ_posix_EISDIR ((DeeObject *)&posix_EISDIR)
PRIVATE DEFINE_INT15(posix_EISDIR, EISDIR);
#elif EISDIR >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EISDIR ((DeeObject *)&posix_EISDIR)
PRIVATE DEFINE_INT30(posix_EISDIR, EISDIR);
#elif EISDIR >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EISDIR ((DeeObject *)&posix_EISDIR)
PRIVATE DEFINE_INT45(posix_EISDIR, EISDIR);
#elif EISDIR >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EISDIR ((DeeObject *)&posix_EISDIR)
PRIVATE DEFINE_INT60(posix_EISDIR, EISDIR);
#else
#define OBJ_posix_EISDIR ((DeeObject *)&posix_EISDIR)
PRIVATE DEFINE_INT75(posix_EISDIR, EISDIR);
#endif
#endif /* EISDIR < 0 */
#else /* EISDIR */
#define POSIX_EISDIR_DEF /* nothing */
#endif /* !EISDIR */
#ifdef EINVAL
#define POSIX_EINVAL_DEF \
	{ "EINVAL", OBJ_posix_EINVAL, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Invalid argument" },
#if DeeInt_IsSmallInt(EINVAL)
#define OBJ_posix_EINVAL DeeInt_ForSmallInt(EINVAL)
#elif EINVAL >= 0
#if EINVAL <= 0x7fffull /* 15-bit */
#define OBJ_posix_EINVAL ((DeeObject *)&posix_EINVAL)
PRIVATE DEFINE_UINT15(posix_EINVAL, EINVAL);
#elif EINVAL <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EINVAL ((DeeObject *)&posix_EINVAL)
PRIVATE DEFINE_UINT30(posix_EINVAL, EINVAL);
#elif EINVAL <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EINVAL ((DeeObject *)&posix_EINVAL)
PRIVATE DEFINE_UINT45(posix_EINVAL, EINVAL);
#elif EINVAL <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EINVAL ((DeeObject *)&posix_EINVAL)
PRIVATE DEFINE_UINT60(posix_EINVAL, EINVAL);
#else
#define OBJ_posix_EINVAL ((DeeObject *)&posix_EINVAL)
PRIVATE DEFINE_UINT75(posix_EINVAL, EINVAL);
#endif
#else /* EINVAL >= 0 */
#if EINVAL >= -0x4000ll /* 15-bit */
#define OBJ_posix_EINVAL ((DeeObject *)&posix_EINVAL)
PRIVATE DEFINE_INT15(posix_EINVAL, EINVAL);
#elif EINVAL >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EINVAL ((DeeObject *)&posix_EINVAL)
PRIVATE DEFINE_INT30(posix_EINVAL, EINVAL);
#elif EINVAL >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EINVAL ((DeeObject *)&posix_EINVAL)
PRIVATE DEFINE_INT45(posix_EINVAL, EINVAL);
#elif EINVAL >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EINVAL ((DeeObject *)&posix_EINVAL)
PRIVATE DEFINE_INT60(posix_EINVAL, EINVAL);
#else
#define OBJ_posix_EINVAL ((DeeObject *)&posix_EINVAL)
PRIVATE DEFINE_INT75(posix_EINVAL, EINVAL);
#endif
#endif /* EINVAL < 0 */
#else /* EINVAL */
#define POSIX_EINVAL_DEF /* nothing */
#endif /* !EINVAL */
#ifdef ENFILE
#define POSIX_ENFILE_DEF \
	{ "ENFILE", OBJ_posix_ENFILE, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "File table overflow" },
#if DeeInt_IsSmallInt(ENFILE)
#define OBJ_posix_ENFILE DeeInt_ForSmallInt(ENFILE)
#elif ENFILE >= 0
#if ENFILE <= 0x7fffull /* 15-bit */
#define OBJ_posix_ENFILE ((DeeObject *)&posix_ENFILE)
PRIVATE DEFINE_UINT15(posix_ENFILE, ENFILE);
#elif ENFILE <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ENFILE ((DeeObject *)&posix_ENFILE)
PRIVATE DEFINE_UINT30(posix_ENFILE, ENFILE);
#elif ENFILE <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ENFILE ((DeeObject *)&posix_ENFILE)
PRIVATE DEFINE_UINT45(posix_ENFILE, ENFILE);
#elif ENFILE <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ENFILE ((DeeObject *)&posix_ENFILE)
PRIVATE DEFINE_UINT60(posix_ENFILE, ENFILE);
#else
#define OBJ_posix_ENFILE ((DeeObject *)&posix_ENFILE)
PRIVATE DEFINE_UINT75(posix_ENFILE, ENFILE);
#endif
#else /* ENFILE >= 0 */
#if ENFILE >= -0x4000ll /* 15-bit */
#define OBJ_posix_ENFILE ((DeeObject *)&posix_ENFILE)
PRIVATE DEFINE_INT15(posix_ENFILE, ENFILE);
#elif ENFILE >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ENFILE ((DeeObject *)&posix_ENFILE)
PRIVATE DEFINE_INT30(posix_ENFILE, ENFILE);
#elif ENFILE >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ENFILE ((DeeObject *)&posix_ENFILE)
PRIVATE DEFINE_INT45(posix_ENFILE, ENFILE);
#elif ENFILE >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ENFILE ((DeeObject *)&posix_ENFILE)
PRIVATE DEFINE_INT60(posix_ENFILE, ENFILE);
#else
#define OBJ_posix_ENFILE ((DeeObject *)&posix_ENFILE)
PRIVATE DEFINE_INT75(posix_ENFILE, ENFILE);
#endif
#endif /* ENFILE < 0 */
#else /* ENFILE */
#define POSIX_ENFILE_DEF /* nothing */
#endif /* !ENFILE */
#ifdef EMFILE
#define POSIX_EMFILE_DEF \
	{ "EMFILE", OBJ_posix_EMFILE, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Too many open files" },
#if DeeInt_IsSmallInt(EMFILE)
#define OBJ_posix_EMFILE DeeInt_ForSmallInt(EMFILE)
#elif EMFILE >= 0
#if EMFILE <= 0x7fffull /* 15-bit */
#define OBJ_posix_EMFILE ((DeeObject *)&posix_EMFILE)
PRIVATE DEFINE_UINT15(posix_EMFILE, EMFILE);
#elif EMFILE <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EMFILE ((DeeObject *)&posix_EMFILE)
PRIVATE DEFINE_UINT30(posix_EMFILE, EMFILE);
#elif EMFILE <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EMFILE ((DeeObject *)&posix_EMFILE)
PRIVATE DEFINE_UINT45(posix_EMFILE, EMFILE);
#elif EMFILE <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EMFILE ((DeeObject *)&posix_EMFILE)
PRIVATE DEFINE_UINT60(posix_EMFILE, EMFILE);
#else
#define OBJ_posix_EMFILE ((DeeObject *)&posix_EMFILE)
PRIVATE DEFINE_UINT75(posix_EMFILE, EMFILE);
#endif
#else /* EMFILE >= 0 */
#if EMFILE >= -0x4000ll /* 15-bit */
#define OBJ_posix_EMFILE ((DeeObject *)&posix_EMFILE)
PRIVATE DEFINE_INT15(posix_EMFILE, EMFILE);
#elif EMFILE >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EMFILE ((DeeObject *)&posix_EMFILE)
PRIVATE DEFINE_INT30(posix_EMFILE, EMFILE);
#elif EMFILE >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EMFILE ((DeeObject *)&posix_EMFILE)
PRIVATE DEFINE_INT45(posix_EMFILE, EMFILE);
#elif EMFILE >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EMFILE ((DeeObject *)&posix_EMFILE)
PRIVATE DEFINE_INT60(posix_EMFILE, EMFILE);
#else
#define OBJ_posix_EMFILE ((DeeObject *)&posix_EMFILE)
PRIVATE DEFINE_INT75(posix_EMFILE, EMFILE);
#endif
#endif /* EMFILE < 0 */
#else /* EMFILE */
#define POSIX_EMFILE_DEF /* nothing */
#endif /* !EMFILE */
#ifdef ENOTTY
#define POSIX_ENOTTY_DEF \
	{ "ENOTTY", OBJ_posix_ENOTTY, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Not a typewriter" },
#if DeeInt_IsSmallInt(ENOTTY)
#define OBJ_posix_ENOTTY DeeInt_ForSmallInt(ENOTTY)
#elif ENOTTY >= 0
#if ENOTTY <= 0x7fffull /* 15-bit */
#define OBJ_posix_ENOTTY ((DeeObject *)&posix_ENOTTY)
PRIVATE DEFINE_UINT15(posix_ENOTTY, ENOTTY);
#elif ENOTTY <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ENOTTY ((DeeObject *)&posix_ENOTTY)
PRIVATE DEFINE_UINT30(posix_ENOTTY, ENOTTY);
#elif ENOTTY <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ENOTTY ((DeeObject *)&posix_ENOTTY)
PRIVATE DEFINE_UINT45(posix_ENOTTY, ENOTTY);
#elif ENOTTY <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ENOTTY ((DeeObject *)&posix_ENOTTY)
PRIVATE DEFINE_UINT60(posix_ENOTTY, ENOTTY);
#else
#define OBJ_posix_ENOTTY ((DeeObject *)&posix_ENOTTY)
PRIVATE DEFINE_UINT75(posix_ENOTTY, ENOTTY);
#endif
#else /* ENOTTY >= 0 */
#if ENOTTY >= -0x4000ll /* 15-bit */
#define OBJ_posix_ENOTTY ((DeeObject *)&posix_ENOTTY)
PRIVATE DEFINE_INT15(posix_ENOTTY, ENOTTY);
#elif ENOTTY >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ENOTTY ((DeeObject *)&posix_ENOTTY)
PRIVATE DEFINE_INT30(posix_ENOTTY, ENOTTY);
#elif ENOTTY >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ENOTTY ((DeeObject *)&posix_ENOTTY)
PRIVATE DEFINE_INT45(posix_ENOTTY, ENOTTY);
#elif ENOTTY >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ENOTTY ((DeeObject *)&posix_ENOTTY)
PRIVATE DEFINE_INT60(posix_ENOTTY, ENOTTY);
#else
#define OBJ_posix_ENOTTY ((DeeObject *)&posix_ENOTTY)
PRIVATE DEFINE_INT75(posix_ENOTTY, ENOTTY);
#endif
#endif /* ENOTTY < 0 */
#else /* ENOTTY */
#define POSIX_ENOTTY_DEF /* nothing */
#endif /* !ENOTTY */
#ifdef ETXTBSY
#define POSIX_ETXTBSY_DEF \
	{ "ETXTBSY", OBJ_posix_ETXTBSY, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Text file busy" },
#if DeeInt_IsSmallInt(ETXTBSY)
#define OBJ_posix_ETXTBSY DeeInt_ForSmallInt(ETXTBSY)
#elif ETXTBSY >= 0
#if ETXTBSY <= 0x7fffull /* 15-bit */
#define OBJ_posix_ETXTBSY ((DeeObject *)&posix_ETXTBSY)
PRIVATE DEFINE_UINT15(posix_ETXTBSY, ETXTBSY);
#elif ETXTBSY <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ETXTBSY ((DeeObject *)&posix_ETXTBSY)
PRIVATE DEFINE_UINT30(posix_ETXTBSY, ETXTBSY);
#elif ETXTBSY <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ETXTBSY ((DeeObject *)&posix_ETXTBSY)
PRIVATE DEFINE_UINT45(posix_ETXTBSY, ETXTBSY);
#elif ETXTBSY <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ETXTBSY ((DeeObject *)&posix_ETXTBSY)
PRIVATE DEFINE_UINT60(posix_ETXTBSY, ETXTBSY);
#else
#define OBJ_posix_ETXTBSY ((DeeObject *)&posix_ETXTBSY)
PRIVATE DEFINE_UINT75(posix_ETXTBSY, ETXTBSY);
#endif
#else /* ETXTBSY >= 0 */
#if ETXTBSY >= -0x4000ll /* 15-bit */
#define OBJ_posix_ETXTBSY ((DeeObject *)&posix_ETXTBSY)
PRIVATE DEFINE_INT15(posix_ETXTBSY, ETXTBSY);
#elif ETXTBSY >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ETXTBSY ((DeeObject *)&posix_ETXTBSY)
PRIVATE DEFINE_INT30(posix_ETXTBSY, ETXTBSY);
#elif ETXTBSY >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ETXTBSY ((DeeObject *)&posix_ETXTBSY)
PRIVATE DEFINE_INT45(posix_ETXTBSY, ETXTBSY);
#elif ETXTBSY >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ETXTBSY ((DeeObject *)&posix_ETXTBSY)
PRIVATE DEFINE_INT60(posix_ETXTBSY, ETXTBSY);
#else
#define OBJ_posix_ETXTBSY ((DeeObject *)&posix_ETXTBSY)
PRIVATE DEFINE_INT75(posix_ETXTBSY, ETXTBSY);
#endif
#endif /* ETXTBSY < 0 */
#else /* ETXTBSY */
#define POSIX_ETXTBSY_DEF /* nothing */
#endif /* !ETXTBSY */
#ifdef EFBIG
#define POSIX_EFBIG_DEF \
	{ "EFBIG", OBJ_posix_EFBIG, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "File too large" },
#if DeeInt_IsSmallInt(EFBIG)
#define OBJ_posix_EFBIG DeeInt_ForSmallInt(EFBIG)
#elif EFBIG >= 0
#if EFBIG <= 0x7fffull /* 15-bit */
#define OBJ_posix_EFBIG ((DeeObject *)&posix_EFBIG)
PRIVATE DEFINE_UINT15(posix_EFBIG, EFBIG);
#elif EFBIG <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EFBIG ((DeeObject *)&posix_EFBIG)
PRIVATE DEFINE_UINT30(posix_EFBIG, EFBIG);
#elif EFBIG <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EFBIG ((DeeObject *)&posix_EFBIG)
PRIVATE DEFINE_UINT45(posix_EFBIG, EFBIG);
#elif EFBIG <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EFBIG ((DeeObject *)&posix_EFBIG)
PRIVATE DEFINE_UINT60(posix_EFBIG, EFBIG);
#else
#define OBJ_posix_EFBIG ((DeeObject *)&posix_EFBIG)
PRIVATE DEFINE_UINT75(posix_EFBIG, EFBIG);
#endif
#else /* EFBIG >= 0 */
#if EFBIG >= -0x4000ll /* 15-bit */
#define OBJ_posix_EFBIG ((DeeObject *)&posix_EFBIG)
PRIVATE DEFINE_INT15(posix_EFBIG, EFBIG);
#elif EFBIG >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EFBIG ((DeeObject *)&posix_EFBIG)
PRIVATE DEFINE_INT30(posix_EFBIG, EFBIG);
#elif EFBIG >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EFBIG ((DeeObject *)&posix_EFBIG)
PRIVATE DEFINE_INT45(posix_EFBIG, EFBIG);
#elif EFBIG >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EFBIG ((DeeObject *)&posix_EFBIG)
PRIVATE DEFINE_INT60(posix_EFBIG, EFBIG);
#else
#define OBJ_posix_EFBIG ((DeeObject *)&posix_EFBIG)
PRIVATE DEFINE_INT75(posix_EFBIG, EFBIG);
#endif
#endif /* EFBIG < 0 */
#else /* EFBIG */
#define POSIX_EFBIG_DEF /* nothing */
#endif /* !EFBIG */
#ifdef ENOSPC
#define POSIX_ENOSPC_DEF \
	{ "ENOSPC", OBJ_posix_ENOSPC, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "No space left on device" },
#if DeeInt_IsSmallInt(ENOSPC)
#define OBJ_posix_ENOSPC DeeInt_ForSmallInt(ENOSPC)
#elif ENOSPC >= 0
#if ENOSPC <= 0x7fffull /* 15-bit */
#define OBJ_posix_ENOSPC ((DeeObject *)&posix_ENOSPC)
PRIVATE DEFINE_UINT15(posix_ENOSPC, ENOSPC);
#elif ENOSPC <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ENOSPC ((DeeObject *)&posix_ENOSPC)
PRIVATE DEFINE_UINT30(posix_ENOSPC, ENOSPC);
#elif ENOSPC <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ENOSPC ((DeeObject *)&posix_ENOSPC)
PRIVATE DEFINE_UINT45(posix_ENOSPC, ENOSPC);
#elif ENOSPC <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ENOSPC ((DeeObject *)&posix_ENOSPC)
PRIVATE DEFINE_UINT60(posix_ENOSPC, ENOSPC);
#else
#define OBJ_posix_ENOSPC ((DeeObject *)&posix_ENOSPC)
PRIVATE DEFINE_UINT75(posix_ENOSPC, ENOSPC);
#endif
#else /* ENOSPC >= 0 */
#if ENOSPC >= -0x4000ll /* 15-bit */
#define OBJ_posix_ENOSPC ((DeeObject *)&posix_ENOSPC)
PRIVATE DEFINE_INT15(posix_ENOSPC, ENOSPC);
#elif ENOSPC >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ENOSPC ((DeeObject *)&posix_ENOSPC)
PRIVATE DEFINE_INT30(posix_ENOSPC, ENOSPC);
#elif ENOSPC >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ENOSPC ((DeeObject *)&posix_ENOSPC)
PRIVATE DEFINE_INT45(posix_ENOSPC, ENOSPC);
#elif ENOSPC >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ENOSPC ((DeeObject *)&posix_ENOSPC)
PRIVATE DEFINE_INT60(posix_ENOSPC, ENOSPC);
#else
#define OBJ_posix_ENOSPC ((DeeObject *)&posix_ENOSPC)
PRIVATE DEFINE_INT75(posix_ENOSPC, ENOSPC);
#endif
#endif /* ENOSPC < 0 */
#else /* ENOSPC */
#define POSIX_ENOSPC_DEF /* nothing */
#endif /* !ENOSPC */
#ifdef ESPIPE
#define POSIX_ESPIPE_DEF \
	{ "ESPIPE", OBJ_posix_ESPIPE, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Illegal seek" },
#if DeeInt_IsSmallInt(ESPIPE)
#define OBJ_posix_ESPIPE DeeInt_ForSmallInt(ESPIPE)
#elif ESPIPE >= 0
#if ESPIPE <= 0x7fffull /* 15-bit */
#define OBJ_posix_ESPIPE ((DeeObject *)&posix_ESPIPE)
PRIVATE DEFINE_UINT15(posix_ESPIPE, ESPIPE);
#elif ESPIPE <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ESPIPE ((DeeObject *)&posix_ESPIPE)
PRIVATE DEFINE_UINT30(posix_ESPIPE, ESPIPE);
#elif ESPIPE <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ESPIPE ((DeeObject *)&posix_ESPIPE)
PRIVATE DEFINE_UINT45(posix_ESPIPE, ESPIPE);
#elif ESPIPE <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ESPIPE ((DeeObject *)&posix_ESPIPE)
PRIVATE DEFINE_UINT60(posix_ESPIPE, ESPIPE);
#else
#define OBJ_posix_ESPIPE ((DeeObject *)&posix_ESPIPE)
PRIVATE DEFINE_UINT75(posix_ESPIPE, ESPIPE);
#endif
#else /* ESPIPE >= 0 */
#if ESPIPE >= -0x4000ll /* 15-bit */
#define OBJ_posix_ESPIPE ((DeeObject *)&posix_ESPIPE)
PRIVATE DEFINE_INT15(posix_ESPIPE, ESPIPE);
#elif ESPIPE >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ESPIPE ((DeeObject *)&posix_ESPIPE)
PRIVATE DEFINE_INT30(posix_ESPIPE, ESPIPE);
#elif ESPIPE >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ESPIPE ((DeeObject *)&posix_ESPIPE)
PRIVATE DEFINE_INT45(posix_ESPIPE, ESPIPE);
#elif ESPIPE >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ESPIPE ((DeeObject *)&posix_ESPIPE)
PRIVATE DEFINE_INT60(posix_ESPIPE, ESPIPE);
#else
#define OBJ_posix_ESPIPE ((DeeObject *)&posix_ESPIPE)
PRIVATE DEFINE_INT75(posix_ESPIPE, ESPIPE);
#endif
#endif /* ESPIPE < 0 */
#else /* ESPIPE */
#define POSIX_ESPIPE_DEF /* nothing */
#endif /* !ESPIPE */
#ifdef EROFS
#define POSIX_EROFS_DEF \
	{ "EROFS", OBJ_posix_EROFS, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Read-only file system" },
#if DeeInt_IsSmallInt(EROFS)
#define OBJ_posix_EROFS DeeInt_ForSmallInt(EROFS)
#elif EROFS >= 0
#if EROFS <= 0x7fffull /* 15-bit */
#define OBJ_posix_EROFS ((DeeObject *)&posix_EROFS)
PRIVATE DEFINE_UINT15(posix_EROFS, EROFS);
#elif EROFS <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EROFS ((DeeObject *)&posix_EROFS)
PRIVATE DEFINE_UINT30(posix_EROFS, EROFS);
#elif EROFS <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EROFS ((DeeObject *)&posix_EROFS)
PRIVATE DEFINE_UINT45(posix_EROFS, EROFS);
#elif EROFS <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EROFS ((DeeObject *)&posix_EROFS)
PRIVATE DEFINE_UINT60(posix_EROFS, EROFS);
#else
#define OBJ_posix_EROFS ((DeeObject *)&posix_EROFS)
PRIVATE DEFINE_UINT75(posix_EROFS, EROFS);
#endif
#else /* EROFS >= 0 */
#if EROFS >= -0x4000ll /* 15-bit */
#define OBJ_posix_EROFS ((DeeObject *)&posix_EROFS)
PRIVATE DEFINE_INT15(posix_EROFS, EROFS);
#elif EROFS >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EROFS ((DeeObject *)&posix_EROFS)
PRIVATE DEFINE_INT30(posix_EROFS, EROFS);
#elif EROFS >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EROFS ((DeeObject *)&posix_EROFS)
PRIVATE DEFINE_INT45(posix_EROFS, EROFS);
#elif EROFS >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EROFS ((DeeObject *)&posix_EROFS)
PRIVATE DEFINE_INT60(posix_EROFS, EROFS);
#else
#define OBJ_posix_EROFS ((DeeObject *)&posix_EROFS)
PRIVATE DEFINE_INT75(posix_EROFS, EROFS);
#endif
#endif /* EROFS < 0 */
#else /* EROFS */
#define POSIX_EROFS_DEF /* nothing */
#endif /* !EROFS */
#ifdef EMLINK
#define POSIX_EMLINK_DEF \
	{ "EMLINK", OBJ_posix_EMLINK, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Too many links" },
#if DeeInt_IsSmallInt(EMLINK)
#define OBJ_posix_EMLINK DeeInt_ForSmallInt(EMLINK)
#elif EMLINK >= 0
#if EMLINK <= 0x7fffull /* 15-bit */
#define OBJ_posix_EMLINK ((DeeObject *)&posix_EMLINK)
PRIVATE DEFINE_UINT15(posix_EMLINK, EMLINK);
#elif EMLINK <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EMLINK ((DeeObject *)&posix_EMLINK)
PRIVATE DEFINE_UINT30(posix_EMLINK, EMLINK);
#elif EMLINK <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EMLINK ((DeeObject *)&posix_EMLINK)
PRIVATE DEFINE_UINT45(posix_EMLINK, EMLINK);
#elif EMLINK <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EMLINK ((DeeObject *)&posix_EMLINK)
PRIVATE DEFINE_UINT60(posix_EMLINK, EMLINK);
#else
#define OBJ_posix_EMLINK ((DeeObject *)&posix_EMLINK)
PRIVATE DEFINE_UINT75(posix_EMLINK, EMLINK);
#endif
#else /* EMLINK >= 0 */
#if EMLINK >= -0x4000ll /* 15-bit */
#define OBJ_posix_EMLINK ((DeeObject *)&posix_EMLINK)
PRIVATE DEFINE_INT15(posix_EMLINK, EMLINK);
#elif EMLINK >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EMLINK ((DeeObject *)&posix_EMLINK)
PRIVATE DEFINE_INT30(posix_EMLINK, EMLINK);
#elif EMLINK >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EMLINK ((DeeObject *)&posix_EMLINK)
PRIVATE DEFINE_INT45(posix_EMLINK, EMLINK);
#elif EMLINK >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EMLINK ((DeeObject *)&posix_EMLINK)
PRIVATE DEFINE_INT60(posix_EMLINK, EMLINK);
#else
#define OBJ_posix_EMLINK ((DeeObject *)&posix_EMLINK)
PRIVATE DEFINE_INT75(posix_EMLINK, EMLINK);
#endif
#endif /* EMLINK < 0 */
#else /* EMLINK */
#define POSIX_EMLINK_DEF /* nothing */
#endif /* !EMLINK */
#ifdef EPIPE
#define POSIX_EPIPE_DEF \
	{ "EPIPE", OBJ_posix_EPIPE, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Broken pipe" },
#if DeeInt_IsSmallInt(EPIPE)
#define OBJ_posix_EPIPE DeeInt_ForSmallInt(EPIPE)
#elif EPIPE >= 0
#if EPIPE <= 0x7fffull /* 15-bit */
#define OBJ_posix_EPIPE ((DeeObject *)&posix_EPIPE)
PRIVATE DEFINE_UINT15(posix_EPIPE, EPIPE);
#elif EPIPE <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EPIPE ((DeeObject *)&posix_EPIPE)
PRIVATE DEFINE_UINT30(posix_EPIPE, EPIPE);
#elif EPIPE <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EPIPE ((DeeObject *)&posix_EPIPE)
PRIVATE DEFINE_UINT45(posix_EPIPE, EPIPE);
#elif EPIPE <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EPIPE ((DeeObject *)&posix_EPIPE)
PRIVATE DEFINE_UINT60(posix_EPIPE, EPIPE);
#else
#define OBJ_posix_EPIPE ((DeeObject *)&posix_EPIPE)
PRIVATE DEFINE_UINT75(posix_EPIPE, EPIPE);
#endif
#else /* EPIPE >= 0 */
#if EPIPE >= -0x4000ll /* 15-bit */
#define OBJ_posix_EPIPE ((DeeObject *)&posix_EPIPE)
PRIVATE DEFINE_INT15(posix_EPIPE, EPIPE);
#elif EPIPE >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EPIPE ((DeeObject *)&posix_EPIPE)
PRIVATE DEFINE_INT30(posix_EPIPE, EPIPE);
#elif EPIPE >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EPIPE ((DeeObject *)&posix_EPIPE)
PRIVATE DEFINE_INT45(posix_EPIPE, EPIPE);
#elif EPIPE >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EPIPE ((DeeObject *)&posix_EPIPE)
PRIVATE DEFINE_INT60(posix_EPIPE, EPIPE);
#else
#define OBJ_posix_EPIPE ((DeeObject *)&posix_EPIPE)
PRIVATE DEFINE_INT75(posix_EPIPE, EPIPE);
#endif
#endif /* EPIPE < 0 */
#else /* EPIPE */
#define POSIX_EPIPE_DEF /* nothing */
#endif /* !EPIPE */
#ifdef EDOM
#define POSIX_EDOM_DEF \
	{ "EDOM", OBJ_posix_EDOM, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Math argument out of domain of func" },
#if DeeInt_IsSmallInt(EDOM)
#define OBJ_posix_EDOM DeeInt_ForSmallInt(EDOM)
#elif EDOM >= 0
#if EDOM <= 0x7fffull /* 15-bit */
#define OBJ_posix_EDOM ((DeeObject *)&posix_EDOM)
PRIVATE DEFINE_UINT15(posix_EDOM, EDOM);
#elif EDOM <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EDOM ((DeeObject *)&posix_EDOM)
PRIVATE DEFINE_UINT30(posix_EDOM, EDOM);
#elif EDOM <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EDOM ((DeeObject *)&posix_EDOM)
PRIVATE DEFINE_UINT45(posix_EDOM, EDOM);
#elif EDOM <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EDOM ((DeeObject *)&posix_EDOM)
PRIVATE DEFINE_UINT60(posix_EDOM, EDOM);
#else
#define OBJ_posix_EDOM ((DeeObject *)&posix_EDOM)
PRIVATE DEFINE_UINT75(posix_EDOM, EDOM);
#endif
#else /* EDOM >= 0 */
#if EDOM >= -0x4000ll /* 15-bit */
#define OBJ_posix_EDOM ((DeeObject *)&posix_EDOM)
PRIVATE DEFINE_INT15(posix_EDOM, EDOM);
#elif EDOM >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EDOM ((DeeObject *)&posix_EDOM)
PRIVATE DEFINE_INT30(posix_EDOM, EDOM);
#elif EDOM >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EDOM ((DeeObject *)&posix_EDOM)
PRIVATE DEFINE_INT45(posix_EDOM, EDOM);
#elif EDOM >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EDOM ((DeeObject *)&posix_EDOM)
PRIVATE DEFINE_INT60(posix_EDOM, EDOM);
#else
#define OBJ_posix_EDOM ((DeeObject *)&posix_EDOM)
PRIVATE DEFINE_INT75(posix_EDOM, EDOM);
#endif
#endif /* EDOM < 0 */
#else /* EDOM */
#define POSIX_EDOM_DEF /* nothing */
#endif /* !EDOM */
#ifdef ERANGE
#define POSIX_ERANGE_DEF \
	{ "ERANGE", OBJ_posix_ERANGE, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Math result not representable" },
#if DeeInt_IsSmallInt(ERANGE)
#define OBJ_posix_ERANGE DeeInt_ForSmallInt(ERANGE)
#elif ERANGE >= 0
#if ERANGE <= 0x7fffull /* 15-bit */
#define OBJ_posix_ERANGE ((DeeObject *)&posix_ERANGE)
PRIVATE DEFINE_UINT15(posix_ERANGE, ERANGE);
#elif ERANGE <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ERANGE ((DeeObject *)&posix_ERANGE)
PRIVATE DEFINE_UINT30(posix_ERANGE, ERANGE);
#elif ERANGE <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ERANGE ((DeeObject *)&posix_ERANGE)
PRIVATE DEFINE_UINT45(posix_ERANGE, ERANGE);
#elif ERANGE <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ERANGE ((DeeObject *)&posix_ERANGE)
PRIVATE DEFINE_UINT60(posix_ERANGE, ERANGE);
#else
#define OBJ_posix_ERANGE ((DeeObject *)&posix_ERANGE)
PRIVATE DEFINE_UINT75(posix_ERANGE, ERANGE);
#endif
#else /* ERANGE >= 0 */
#if ERANGE >= -0x4000ll /* 15-bit */
#define OBJ_posix_ERANGE ((DeeObject *)&posix_ERANGE)
PRIVATE DEFINE_INT15(posix_ERANGE, ERANGE);
#elif ERANGE >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ERANGE ((DeeObject *)&posix_ERANGE)
PRIVATE DEFINE_INT30(posix_ERANGE, ERANGE);
#elif ERANGE >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ERANGE ((DeeObject *)&posix_ERANGE)
PRIVATE DEFINE_INT45(posix_ERANGE, ERANGE);
#elif ERANGE >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ERANGE ((DeeObject *)&posix_ERANGE)
PRIVATE DEFINE_INT60(posix_ERANGE, ERANGE);
#else
#define OBJ_posix_ERANGE ((DeeObject *)&posix_ERANGE)
PRIVATE DEFINE_INT75(posix_ERANGE, ERANGE);
#endif
#endif /* ERANGE < 0 */
#else /* ERANGE */
#define POSIX_ERANGE_DEF /* nothing */
#endif /* !ERANGE */
#ifdef EDEADLK
#define POSIX_EDEADLK_DEF \
	{ "EDEADLK", OBJ_posix_EDEADLK, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Resource deadlock would occur" },
#if DeeInt_IsSmallInt(EDEADLK)
#define OBJ_posix_EDEADLK DeeInt_ForSmallInt(EDEADLK)
#elif EDEADLK >= 0
#if EDEADLK <= 0x7fffull /* 15-bit */
#define OBJ_posix_EDEADLK ((DeeObject *)&posix_EDEADLK)
PRIVATE DEFINE_UINT15(posix_EDEADLK, EDEADLK);
#elif EDEADLK <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EDEADLK ((DeeObject *)&posix_EDEADLK)
PRIVATE DEFINE_UINT30(posix_EDEADLK, EDEADLK);
#elif EDEADLK <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EDEADLK ((DeeObject *)&posix_EDEADLK)
PRIVATE DEFINE_UINT45(posix_EDEADLK, EDEADLK);
#elif EDEADLK <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EDEADLK ((DeeObject *)&posix_EDEADLK)
PRIVATE DEFINE_UINT60(posix_EDEADLK, EDEADLK);
#else
#define OBJ_posix_EDEADLK ((DeeObject *)&posix_EDEADLK)
PRIVATE DEFINE_UINT75(posix_EDEADLK, EDEADLK);
#endif
#else /* EDEADLK >= 0 */
#if EDEADLK >= -0x4000ll /* 15-bit */
#define OBJ_posix_EDEADLK ((DeeObject *)&posix_EDEADLK)
PRIVATE DEFINE_INT15(posix_EDEADLK, EDEADLK);
#elif EDEADLK >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EDEADLK ((DeeObject *)&posix_EDEADLK)
PRIVATE DEFINE_INT30(posix_EDEADLK, EDEADLK);
#elif EDEADLK >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EDEADLK ((DeeObject *)&posix_EDEADLK)
PRIVATE DEFINE_INT45(posix_EDEADLK, EDEADLK);
#elif EDEADLK >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EDEADLK ((DeeObject *)&posix_EDEADLK)
PRIVATE DEFINE_INT60(posix_EDEADLK, EDEADLK);
#else
#define OBJ_posix_EDEADLK ((DeeObject *)&posix_EDEADLK)
PRIVATE DEFINE_INT75(posix_EDEADLK, EDEADLK);
#endif
#endif /* EDEADLK < 0 */
#else /* EDEADLK */
#define POSIX_EDEADLK_DEF /* nothing */
#endif /* !EDEADLK */
#ifdef ENAMETOOLONG
#define POSIX_ENAMETOOLONG_DEF \
	{ "ENAMETOOLONG", OBJ_posix_ENAMETOOLONG, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "File name too long" },
#if DeeInt_IsSmallInt(ENAMETOOLONG)
#define OBJ_posix_ENAMETOOLONG DeeInt_ForSmallInt(ENAMETOOLONG)
#elif ENAMETOOLONG >= 0
#if ENAMETOOLONG <= 0x7fffull /* 15-bit */
#define OBJ_posix_ENAMETOOLONG ((DeeObject *)&posix_ENAMETOOLONG)
PRIVATE DEFINE_UINT15(posix_ENAMETOOLONG, ENAMETOOLONG);
#elif ENAMETOOLONG <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ENAMETOOLONG ((DeeObject *)&posix_ENAMETOOLONG)
PRIVATE DEFINE_UINT30(posix_ENAMETOOLONG, ENAMETOOLONG);
#elif ENAMETOOLONG <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ENAMETOOLONG ((DeeObject *)&posix_ENAMETOOLONG)
PRIVATE DEFINE_UINT45(posix_ENAMETOOLONG, ENAMETOOLONG);
#elif ENAMETOOLONG <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ENAMETOOLONG ((DeeObject *)&posix_ENAMETOOLONG)
PRIVATE DEFINE_UINT60(posix_ENAMETOOLONG, ENAMETOOLONG);
#else
#define OBJ_posix_ENAMETOOLONG ((DeeObject *)&posix_ENAMETOOLONG)
PRIVATE DEFINE_UINT75(posix_ENAMETOOLONG, ENAMETOOLONG);
#endif
#else /* ENAMETOOLONG >= 0 */
#if ENAMETOOLONG >= -0x4000ll /* 15-bit */
#define OBJ_posix_ENAMETOOLONG ((DeeObject *)&posix_ENAMETOOLONG)
PRIVATE DEFINE_INT15(posix_ENAMETOOLONG, ENAMETOOLONG);
#elif ENAMETOOLONG >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ENAMETOOLONG ((DeeObject *)&posix_ENAMETOOLONG)
PRIVATE DEFINE_INT30(posix_ENAMETOOLONG, ENAMETOOLONG);
#elif ENAMETOOLONG >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ENAMETOOLONG ((DeeObject *)&posix_ENAMETOOLONG)
PRIVATE DEFINE_INT45(posix_ENAMETOOLONG, ENAMETOOLONG);
#elif ENAMETOOLONG >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ENAMETOOLONG ((DeeObject *)&posix_ENAMETOOLONG)
PRIVATE DEFINE_INT60(posix_ENAMETOOLONG, ENAMETOOLONG);
#else
#define OBJ_posix_ENAMETOOLONG ((DeeObject *)&posix_ENAMETOOLONG)
PRIVATE DEFINE_INT75(posix_ENAMETOOLONG, ENAMETOOLONG);
#endif
#endif /* ENAMETOOLONG < 0 */
#else /* ENAMETOOLONG */
#define POSIX_ENAMETOOLONG_DEF /* nothing */
#endif /* !ENAMETOOLONG */
#ifdef ENOLCK
#define POSIX_ENOLCK_DEF \
	{ "ENOLCK", OBJ_posix_ENOLCK, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "No record locks available" },
#if DeeInt_IsSmallInt(ENOLCK)
#define OBJ_posix_ENOLCK DeeInt_ForSmallInt(ENOLCK)
#elif ENOLCK >= 0
#if ENOLCK <= 0x7fffull /* 15-bit */
#define OBJ_posix_ENOLCK ((DeeObject *)&posix_ENOLCK)
PRIVATE DEFINE_UINT15(posix_ENOLCK, ENOLCK);
#elif ENOLCK <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ENOLCK ((DeeObject *)&posix_ENOLCK)
PRIVATE DEFINE_UINT30(posix_ENOLCK, ENOLCK);
#elif ENOLCK <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ENOLCK ((DeeObject *)&posix_ENOLCK)
PRIVATE DEFINE_UINT45(posix_ENOLCK, ENOLCK);
#elif ENOLCK <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ENOLCK ((DeeObject *)&posix_ENOLCK)
PRIVATE DEFINE_UINT60(posix_ENOLCK, ENOLCK);
#else
#define OBJ_posix_ENOLCK ((DeeObject *)&posix_ENOLCK)
PRIVATE DEFINE_UINT75(posix_ENOLCK, ENOLCK);
#endif
#else /* ENOLCK >= 0 */
#if ENOLCK >= -0x4000ll /* 15-bit */
#define OBJ_posix_ENOLCK ((DeeObject *)&posix_ENOLCK)
PRIVATE DEFINE_INT15(posix_ENOLCK, ENOLCK);
#elif ENOLCK >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ENOLCK ((DeeObject *)&posix_ENOLCK)
PRIVATE DEFINE_INT30(posix_ENOLCK, ENOLCK);
#elif ENOLCK >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ENOLCK ((DeeObject *)&posix_ENOLCK)
PRIVATE DEFINE_INT45(posix_ENOLCK, ENOLCK);
#elif ENOLCK >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ENOLCK ((DeeObject *)&posix_ENOLCK)
PRIVATE DEFINE_INT60(posix_ENOLCK, ENOLCK);
#else
#define OBJ_posix_ENOLCK ((DeeObject *)&posix_ENOLCK)
PRIVATE DEFINE_INT75(posix_ENOLCK, ENOLCK);
#endif
#endif /* ENOLCK < 0 */
#else /* ENOLCK */
#define POSIX_ENOLCK_DEF /* nothing */
#endif /* !ENOLCK */
#ifdef ENOSYS
#define POSIX_ENOSYS_DEF \
	{ "ENOSYS", OBJ_posix_ENOSYS, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Function not implemented" },
#if DeeInt_IsSmallInt(ENOSYS)
#define OBJ_posix_ENOSYS DeeInt_ForSmallInt(ENOSYS)
#elif ENOSYS >= 0
#if ENOSYS <= 0x7fffull /* 15-bit */
#define OBJ_posix_ENOSYS ((DeeObject *)&posix_ENOSYS)
PRIVATE DEFINE_UINT15(posix_ENOSYS, ENOSYS);
#elif ENOSYS <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ENOSYS ((DeeObject *)&posix_ENOSYS)
PRIVATE DEFINE_UINT30(posix_ENOSYS, ENOSYS);
#elif ENOSYS <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ENOSYS ((DeeObject *)&posix_ENOSYS)
PRIVATE DEFINE_UINT45(posix_ENOSYS, ENOSYS);
#elif ENOSYS <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ENOSYS ((DeeObject *)&posix_ENOSYS)
PRIVATE DEFINE_UINT60(posix_ENOSYS, ENOSYS);
#else
#define OBJ_posix_ENOSYS ((DeeObject *)&posix_ENOSYS)
PRIVATE DEFINE_UINT75(posix_ENOSYS, ENOSYS);
#endif
#else /* ENOSYS >= 0 */
#if ENOSYS >= -0x4000ll /* 15-bit */
#define OBJ_posix_ENOSYS ((DeeObject *)&posix_ENOSYS)
PRIVATE DEFINE_INT15(posix_ENOSYS, ENOSYS);
#elif ENOSYS >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ENOSYS ((DeeObject *)&posix_ENOSYS)
PRIVATE DEFINE_INT30(posix_ENOSYS, ENOSYS);
#elif ENOSYS >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ENOSYS ((DeeObject *)&posix_ENOSYS)
PRIVATE DEFINE_INT45(posix_ENOSYS, ENOSYS);
#elif ENOSYS >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ENOSYS ((DeeObject *)&posix_ENOSYS)
PRIVATE DEFINE_INT60(posix_ENOSYS, ENOSYS);
#else
#define OBJ_posix_ENOSYS ((DeeObject *)&posix_ENOSYS)
PRIVATE DEFINE_INT75(posix_ENOSYS, ENOSYS);
#endif
#endif /* ENOSYS < 0 */
#else /* ENOSYS */
#define POSIX_ENOSYS_DEF /* nothing */
#endif /* !ENOSYS */
#ifdef ENOTEMPTY
#define POSIX_ENOTEMPTY_DEF \
	{ "ENOTEMPTY", OBJ_posix_ENOTEMPTY, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Directory not empty" },
#if DeeInt_IsSmallInt(ENOTEMPTY)
#define OBJ_posix_ENOTEMPTY DeeInt_ForSmallInt(ENOTEMPTY)
#elif ENOTEMPTY >= 0
#if ENOTEMPTY <= 0x7fffull /* 15-bit */
#define OBJ_posix_ENOTEMPTY ((DeeObject *)&posix_ENOTEMPTY)
PRIVATE DEFINE_UINT15(posix_ENOTEMPTY, ENOTEMPTY);
#elif ENOTEMPTY <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ENOTEMPTY ((DeeObject *)&posix_ENOTEMPTY)
PRIVATE DEFINE_UINT30(posix_ENOTEMPTY, ENOTEMPTY);
#elif ENOTEMPTY <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ENOTEMPTY ((DeeObject *)&posix_ENOTEMPTY)
PRIVATE DEFINE_UINT45(posix_ENOTEMPTY, ENOTEMPTY);
#elif ENOTEMPTY <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ENOTEMPTY ((DeeObject *)&posix_ENOTEMPTY)
PRIVATE DEFINE_UINT60(posix_ENOTEMPTY, ENOTEMPTY);
#else
#define OBJ_posix_ENOTEMPTY ((DeeObject *)&posix_ENOTEMPTY)
PRIVATE DEFINE_UINT75(posix_ENOTEMPTY, ENOTEMPTY);
#endif
#else /* ENOTEMPTY >= 0 */
#if ENOTEMPTY >= -0x4000ll /* 15-bit */
#define OBJ_posix_ENOTEMPTY ((DeeObject *)&posix_ENOTEMPTY)
PRIVATE DEFINE_INT15(posix_ENOTEMPTY, ENOTEMPTY);
#elif ENOTEMPTY >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ENOTEMPTY ((DeeObject *)&posix_ENOTEMPTY)
PRIVATE DEFINE_INT30(posix_ENOTEMPTY, ENOTEMPTY);
#elif ENOTEMPTY >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ENOTEMPTY ((DeeObject *)&posix_ENOTEMPTY)
PRIVATE DEFINE_INT45(posix_ENOTEMPTY, ENOTEMPTY);
#elif ENOTEMPTY >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ENOTEMPTY ((DeeObject *)&posix_ENOTEMPTY)
PRIVATE DEFINE_INT60(posix_ENOTEMPTY, ENOTEMPTY);
#else
#define OBJ_posix_ENOTEMPTY ((DeeObject *)&posix_ENOTEMPTY)
PRIVATE DEFINE_INT75(posix_ENOTEMPTY, ENOTEMPTY);
#endif
#endif /* ENOTEMPTY < 0 */
#else /* ENOTEMPTY */
#define POSIX_ENOTEMPTY_DEF /* nothing */
#endif /* !ENOTEMPTY */
#ifdef ELOOP
#define POSIX_ELOOP_DEF \
	{ "ELOOP", OBJ_posix_ELOOP, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Too many symbolic links encountered" },
#if DeeInt_IsSmallInt(ELOOP)
#define OBJ_posix_ELOOP DeeInt_ForSmallInt(ELOOP)
#elif ELOOP >= 0
#if ELOOP <= 0x7fffull /* 15-bit */
#define OBJ_posix_ELOOP ((DeeObject *)&posix_ELOOP)
PRIVATE DEFINE_UINT15(posix_ELOOP, ELOOP);
#elif ELOOP <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ELOOP ((DeeObject *)&posix_ELOOP)
PRIVATE DEFINE_UINT30(posix_ELOOP, ELOOP);
#elif ELOOP <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ELOOP ((DeeObject *)&posix_ELOOP)
PRIVATE DEFINE_UINT45(posix_ELOOP, ELOOP);
#elif ELOOP <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ELOOP ((DeeObject *)&posix_ELOOP)
PRIVATE DEFINE_UINT60(posix_ELOOP, ELOOP);
#else
#define OBJ_posix_ELOOP ((DeeObject *)&posix_ELOOP)
PRIVATE DEFINE_UINT75(posix_ELOOP, ELOOP);
#endif
#else /* ELOOP >= 0 */
#if ELOOP >= -0x4000ll /* 15-bit */
#define OBJ_posix_ELOOP ((DeeObject *)&posix_ELOOP)
PRIVATE DEFINE_INT15(posix_ELOOP, ELOOP);
#elif ELOOP >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ELOOP ((DeeObject *)&posix_ELOOP)
PRIVATE DEFINE_INT30(posix_ELOOP, ELOOP);
#elif ELOOP >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ELOOP ((DeeObject *)&posix_ELOOP)
PRIVATE DEFINE_INT45(posix_ELOOP, ELOOP);
#elif ELOOP >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ELOOP ((DeeObject *)&posix_ELOOP)
PRIVATE DEFINE_INT60(posix_ELOOP, ELOOP);
#else
#define OBJ_posix_ELOOP ((DeeObject *)&posix_ELOOP)
PRIVATE DEFINE_INT75(posix_ELOOP, ELOOP);
#endif
#endif /* ELOOP < 0 */
#else /* ELOOP */
#define POSIX_ELOOP_DEF /* nothing */
#endif /* !ELOOP */
#ifdef EWOULDBLOCK
#define POSIX_EWOULDBLOCK_DEF \
	{ "EWOULDBLOCK", OBJ_posix_EWOULDBLOCK, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Operation would block" },
#if DeeInt_IsSmallInt(EWOULDBLOCK)
#define OBJ_posix_EWOULDBLOCK DeeInt_ForSmallInt(EWOULDBLOCK)
#elif EWOULDBLOCK >= 0
#if EWOULDBLOCK <= 0x7fffull /* 15-bit */
#define OBJ_posix_EWOULDBLOCK ((DeeObject *)&posix_EWOULDBLOCK)
PRIVATE DEFINE_UINT15(posix_EWOULDBLOCK, EWOULDBLOCK);
#elif EWOULDBLOCK <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EWOULDBLOCK ((DeeObject *)&posix_EWOULDBLOCK)
PRIVATE DEFINE_UINT30(posix_EWOULDBLOCK, EWOULDBLOCK);
#elif EWOULDBLOCK <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EWOULDBLOCK ((DeeObject *)&posix_EWOULDBLOCK)
PRIVATE DEFINE_UINT45(posix_EWOULDBLOCK, EWOULDBLOCK);
#elif EWOULDBLOCK <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EWOULDBLOCK ((DeeObject *)&posix_EWOULDBLOCK)
PRIVATE DEFINE_UINT60(posix_EWOULDBLOCK, EWOULDBLOCK);
#else
#define OBJ_posix_EWOULDBLOCK ((DeeObject *)&posix_EWOULDBLOCK)
PRIVATE DEFINE_UINT75(posix_EWOULDBLOCK, EWOULDBLOCK);
#endif
#else /* EWOULDBLOCK >= 0 */
#if EWOULDBLOCK >= -0x4000ll /* 15-bit */
#define OBJ_posix_EWOULDBLOCK ((DeeObject *)&posix_EWOULDBLOCK)
PRIVATE DEFINE_INT15(posix_EWOULDBLOCK, EWOULDBLOCK);
#elif EWOULDBLOCK >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EWOULDBLOCK ((DeeObject *)&posix_EWOULDBLOCK)
PRIVATE DEFINE_INT30(posix_EWOULDBLOCK, EWOULDBLOCK);
#elif EWOULDBLOCK >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EWOULDBLOCK ((DeeObject *)&posix_EWOULDBLOCK)
PRIVATE DEFINE_INT45(posix_EWOULDBLOCK, EWOULDBLOCK);
#elif EWOULDBLOCK >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EWOULDBLOCK ((DeeObject *)&posix_EWOULDBLOCK)
PRIVATE DEFINE_INT60(posix_EWOULDBLOCK, EWOULDBLOCK);
#else
#define OBJ_posix_EWOULDBLOCK ((DeeObject *)&posix_EWOULDBLOCK)
PRIVATE DEFINE_INT75(posix_EWOULDBLOCK, EWOULDBLOCK);
#endif
#endif /* EWOULDBLOCK < 0 */
#else /* EWOULDBLOCK */
#define POSIX_EWOULDBLOCK_DEF /* nothing */
#endif /* !EWOULDBLOCK */
#ifdef ENOMSG
#define POSIX_ENOMSG_DEF \
	{ "ENOMSG", OBJ_posix_ENOMSG, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "No message of desired type" },
#if DeeInt_IsSmallInt(ENOMSG)
#define OBJ_posix_ENOMSG DeeInt_ForSmallInt(ENOMSG)
#elif ENOMSG >= 0
#if ENOMSG <= 0x7fffull /* 15-bit */
#define OBJ_posix_ENOMSG ((DeeObject *)&posix_ENOMSG)
PRIVATE DEFINE_UINT15(posix_ENOMSG, ENOMSG);
#elif ENOMSG <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ENOMSG ((DeeObject *)&posix_ENOMSG)
PRIVATE DEFINE_UINT30(posix_ENOMSG, ENOMSG);
#elif ENOMSG <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ENOMSG ((DeeObject *)&posix_ENOMSG)
PRIVATE DEFINE_UINT45(posix_ENOMSG, ENOMSG);
#elif ENOMSG <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ENOMSG ((DeeObject *)&posix_ENOMSG)
PRIVATE DEFINE_UINT60(posix_ENOMSG, ENOMSG);
#else
#define OBJ_posix_ENOMSG ((DeeObject *)&posix_ENOMSG)
PRIVATE DEFINE_UINT75(posix_ENOMSG, ENOMSG);
#endif
#else /* ENOMSG >= 0 */
#if ENOMSG >= -0x4000ll /* 15-bit */
#define OBJ_posix_ENOMSG ((DeeObject *)&posix_ENOMSG)
PRIVATE DEFINE_INT15(posix_ENOMSG, ENOMSG);
#elif ENOMSG >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ENOMSG ((DeeObject *)&posix_ENOMSG)
PRIVATE DEFINE_INT30(posix_ENOMSG, ENOMSG);
#elif ENOMSG >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ENOMSG ((DeeObject *)&posix_ENOMSG)
PRIVATE DEFINE_INT45(posix_ENOMSG, ENOMSG);
#elif ENOMSG >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ENOMSG ((DeeObject *)&posix_ENOMSG)
PRIVATE DEFINE_INT60(posix_ENOMSG, ENOMSG);
#else
#define OBJ_posix_ENOMSG ((DeeObject *)&posix_ENOMSG)
PRIVATE DEFINE_INT75(posix_ENOMSG, ENOMSG);
#endif
#endif /* ENOMSG < 0 */
#else /* ENOMSG */
#define POSIX_ENOMSG_DEF /* nothing */
#endif /* !ENOMSG */
#ifdef EIDRM
#define POSIX_EIDRM_DEF \
	{ "EIDRM", OBJ_posix_EIDRM, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Identifier removed" },
#if DeeInt_IsSmallInt(EIDRM)
#define OBJ_posix_EIDRM DeeInt_ForSmallInt(EIDRM)
#elif EIDRM >= 0
#if EIDRM <= 0x7fffull /* 15-bit */
#define OBJ_posix_EIDRM ((DeeObject *)&posix_EIDRM)
PRIVATE DEFINE_UINT15(posix_EIDRM, EIDRM);
#elif EIDRM <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EIDRM ((DeeObject *)&posix_EIDRM)
PRIVATE DEFINE_UINT30(posix_EIDRM, EIDRM);
#elif EIDRM <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EIDRM ((DeeObject *)&posix_EIDRM)
PRIVATE DEFINE_UINT45(posix_EIDRM, EIDRM);
#elif EIDRM <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EIDRM ((DeeObject *)&posix_EIDRM)
PRIVATE DEFINE_UINT60(posix_EIDRM, EIDRM);
#else
#define OBJ_posix_EIDRM ((DeeObject *)&posix_EIDRM)
PRIVATE DEFINE_UINT75(posix_EIDRM, EIDRM);
#endif
#else /* EIDRM >= 0 */
#if EIDRM >= -0x4000ll /* 15-bit */
#define OBJ_posix_EIDRM ((DeeObject *)&posix_EIDRM)
PRIVATE DEFINE_INT15(posix_EIDRM, EIDRM);
#elif EIDRM >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EIDRM ((DeeObject *)&posix_EIDRM)
PRIVATE DEFINE_INT30(posix_EIDRM, EIDRM);
#elif EIDRM >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EIDRM ((DeeObject *)&posix_EIDRM)
PRIVATE DEFINE_INT45(posix_EIDRM, EIDRM);
#elif EIDRM >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EIDRM ((DeeObject *)&posix_EIDRM)
PRIVATE DEFINE_INT60(posix_EIDRM, EIDRM);
#else
#define OBJ_posix_EIDRM ((DeeObject *)&posix_EIDRM)
PRIVATE DEFINE_INT75(posix_EIDRM, EIDRM);
#endif
#endif /* EIDRM < 0 */
#else /* EIDRM */
#define POSIX_EIDRM_DEF /* nothing */
#endif /* !EIDRM */
#ifdef ECHRNG
#define POSIX_ECHRNG_DEF \
	{ "ECHRNG", OBJ_posix_ECHRNG, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Channel number out of range" },
#if DeeInt_IsSmallInt(ECHRNG)
#define OBJ_posix_ECHRNG DeeInt_ForSmallInt(ECHRNG)
#elif ECHRNG >= 0
#if ECHRNG <= 0x7fffull /* 15-bit */
#define OBJ_posix_ECHRNG ((DeeObject *)&posix_ECHRNG)
PRIVATE DEFINE_UINT15(posix_ECHRNG, ECHRNG);
#elif ECHRNG <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ECHRNG ((DeeObject *)&posix_ECHRNG)
PRIVATE DEFINE_UINT30(posix_ECHRNG, ECHRNG);
#elif ECHRNG <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ECHRNG ((DeeObject *)&posix_ECHRNG)
PRIVATE DEFINE_UINT45(posix_ECHRNG, ECHRNG);
#elif ECHRNG <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ECHRNG ((DeeObject *)&posix_ECHRNG)
PRIVATE DEFINE_UINT60(posix_ECHRNG, ECHRNG);
#else
#define OBJ_posix_ECHRNG ((DeeObject *)&posix_ECHRNG)
PRIVATE DEFINE_UINT75(posix_ECHRNG, ECHRNG);
#endif
#else /* ECHRNG >= 0 */
#if ECHRNG >= -0x4000ll /* 15-bit */
#define OBJ_posix_ECHRNG ((DeeObject *)&posix_ECHRNG)
PRIVATE DEFINE_INT15(posix_ECHRNG, ECHRNG);
#elif ECHRNG >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ECHRNG ((DeeObject *)&posix_ECHRNG)
PRIVATE DEFINE_INT30(posix_ECHRNG, ECHRNG);
#elif ECHRNG >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ECHRNG ((DeeObject *)&posix_ECHRNG)
PRIVATE DEFINE_INT45(posix_ECHRNG, ECHRNG);
#elif ECHRNG >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ECHRNG ((DeeObject *)&posix_ECHRNG)
PRIVATE DEFINE_INT60(posix_ECHRNG, ECHRNG);
#else
#define OBJ_posix_ECHRNG ((DeeObject *)&posix_ECHRNG)
PRIVATE DEFINE_INT75(posix_ECHRNG, ECHRNG);
#endif
#endif /* ECHRNG < 0 */
#else /* ECHRNG */
#define POSIX_ECHRNG_DEF /* nothing */
#endif /* !ECHRNG */
#ifdef EL2NSYNC
#define POSIX_EL2NSYNC_DEF \
	{ "EL2NSYNC", OBJ_posix_EL2NSYNC, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Level 2 not synchronized" },
#if DeeInt_IsSmallInt(EL2NSYNC)
#define OBJ_posix_EL2NSYNC DeeInt_ForSmallInt(EL2NSYNC)
#elif EL2NSYNC >= 0
#if EL2NSYNC <= 0x7fffull /* 15-bit */
#define OBJ_posix_EL2NSYNC ((DeeObject *)&posix_EL2NSYNC)
PRIVATE DEFINE_UINT15(posix_EL2NSYNC, EL2NSYNC);
#elif EL2NSYNC <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EL2NSYNC ((DeeObject *)&posix_EL2NSYNC)
PRIVATE DEFINE_UINT30(posix_EL2NSYNC, EL2NSYNC);
#elif EL2NSYNC <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EL2NSYNC ((DeeObject *)&posix_EL2NSYNC)
PRIVATE DEFINE_UINT45(posix_EL2NSYNC, EL2NSYNC);
#elif EL2NSYNC <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EL2NSYNC ((DeeObject *)&posix_EL2NSYNC)
PRIVATE DEFINE_UINT60(posix_EL2NSYNC, EL2NSYNC);
#else
#define OBJ_posix_EL2NSYNC ((DeeObject *)&posix_EL2NSYNC)
PRIVATE DEFINE_UINT75(posix_EL2NSYNC, EL2NSYNC);
#endif
#else /* EL2NSYNC >= 0 */
#if EL2NSYNC >= -0x4000ll /* 15-bit */
#define OBJ_posix_EL2NSYNC ((DeeObject *)&posix_EL2NSYNC)
PRIVATE DEFINE_INT15(posix_EL2NSYNC, EL2NSYNC);
#elif EL2NSYNC >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EL2NSYNC ((DeeObject *)&posix_EL2NSYNC)
PRIVATE DEFINE_INT30(posix_EL2NSYNC, EL2NSYNC);
#elif EL2NSYNC >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EL2NSYNC ((DeeObject *)&posix_EL2NSYNC)
PRIVATE DEFINE_INT45(posix_EL2NSYNC, EL2NSYNC);
#elif EL2NSYNC >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EL2NSYNC ((DeeObject *)&posix_EL2NSYNC)
PRIVATE DEFINE_INT60(posix_EL2NSYNC, EL2NSYNC);
#else
#define OBJ_posix_EL2NSYNC ((DeeObject *)&posix_EL2NSYNC)
PRIVATE DEFINE_INT75(posix_EL2NSYNC, EL2NSYNC);
#endif
#endif /* EL2NSYNC < 0 */
#else /* EL2NSYNC */
#define POSIX_EL2NSYNC_DEF /* nothing */
#endif /* !EL2NSYNC */
#ifdef EL3HLT
#define POSIX_EL3HLT_DEF \
	{ "EL3HLT", OBJ_posix_EL3HLT, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Level 3 halted" },
#if DeeInt_IsSmallInt(EL3HLT)
#define OBJ_posix_EL3HLT DeeInt_ForSmallInt(EL3HLT)
#elif EL3HLT >= 0
#if EL3HLT <= 0x7fffull /* 15-bit */
#define OBJ_posix_EL3HLT ((DeeObject *)&posix_EL3HLT)
PRIVATE DEFINE_UINT15(posix_EL3HLT, EL3HLT);
#elif EL3HLT <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EL3HLT ((DeeObject *)&posix_EL3HLT)
PRIVATE DEFINE_UINT30(posix_EL3HLT, EL3HLT);
#elif EL3HLT <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EL3HLT ((DeeObject *)&posix_EL3HLT)
PRIVATE DEFINE_UINT45(posix_EL3HLT, EL3HLT);
#elif EL3HLT <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EL3HLT ((DeeObject *)&posix_EL3HLT)
PRIVATE DEFINE_UINT60(posix_EL3HLT, EL3HLT);
#else
#define OBJ_posix_EL3HLT ((DeeObject *)&posix_EL3HLT)
PRIVATE DEFINE_UINT75(posix_EL3HLT, EL3HLT);
#endif
#else /* EL3HLT >= 0 */
#if EL3HLT >= -0x4000ll /* 15-bit */
#define OBJ_posix_EL3HLT ((DeeObject *)&posix_EL3HLT)
PRIVATE DEFINE_INT15(posix_EL3HLT, EL3HLT);
#elif EL3HLT >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EL3HLT ((DeeObject *)&posix_EL3HLT)
PRIVATE DEFINE_INT30(posix_EL3HLT, EL3HLT);
#elif EL3HLT >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EL3HLT ((DeeObject *)&posix_EL3HLT)
PRIVATE DEFINE_INT45(posix_EL3HLT, EL3HLT);
#elif EL3HLT >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EL3HLT ((DeeObject *)&posix_EL3HLT)
PRIVATE DEFINE_INT60(posix_EL3HLT, EL3HLT);
#else
#define OBJ_posix_EL3HLT ((DeeObject *)&posix_EL3HLT)
PRIVATE DEFINE_INT75(posix_EL3HLT, EL3HLT);
#endif
#endif /* EL3HLT < 0 */
#else /* EL3HLT */
#define POSIX_EL3HLT_DEF /* nothing */
#endif /* !EL3HLT */
#ifdef EL3RST
#define POSIX_EL3RST_DEF \
	{ "EL3RST", OBJ_posix_EL3RST, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Level 3 reset" },
#if DeeInt_IsSmallInt(EL3RST)
#define OBJ_posix_EL3RST DeeInt_ForSmallInt(EL3RST)
#elif EL3RST >= 0
#if EL3RST <= 0x7fffull /* 15-bit */
#define OBJ_posix_EL3RST ((DeeObject *)&posix_EL3RST)
PRIVATE DEFINE_UINT15(posix_EL3RST, EL3RST);
#elif EL3RST <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EL3RST ((DeeObject *)&posix_EL3RST)
PRIVATE DEFINE_UINT30(posix_EL3RST, EL3RST);
#elif EL3RST <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EL3RST ((DeeObject *)&posix_EL3RST)
PRIVATE DEFINE_UINT45(posix_EL3RST, EL3RST);
#elif EL3RST <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EL3RST ((DeeObject *)&posix_EL3RST)
PRIVATE DEFINE_UINT60(posix_EL3RST, EL3RST);
#else
#define OBJ_posix_EL3RST ((DeeObject *)&posix_EL3RST)
PRIVATE DEFINE_UINT75(posix_EL3RST, EL3RST);
#endif
#else /* EL3RST >= 0 */
#if EL3RST >= -0x4000ll /* 15-bit */
#define OBJ_posix_EL3RST ((DeeObject *)&posix_EL3RST)
PRIVATE DEFINE_INT15(posix_EL3RST, EL3RST);
#elif EL3RST >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EL3RST ((DeeObject *)&posix_EL3RST)
PRIVATE DEFINE_INT30(posix_EL3RST, EL3RST);
#elif EL3RST >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EL3RST ((DeeObject *)&posix_EL3RST)
PRIVATE DEFINE_INT45(posix_EL3RST, EL3RST);
#elif EL3RST >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EL3RST ((DeeObject *)&posix_EL3RST)
PRIVATE DEFINE_INT60(posix_EL3RST, EL3RST);
#else
#define OBJ_posix_EL3RST ((DeeObject *)&posix_EL3RST)
PRIVATE DEFINE_INT75(posix_EL3RST, EL3RST);
#endif
#endif /* EL3RST < 0 */
#else /* EL3RST */
#define POSIX_EL3RST_DEF /* nothing */
#endif /* !EL3RST */
#ifdef ELNRNG
#define POSIX_ELNRNG_DEF \
	{ "ELNRNG", OBJ_posix_ELNRNG, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Link number out of range" },
#if DeeInt_IsSmallInt(ELNRNG)
#define OBJ_posix_ELNRNG DeeInt_ForSmallInt(ELNRNG)
#elif ELNRNG >= 0
#if ELNRNG <= 0x7fffull /* 15-bit */
#define OBJ_posix_ELNRNG ((DeeObject *)&posix_ELNRNG)
PRIVATE DEFINE_UINT15(posix_ELNRNG, ELNRNG);
#elif ELNRNG <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ELNRNG ((DeeObject *)&posix_ELNRNG)
PRIVATE DEFINE_UINT30(posix_ELNRNG, ELNRNG);
#elif ELNRNG <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ELNRNG ((DeeObject *)&posix_ELNRNG)
PRIVATE DEFINE_UINT45(posix_ELNRNG, ELNRNG);
#elif ELNRNG <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ELNRNG ((DeeObject *)&posix_ELNRNG)
PRIVATE DEFINE_UINT60(posix_ELNRNG, ELNRNG);
#else
#define OBJ_posix_ELNRNG ((DeeObject *)&posix_ELNRNG)
PRIVATE DEFINE_UINT75(posix_ELNRNG, ELNRNG);
#endif
#else /* ELNRNG >= 0 */
#if ELNRNG >= -0x4000ll /* 15-bit */
#define OBJ_posix_ELNRNG ((DeeObject *)&posix_ELNRNG)
PRIVATE DEFINE_INT15(posix_ELNRNG, ELNRNG);
#elif ELNRNG >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ELNRNG ((DeeObject *)&posix_ELNRNG)
PRIVATE DEFINE_INT30(posix_ELNRNG, ELNRNG);
#elif ELNRNG >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ELNRNG ((DeeObject *)&posix_ELNRNG)
PRIVATE DEFINE_INT45(posix_ELNRNG, ELNRNG);
#elif ELNRNG >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ELNRNG ((DeeObject *)&posix_ELNRNG)
PRIVATE DEFINE_INT60(posix_ELNRNG, ELNRNG);
#else
#define OBJ_posix_ELNRNG ((DeeObject *)&posix_ELNRNG)
PRIVATE DEFINE_INT75(posix_ELNRNG, ELNRNG);
#endif
#endif /* ELNRNG < 0 */
#else /* ELNRNG */
#define POSIX_ELNRNG_DEF /* nothing */
#endif /* !ELNRNG */
#ifdef EUNATCH
#define POSIX_EUNATCH_DEF \
	{ "EUNATCH", OBJ_posix_EUNATCH, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Protocol driver not attached" },
#if DeeInt_IsSmallInt(EUNATCH)
#define OBJ_posix_EUNATCH DeeInt_ForSmallInt(EUNATCH)
#elif EUNATCH >= 0
#if EUNATCH <= 0x7fffull /* 15-bit */
#define OBJ_posix_EUNATCH ((DeeObject *)&posix_EUNATCH)
PRIVATE DEFINE_UINT15(posix_EUNATCH, EUNATCH);
#elif EUNATCH <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EUNATCH ((DeeObject *)&posix_EUNATCH)
PRIVATE DEFINE_UINT30(posix_EUNATCH, EUNATCH);
#elif EUNATCH <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EUNATCH ((DeeObject *)&posix_EUNATCH)
PRIVATE DEFINE_UINT45(posix_EUNATCH, EUNATCH);
#elif EUNATCH <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EUNATCH ((DeeObject *)&posix_EUNATCH)
PRIVATE DEFINE_UINT60(posix_EUNATCH, EUNATCH);
#else
#define OBJ_posix_EUNATCH ((DeeObject *)&posix_EUNATCH)
PRIVATE DEFINE_UINT75(posix_EUNATCH, EUNATCH);
#endif
#else /* EUNATCH >= 0 */
#if EUNATCH >= -0x4000ll /* 15-bit */
#define OBJ_posix_EUNATCH ((DeeObject *)&posix_EUNATCH)
PRIVATE DEFINE_INT15(posix_EUNATCH, EUNATCH);
#elif EUNATCH >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EUNATCH ((DeeObject *)&posix_EUNATCH)
PRIVATE DEFINE_INT30(posix_EUNATCH, EUNATCH);
#elif EUNATCH >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EUNATCH ((DeeObject *)&posix_EUNATCH)
PRIVATE DEFINE_INT45(posix_EUNATCH, EUNATCH);
#elif EUNATCH >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EUNATCH ((DeeObject *)&posix_EUNATCH)
PRIVATE DEFINE_INT60(posix_EUNATCH, EUNATCH);
#else
#define OBJ_posix_EUNATCH ((DeeObject *)&posix_EUNATCH)
PRIVATE DEFINE_INT75(posix_EUNATCH, EUNATCH);
#endif
#endif /* EUNATCH < 0 */
#else /* EUNATCH */
#define POSIX_EUNATCH_DEF /* nothing */
#endif /* !EUNATCH */
#ifdef ENOCSI
#define POSIX_ENOCSI_DEF \
	{ "ENOCSI", OBJ_posix_ENOCSI, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "No CSI structure available" },
#if DeeInt_IsSmallInt(ENOCSI)
#define OBJ_posix_ENOCSI DeeInt_ForSmallInt(ENOCSI)
#elif ENOCSI >= 0
#if ENOCSI <= 0x7fffull /* 15-bit */
#define OBJ_posix_ENOCSI ((DeeObject *)&posix_ENOCSI)
PRIVATE DEFINE_UINT15(posix_ENOCSI, ENOCSI);
#elif ENOCSI <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ENOCSI ((DeeObject *)&posix_ENOCSI)
PRIVATE DEFINE_UINT30(posix_ENOCSI, ENOCSI);
#elif ENOCSI <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ENOCSI ((DeeObject *)&posix_ENOCSI)
PRIVATE DEFINE_UINT45(posix_ENOCSI, ENOCSI);
#elif ENOCSI <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ENOCSI ((DeeObject *)&posix_ENOCSI)
PRIVATE DEFINE_UINT60(posix_ENOCSI, ENOCSI);
#else
#define OBJ_posix_ENOCSI ((DeeObject *)&posix_ENOCSI)
PRIVATE DEFINE_UINT75(posix_ENOCSI, ENOCSI);
#endif
#else /* ENOCSI >= 0 */
#if ENOCSI >= -0x4000ll /* 15-bit */
#define OBJ_posix_ENOCSI ((DeeObject *)&posix_ENOCSI)
PRIVATE DEFINE_INT15(posix_ENOCSI, ENOCSI);
#elif ENOCSI >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ENOCSI ((DeeObject *)&posix_ENOCSI)
PRIVATE DEFINE_INT30(posix_ENOCSI, ENOCSI);
#elif ENOCSI >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ENOCSI ((DeeObject *)&posix_ENOCSI)
PRIVATE DEFINE_INT45(posix_ENOCSI, ENOCSI);
#elif ENOCSI >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ENOCSI ((DeeObject *)&posix_ENOCSI)
PRIVATE DEFINE_INT60(posix_ENOCSI, ENOCSI);
#else
#define OBJ_posix_ENOCSI ((DeeObject *)&posix_ENOCSI)
PRIVATE DEFINE_INT75(posix_ENOCSI, ENOCSI);
#endif
#endif /* ENOCSI < 0 */
#else /* ENOCSI */
#define POSIX_ENOCSI_DEF /* nothing */
#endif /* !ENOCSI */
#ifdef EL2HLT
#define POSIX_EL2HLT_DEF \
	{ "EL2HLT", OBJ_posix_EL2HLT, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Level 2 halted" },
#if DeeInt_IsSmallInt(EL2HLT)
#define OBJ_posix_EL2HLT DeeInt_ForSmallInt(EL2HLT)
#elif EL2HLT >= 0
#if EL2HLT <= 0x7fffull /* 15-bit */
#define OBJ_posix_EL2HLT ((DeeObject *)&posix_EL2HLT)
PRIVATE DEFINE_UINT15(posix_EL2HLT, EL2HLT);
#elif EL2HLT <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EL2HLT ((DeeObject *)&posix_EL2HLT)
PRIVATE DEFINE_UINT30(posix_EL2HLT, EL2HLT);
#elif EL2HLT <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EL2HLT ((DeeObject *)&posix_EL2HLT)
PRIVATE DEFINE_UINT45(posix_EL2HLT, EL2HLT);
#elif EL2HLT <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EL2HLT ((DeeObject *)&posix_EL2HLT)
PRIVATE DEFINE_UINT60(posix_EL2HLT, EL2HLT);
#else
#define OBJ_posix_EL2HLT ((DeeObject *)&posix_EL2HLT)
PRIVATE DEFINE_UINT75(posix_EL2HLT, EL2HLT);
#endif
#else /* EL2HLT >= 0 */
#if EL2HLT >= -0x4000ll /* 15-bit */
#define OBJ_posix_EL2HLT ((DeeObject *)&posix_EL2HLT)
PRIVATE DEFINE_INT15(posix_EL2HLT, EL2HLT);
#elif EL2HLT >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EL2HLT ((DeeObject *)&posix_EL2HLT)
PRIVATE DEFINE_INT30(posix_EL2HLT, EL2HLT);
#elif EL2HLT >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EL2HLT ((DeeObject *)&posix_EL2HLT)
PRIVATE DEFINE_INT45(posix_EL2HLT, EL2HLT);
#elif EL2HLT >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EL2HLT ((DeeObject *)&posix_EL2HLT)
PRIVATE DEFINE_INT60(posix_EL2HLT, EL2HLT);
#else
#define OBJ_posix_EL2HLT ((DeeObject *)&posix_EL2HLT)
PRIVATE DEFINE_INT75(posix_EL2HLT, EL2HLT);
#endif
#endif /* EL2HLT < 0 */
#else /* EL2HLT */
#define POSIX_EL2HLT_DEF /* nothing */
#endif /* !EL2HLT */
#ifdef EBADE
#define POSIX_EBADE_DEF \
	{ "EBADE", OBJ_posix_EBADE, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Invalid exchange" },
#if DeeInt_IsSmallInt(EBADE)
#define OBJ_posix_EBADE DeeInt_ForSmallInt(EBADE)
#elif EBADE >= 0
#if EBADE <= 0x7fffull /* 15-bit */
#define OBJ_posix_EBADE ((DeeObject *)&posix_EBADE)
PRIVATE DEFINE_UINT15(posix_EBADE, EBADE);
#elif EBADE <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EBADE ((DeeObject *)&posix_EBADE)
PRIVATE DEFINE_UINT30(posix_EBADE, EBADE);
#elif EBADE <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EBADE ((DeeObject *)&posix_EBADE)
PRIVATE DEFINE_UINT45(posix_EBADE, EBADE);
#elif EBADE <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EBADE ((DeeObject *)&posix_EBADE)
PRIVATE DEFINE_UINT60(posix_EBADE, EBADE);
#else
#define OBJ_posix_EBADE ((DeeObject *)&posix_EBADE)
PRIVATE DEFINE_UINT75(posix_EBADE, EBADE);
#endif
#else /* EBADE >= 0 */
#if EBADE >= -0x4000ll /* 15-bit */
#define OBJ_posix_EBADE ((DeeObject *)&posix_EBADE)
PRIVATE DEFINE_INT15(posix_EBADE, EBADE);
#elif EBADE >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EBADE ((DeeObject *)&posix_EBADE)
PRIVATE DEFINE_INT30(posix_EBADE, EBADE);
#elif EBADE >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EBADE ((DeeObject *)&posix_EBADE)
PRIVATE DEFINE_INT45(posix_EBADE, EBADE);
#elif EBADE >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EBADE ((DeeObject *)&posix_EBADE)
PRIVATE DEFINE_INT60(posix_EBADE, EBADE);
#else
#define OBJ_posix_EBADE ((DeeObject *)&posix_EBADE)
PRIVATE DEFINE_INT75(posix_EBADE, EBADE);
#endif
#endif /* EBADE < 0 */
#else /* EBADE */
#define POSIX_EBADE_DEF /* nothing */
#endif /* !EBADE */
#ifdef EBADR
#define POSIX_EBADR_DEF \
	{ "EBADR", OBJ_posix_EBADR, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Invalid request descriptor" },
#if DeeInt_IsSmallInt(EBADR)
#define OBJ_posix_EBADR DeeInt_ForSmallInt(EBADR)
#elif EBADR >= 0
#if EBADR <= 0x7fffull /* 15-bit */
#define OBJ_posix_EBADR ((DeeObject *)&posix_EBADR)
PRIVATE DEFINE_UINT15(posix_EBADR, EBADR);
#elif EBADR <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EBADR ((DeeObject *)&posix_EBADR)
PRIVATE DEFINE_UINT30(posix_EBADR, EBADR);
#elif EBADR <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EBADR ((DeeObject *)&posix_EBADR)
PRIVATE DEFINE_UINT45(posix_EBADR, EBADR);
#elif EBADR <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EBADR ((DeeObject *)&posix_EBADR)
PRIVATE DEFINE_UINT60(posix_EBADR, EBADR);
#else
#define OBJ_posix_EBADR ((DeeObject *)&posix_EBADR)
PRIVATE DEFINE_UINT75(posix_EBADR, EBADR);
#endif
#else /* EBADR >= 0 */
#if EBADR >= -0x4000ll /* 15-bit */
#define OBJ_posix_EBADR ((DeeObject *)&posix_EBADR)
PRIVATE DEFINE_INT15(posix_EBADR, EBADR);
#elif EBADR >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EBADR ((DeeObject *)&posix_EBADR)
PRIVATE DEFINE_INT30(posix_EBADR, EBADR);
#elif EBADR >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EBADR ((DeeObject *)&posix_EBADR)
PRIVATE DEFINE_INT45(posix_EBADR, EBADR);
#elif EBADR >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EBADR ((DeeObject *)&posix_EBADR)
PRIVATE DEFINE_INT60(posix_EBADR, EBADR);
#else
#define OBJ_posix_EBADR ((DeeObject *)&posix_EBADR)
PRIVATE DEFINE_INT75(posix_EBADR, EBADR);
#endif
#endif /* EBADR < 0 */
#else /* EBADR */
#define POSIX_EBADR_DEF /* nothing */
#endif /* !EBADR */
#ifdef EXFULL
#define POSIX_EXFULL_DEF \
	{ "EXFULL", OBJ_posix_EXFULL, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Exchange full" },
#if DeeInt_IsSmallInt(EXFULL)
#define OBJ_posix_EXFULL DeeInt_ForSmallInt(EXFULL)
#elif EXFULL >= 0
#if EXFULL <= 0x7fffull /* 15-bit */
#define OBJ_posix_EXFULL ((DeeObject *)&posix_EXFULL)
PRIVATE DEFINE_UINT15(posix_EXFULL, EXFULL);
#elif EXFULL <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EXFULL ((DeeObject *)&posix_EXFULL)
PRIVATE DEFINE_UINT30(posix_EXFULL, EXFULL);
#elif EXFULL <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EXFULL ((DeeObject *)&posix_EXFULL)
PRIVATE DEFINE_UINT45(posix_EXFULL, EXFULL);
#elif EXFULL <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EXFULL ((DeeObject *)&posix_EXFULL)
PRIVATE DEFINE_UINT60(posix_EXFULL, EXFULL);
#else
#define OBJ_posix_EXFULL ((DeeObject *)&posix_EXFULL)
PRIVATE DEFINE_UINT75(posix_EXFULL, EXFULL);
#endif
#else /* EXFULL >= 0 */
#if EXFULL >= -0x4000ll /* 15-bit */
#define OBJ_posix_EXFULL ((DeeObject *)&posix_EXFULL)
PRIVATE DEFINE_INT15(posix_EXFULL, EXFULL);
#elif EXFULL >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EXFULL ((DeeObject *)&posix_EXFULL)
PRIVATE DEFINE_INT30(posix_EXFULL, EXFULL);
#elif EXFULL >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EXFULL ((DeeObject *)&posix_EXFULL)
PRIVATE DEFINE_INT45(posix_EXFULL, EXFULL);
#elif EXFULL >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EXFULL ((DeeObject *)&posix_EXFULL)
PRIVATE DEFINE_INT60(posix_EXFULL, EXFULL);
#else
#define OBJ_posix_EXFULL ((DeeObject *)&posix_EXFULL)
PRIVATE DEFINE_INT75(posix_EXFULL, EXFULL);
#endif
#endif /* EXFULL < 0 */
#else /* EXFULL */
#define POSIX_EXFULL_DEF /* nothing */
#endif /* !EXFULL */
#ifdef ENOANO
#define POSIX_ENOANO_DEF \
	{ "ENOANO", OBJ_posix_ENOANO, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "No anode" },
#if DeeInt_IsSmallInt(ENOANO)
#define OBJ_posix_ENOANO DeeInt_ForSmallInt(ENOANO)
#elif ENOANO >= 0
#if ENOANO <= 0x7fffull /* 15-bit */
#define OBJ_posix_ENOANO ((DeeObject *)&posix_ENOANO)
PRIVATE DEFINE_UINT15(posix_ENOANO, ENOANO);
#elif ENOANO <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ENOANO ((DeeObject *)&posix_ENOANO)
PRIVATE DEFINE_UINT30(posix_ENOANO, ENOANO);
#elif ENOANO <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ENOANO ((DeeObject *)&posix_ENOANO)
PRIVATE DEFINE_UINT45(posix_ENOANO, ENOANO);
#elif ENOANO <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ENOANO ((DeeObject *)&posix_ENOANO)
PRIVATE DEFINE_UINT60(posix_ENOANO, ENOANO);
#else
#define OBJ_posix_ENOANO ((DeeObject *)&posix_ENOANO)
PRIVATE DEFINE_UINT75(posix_ENOANO, ENOANO);
#endif
#else /* ENOANO >= 0 */
#if ENOANO >= -0x4000ll /* 15-bit */
#define OBJ_posix_ENOANO ((DeeObject *)&posix_ENOANO)
PRIVATE DEFINE_INT15(posix_ENOANO, ENOANO);
#elif ENOANO >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ENOANO ((DeeObject *)&posix_ENOANO)
PRIVATE DEFINE_INT30(posix_ENOANO, ENOANO);
#elif ENOANO >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ENOANO ((DeeObject *)&posix_ENOANO)
PRIVATE DEFINE_INT45(posix_ENOANO, ENOANO);
#elif ENOANO >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ENOANO ((DeeObject *)&posix_ENOANO)
PRIVATE DEFINE_INT60(posix_ENOANO, ENOANO);
#else
#define OBJ_posix_ENOANO ((DeeObject *)&posix_ENOANO)
PRIVATE DEFINE_INT75(posix_ENOANO, ENOANO);
#endif
#endif /* ENOANO < 0 */
#else /* ENOANO */
#define POSIX_ENOANO_DEF /* nothing */
#endif /* !ENOANO */
#ifdef EBADRQC
#define POSIX_EBADRQC_DEF \
	{ "EBADRQC", OBJ_posix_EBADRQC, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Invalid request code" },
#if DeeInt_IsSmallInt(EBADRQC)
#define OBJ_posix_EBADRQC DeeInt_ForSmallInt(EBADRQC)
#elif EBADRQC >= 0
#if EBADRQC <= 0x7fffull /* 15-bit */
#define OBJ_posix_EBADRQC ((DeeObject *)&posix_EBADRQC)
PRIVATE DEFINE_UINT15(posix_EBADRQC, EBADRQC);
#elif EBADRQC <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EBADRQC ((DeeObject *)&posix_EBADRQC)
PRIVATE DEFINE_UINT30(posix_EBADRQC, EBADRQC);
#elif EBADRQC <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EBADRQC ((DeeObject *)&posix_EBADRQC)
PRIVATE DEFINE_UINT45(posix_EBADRQC, EBADRQC);
#elif EBADRQC <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EBADRQC ((DeeObject *)&posix_EBADRQC)
PRIVATE DEFINE_UINT60(posix_EBADRQC, EBADRQC);
#else
#define OBJ_posix_EBADRQC ((DeeObject *)&posix_EBADRQC)
PRIVATE DEFINE_UINT75(posix_EBADRQC, EBADRQC);
#endif
#else /* EBADRQC >= 0 */
#if EBADRQC >= -0x4000ll /* 15-bit */
#define OBJ_posix_EBADRQC ((DeeObject *)&posix_EBADRQC)
PRIVATE DEFINE_INT15(posix_EBADRQC, EBADRQC);
#elif EBADRQC >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EBADRQC ((DeeObject *)&posix_EBADRQC)
PRIVATE DEFINE_INT30(posix_EBADRQC, EBADRQC);
#elif EBADRQC >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EBADRQC ((DeeObject *)&posix_EBADRQC)
PRIVATE DEFINE_INT45(posix_EBADRQC, EBADRQC);
#elif EBADRQC >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EBADRQC ((DeeObject *)&posix_EBADRQC)
PRIVATE DEFINE_INT60(posix_EBADRQC, EBADRQC);
#else
#define OBJ_posix_EBADRQC ((DeeObject *)&posix_EBADRQC)
PRIVATE DEFINE_INT75(posix_EBADRQC, EBADRQC);
#endif
#endif /* EBADRQC < 0 */
#else /* EBADRQC */
#define POSIX_EBADRQC_DEF /* nothing */
#endif /* !EBADRQC */
#ifdef EBADSLT
#define POSIX_EBADSLT_DEF \
	{ "EBADSLT", OBJ_posix_EBADSLT, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Invalid slot" },
#if DeeInt_IsSmallInt(EBADSLT)
#define OBJ_posix_EBADSLT DeeInt_ForSmallInt(EBADSLT)
#elif EBADSLT >= 0
#if EBADSLT <= 0x7fffull /* 15-bit */
#define OBJ_posix_EBADSLT ((DeeObject *)&posix_EBADSLT)
PRIVATE DEFINE_UINT15(posix_EBADSLT, EBADSLT);
#elif EBADSLT <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EBADSLT ((DeeObject *)&posix_EBADSLT)
PRIVATE DEFINE_UINT30(posix_EBADSLT, EBADSLT);
#elif EBADSLT <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EBADSLT ((DeeObject *)&posix_EBADSLT)
PRIVATE DEFINE_UINT45(posix_EBADSLT, EBADSLT);
#elif EBADSLT <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EBADSLT ((DeeObject *)&posix_EBADSLT)
PRIVATE DEFINE_UINT60(posix_EBADSLT, EBADSLT);
#else
#define OBJ_posix_EBADSLT ((DeeObject *)&posix_EBADSLT)
PRIVATE DEFINE_UINT75(posix_EBADSLT, EBADSLT);
#endif
#else /* EBADSLT >= 0 */
#if EBADSLT >= -0x4000ll /* 15-bit */
#define OBJ_posix_EBADSLT ((DeeObject *)&posix_EBADSLT)
PRIVATE DEFINE_INT15(posix_EBADSLT, EBADSLT);
#elif EBADSLT >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EBADSLT ((DeeObject *)&posix_EBADSLT)
PRIVATE DEFINE_INT30(posix_EBADSLT, EBADSLT);
#elif EBADSLT >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EBADSLT ((DeeObject *)&posix_EBADSLT)
PRIVATE DEFINE_INT45(posix_EBADSLT, EBADSLT);
#elif EBADSLT >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EBADSLT ((DeeObject *)&posix_EBADSLT)
PRIVATE DEFINE_INT60(posix_EBADSLT, EBADSLT);
#else
#define OBJ_posix_EBADSLT ((DeeObject *)&posix_EBADSLT)
PRIVATE DEFINE_INT75(posix_EBADSLT, EBADSLT);
#endif
#endif /* EBADSLT < 0 */
#else /* EBADSLT */
#define POSIX_EBADSLT_DEF /* nothing */
#endif /* !EBADSLT */
#ifdef EDEADLOCK
#define POSIX_EDEADLOCK_DEF \
	{ "EDEADLOCK", OBJ_posix_EDEADLOCK, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Resource deadlock would occur" },
#if DeeInt_IsSmallInt(EDEADLOCK)
#define OBJ_posix_EDEADLOCK DeeInt_ForSmallInt(EDEADLOCK)
#elif EDEADLOCK >= 0
#if EDEADLOCK <= 0x7fffull /* 15-bit */
#define OBJ_posix_EDEADLOCK ((DeeObject *)&posix_EDEADLOCK)
PRIVATE DEFINE_UINT15(posix_EDEADLOCK, EDEADLOCK);
#elif EDEADLOCK <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EDEADLOCK ((DeeObject *)&posix_EDEADLOCK)
PRIVATE DEFINE_UINT30(posix_EDEADLOCK, EDEADLOCK);
#elif EDEADLOCK <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EDEADLOCK ((DeeObject *)&posix_EDEADLOCK)
PRIVATE DEFINE_UINT45(posix_EDEADLOCK, EDEADLOCK);
#elif EDEADLOCK <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EDEADLOCK ((DeeObject *)&posix_EDEADLOCK)
PRIVATE DEFINE_UINT60(posix_EDEADLOCK, EDEADLOCK);
#else
#define OBJ_posix_EDEADLOCK ((DeeObject *)&posix_EDEADLOCK)
PRIVATE DEFINE_UINT75(posix_EDEADLOCK, EDEADLOCK);
#endif
#else /* EDEADLOCK >= 0 */
#if EDEADLOCK >= -0x4000ll /* 15-bit */
#define OBJ_posix_EDEADLOCK ((DeeObject *)&posix_EDEADLOCK)
PRIVATE DEFINE_INT15(posix_EDEADLOCK, EDEADLOCK);
#elif EDEADLOCK >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EDEADLOCK ((DeeObject *)&posix_EDEADLOCK)
PRIVATE DEFINE_INT30(posix_EDEADLOCK, EDEADLOCK);
#elif EDEADLOCK >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EDEADLOCK ((DeeObject *)&posix_EDEADLOCK)
PRIVATE DEFINE_INT45(posix_EDEADLOCK, EDEADLOCK);
#elif EDEADLOCK >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EDEADLOCK ((DeeObject *)&posix_EDEADLOCK)
PRIVATE DEFINE_INT60(posix_EDEADLOCK, EDEADLOCK);
#else
#define OBJ_posix_EDEADLOCK ((DeeObject *)&posix_EDEADLOCK)
PRIVATE DEFINE_INT75(posix_EDEADLOCK, EDEADLOCK);
#endif
#endif /* EDEADLOCK < 0 */
#else /* EDEADLOCK */
#define POSIX_EDEADLOCK_DEF /* nothing */
#endif /* !EDEADLOCK */
#ifdef EBFONT
#define POSIX_EBFONT_DEF \
	{ "EBFONT", OBJ_posix_EBFONT, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Bad font file format" },
#if DeeInt_IsSmallInt(EBFONT)
#define OBJ_posix_EBFONT DeeInt_ForSmallInt(EBFONT)
#elif EBFONT >= 0
#if EBFONT <= 0x7fffull /* 15-bit */
#define OBJ_posix_EBFONT ((DeeObject *)&posix_EBFONT)
PRIVATE DEFINE_UINT15(posix_EBFONT, EBFONT);
#elif EBFONT <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EBFONT ((DeeObject *)&posix_EBFONT)
PRIVATE DEFINE_UINT30(posix_EBFONT, EBFONT);
#elif EBFONT <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EBFONT ((DeeObject *)&posix_EBFONT)
PRIVATE DEFINE_UINT45(posix_EBFONT, EBFONT);
#elif EBFONT <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EBFONT ((DeeObject *)&posix_EBFONT)
PRIVATE DEFINE_UINT60(posix_EBFONT, EBFONT);
#else
#define OBJ_posix_EBFONT ((DeeObject *)&posix_EBFONT)
PRIVATE DEFINE_UINT75(posix_EBFONT, EBFONT);
#endif
#else /* EBFONT >= 0 */
#if EBFONT >= -0x4000ll /* 15-bit */
#define OBJ_posix_EBFONT ((DeeObject *)&posix_EBFONT)
PRIVATE DEFINE_INT15(posix_EBFONT, EBFONT);
#elif EBFONT >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EBFONT ((DeeObject *)&posix_EBFONT)
PRIVATE DEFINE_INT30(posix_EBFONT, EBFONT);
#elif EBFONT >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EBFONT ((DeeObject *)&posix_EBFONT)
PRIVATE DEFINE_INT45(posix_EBFONT, EBFONT);
#elif EBFONT >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EBFONT ((DeeObject *)&posix_EBFONT)
PRIVATE DEFINE_INT60(posix_EBFONT, EBFONT);
#else
#define OBJ_posix_EBFONT ((DeeObject *)&posix_EBFONT)
PRIVATE DEFINE_INT75(posix_EBFONT, EBFONT);
#endif
#endif /* EBFONT < 0 */
#else /* EBFONT */
#define POSIX_EBFONT_DEF /* nothing */
#endif /* !EBFONT */
#ifdef ENOSTR
#define POSIX_ENOSTR_DEF \
	{ "ENOSTR", OBJ_posix_ENOSTR, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Device not a stream" },
#if DeeInt_IsSmallInt(ENOSTR)
#define OBJ_posix_ENOSTR DeeInt_ForSmallInt(ENOSTR)
#elif ENOSTR >= 0
#if ENOSTR <= 0x7fffull /* 15-bit */
#define OBJ_posix_ENOSTR ((DeeObject *)&posix_ENOSTR)
PRIVATE DEFINE_UINT15(posix_ENOSTR, ENOSTR);
#elif ENOSTR <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ENOSTR ((DeeObject *)&posix_ENOSTR)
PRIVATE DEFINE_UINT30(posix_ENOSTR, ENOSTR);
#elif ENOSTR <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ENOSTR ((DeeObject *)&posix_ENOSTR)
PRIVATE DEFINE_UINT45(posix_ENOSTR, ENOSTR);
#elif ENOSTR <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ENOSTR ((DeeObject *)&posix_ENOSTR)
PRIVATE DEFINE_UINT60(posix_ENOSTR, ENOSTR);
#else
#define OBJ_posix_ENOSTR ((DeeObject *)&posix_ENOSTR)
PRIVATE DEFINE_UINT75(posix_ENOSTR, ENOSTR);
#endif
#else /* ENOSTR >= 0 */
#if ENOSTR >= -0x4000ll /* 15-bit */
#define OBJ_posix_ENOSTR ((DeeObject *)&posix_ENOSTR)
PRIVATE DEFINE_INT15(posix_ENOSTR, ENOSTR);
#elif ENOSTR >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ENOSTR ((DeeObject *)&posix_ENOSTR)
PRIVATE DEFINE_INT30(posix_ENOSTR, ENOSTR);
#elif ENOSTR >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ENOSTR ((DeeObject *)&posix_ENOSTR)
PRIVATE DEFINE_INT45(posix_ENOSTR, ENOSTR);
#elif ENOSTR >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ENOSTR ((DeeObject *)&posix_ENOSTR)
PRIVATE DEFINE_INT60(posix_ENOSTR, ENOSTR);
#else
#define OBJ_posix_ENOSTR ((DeeObject *)&posix_ENOSTR)
PRIVATE DEFINE_INT75(posix_ENOSTR, ENOSTR);
#endif
#endif /* ENOSTR < 0 */
#else /* ENOSTR */
#define POSIX_ENOSTR_DEF /* nothing */
#endif /* !ENOSTR */
#ifdef ENODATA
#define POSIX_ENODATA_DEF \
	{ "ENODATA", OBJ_posix_ENODATA, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "No data available" },
#if DeeInt_IsSmallInt(ENODATA)
#define OBJ_posix_ENODATA DeeInt_ForSmallInt(ENODATA)
#elif ENODATA >= 0
#if ENODATA <= 0x7fffull /* 15-bit */
#define OBJ_posix_ENODATA ((DeeObject *)&posix_ENODATA)
PRIVATE DEFINE_UINT15(posix_ENODATA, ENODATA);
#elif ENODATA <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ENODATA ((DeeObject *)&posix_ENODATA)
PRIVATE DEFINE_UINT30(posix_ENODATA, ENODATA);
#elif ENODATA <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ENODATA ((DeeObject *)&posix_ENODATA)
PRIVATE DEFINE_UINT45(posix_ENODATA, ENODATA);
#elif ENODATA <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ENODATA ((DeeObject *)&posix_ENODATA)
PRIVATE DEFINE_UINT60(posix_ENODATA, ENODATA);
#else
#define OBJ_posix_ENODATA ((DeeObject *)&posix_ENODATA)
PRIVATE DEFINE_UINT75(posix_ENODATA, ENODATA);
#endif
#else /* ENODATA >= 0 */
#if ENODATA >= -0x4000ll /* 15-bit */
#define OBJ_posix_ENODATA ((DeeObject *)&posix_ENODATA)
PRIVATE DEFINE_INT15(posix_ENODATA, ENODATA);
#elif ENODATA >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ENODATA ((DeeObject *)&posix_ENODATA)
PRIVATE DEFINE_INT30(posix_ENODATA, ENODATA);
#elif ENODATA >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ENODATA ((DeeObject *)&posix_ENODATA)
PRIVATE DEFINE_INT45(posix_ENODATA, ENODATA);
#elif ENODATA >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ENODATA ((DeeObject *)&posix_ENODATA)
PRIVATE DEFINE_INT60(posix_ENODATA, ENODATA);
#else
#define OBJ_posix_ENODATA ((DeeObject *)&posix_ENODATA)
PRIVATE DEFINE_INT75(posix_ENODATA, ENODATA);
#endif
#endif /* ENODATA < 0 */
#else /* ENODATA */
#define POSIX_ENODATA_DEF /* nothing */
#endif /* !ENODATA */
#ifdef ETIME
#define POSIX_ETIME_DEF \
	{ "ETIME", OBJ_posix_ETIME, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Timer expired" },
#if DeeInt_IsSmallInt(ETIME)
#define OBJ_posix_ETIME DeeInt_ForSmallInt(ETIME)
#elif ETIME >= 0
#if ETIME <= 0x7fffull /* 15-bit */
#define OBJ_posix_ETIME ((DeeObject *)&posix_ETIME)
PRIVATE DEFINE_UINT15(posix_ETIME, ETIME);
#elif ETIME <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ETIME ((DeeObject *)&posix_ETIME)
PRIVATE DEFINE_UINT30(posix_ETIME, ETIME);
#elif ETIME <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ETIME ((DeeObject *)&posix_ETIME)
PRIVATE DEFINE_UINT45(posix_ETIME, ETIME);
#elif ETIME <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ETIME ((DeeObject *)&posix_ETIME)
PRIVATE DEFINE_UINT60(posix_ETIME, ETIME);
#else
#define OBJ_posix_ETIME ((DeeObject *)&posix_ETIME)
PRIVATE DEFINE_UINT75(posix_ETIME, ETIME);
#endif
#else /* ETIME >= 0 */
#if ETIME >= -0x4000ll /* 15-bit */
#define OBJ_posix_ETIME ((DeeObject *)&posix_ETIME)
PRIVATE DEFINE_INT15(posix_ETIME, ETIME);
#elif ETIME >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ETIME ((DeeObject *)&posix_ETIME)
PRIVATE DEFINE_INT30(posix_ETIME, ETIME);
#elif ETIME >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ETIME ((DeeObject *)&posix_ETIME)
PRIVATE DEFINE_INT45(posix_ETIME, ETIME);
#elif ETIME >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ETIME ((DeeObject *)&posix_ETIME)
PRIVATE DEFINE_INT60(posix_ETIME, ETIME);
#else
#define OBJ_posix_ETIME ((DeeObject *)&posix_ETIME)
PRIVATE DEFINE_INT75(posix_ETIME, ETIME);
#endif
#endif /* ETIME < 0 */
#else /* ETIME */
#define POSIX_ETIME_DEF /* nothing */
#endif /* !ETIME */
#ifdef ENOSR
#define POSIX_ENOSR_DEF \
	{ "ENOSR", OBJ_posix_ENOSR, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Out of streams resources" },
#if DeeInt_IsSmallInt(ENOSR)
#define OBJ_posix_ENOSR DeeInt_ForSmallInt(ENOSR)
#elif ENOSR >= 0
#if ENOSR <= 0x7fffull /* 15-bit */
#define OBJ_posix_ENOSR ((DeeObject *)&posix_ENOSR)
PRIVATE DEFINE_UINT15(posix_ENOSR, ENOSR);
#elif ENOSR <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ENOSR ((DeeObject *)&posix_ENOSR)
PRIVATE DEFINE_UINT30(posix_ENOSR, ENOSR);
#elif ENOSR <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ENOSR ((DeeObject *)&posix_ENOSR)
PRIVATE DEFINE_UINT45(posix_ENOSR, ENOSR);
#elif ENOSR <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ENOSR ((DeeObject *)&posix_ENOSR)
PRIVATE DEFINE_UINT60(posix_ENOSR, ENOSR);
#else
#define OBJ_posix_ENOSR ((DeeObject *)&posix_ENOSR)
PRIVATE DEFINE_UINT75(posix_ENOSR, ENOSR);
#endif
#else /* ENOSR >= 0 */
#if ENOSR >= -0x4000ll /* 15-bit */
#define OBJ_posix_ENOSR ((DeeObject *)&posix_ENOSR)
PRIVATE DEFINE_INT15(posix_ENOSR, ENOSR);
#elif ENOSR >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ENOSR ((DeeObject *)&posix_ENOSR)
PRIVATE DEFINE_INT30(posix_ENOSR, ENOSR);
#elif ENOSR >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ENOSR ((DeeObject *)&posix_ENOSR)
PRIVATE DEFINE_INT45(posix_ENOSR, ENOSR);
#elif ENOSR >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ENOSR ((DeeObject *)&posix_ENOSR)
PRIVATE DEFINE_INT60(posix_ENOSR, ENOSR);
#else
#define OBJ_posix_ENOSR ((DeeObject *)&posix_ENOSR)
PRIVATE DEFINE_INT75(posix_ENOSR, ENOSR);
#endif
#endif /* ENOSR < 0 */
#else /* ENOSR */
#define POSIX_ENOSR_DEF /* nothing */
#endif /* !ENOSR */
#ifdef ENONET
#define POSIX_ENONET_DEF \
	{ "ENONET", OBJ_posix_ENONET, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Machine is not on the network" },
#if DeeInt_IsSmallInt(ENONET)
#define OBJ_posix_ENONET DeeInt_ForSmallInt(ENONET)
#elif ENONET >= 0
#if ENONET <= 0x7fffull /* 15-bit */
#define OBJ_posix_ENONET ((DeeObject *)&posix_ENONET)
PRIVATE DEFINE_UINT15(posix_ENONET, ENONET);
#elif ENONET <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ENONET ((DeeObject *)&posix_ENONET)
PRIVATE DEFINE_UINT30(posix_ENONET, ENONET);
#elif ENONET <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ENONET ((DeeObject *)&posix_ENONET)
PRIVATE DEFINE_UINT45(posix_ENONET, ENONET);
#elif ENONET <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ENONET ((DeeObject *)&posix_ENONET)
PRIVATE DEFINE_UINT60(posix_ENONET, ENONET);
#else
#define OBJ_posix_ENONET ((DeeObject *)&posix_ENONET)
PRIVATE DEFINE_UINT75(posix_ENONET, ENONET);
#endif
#else /* ENONET >= 0 */
#if ENONET >= -0x4000ll /* 15-bit */
#define OBJ_posix_ENONET ((DeeObject *)&posix_ENONET)
PRIVATE DEFINE_INT15(posix_ENONET, ENONET);
#elif ENONET >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ENONET ((DeeObject *)&posix_ENONET)
PRIVATE DEFINE_INT30(posix_ENONET, ENONET);
#elif ENONET >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ENONET ((DeeObject *)&posix_ENONET)
PRIVATE DEFINE_INT45(posix_ENONET, ENONET);
#elif ENONET >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ENONET ((DeeObject *)&posix_ENONET)
PRIVATE DEFINE_INT60(posix_ENONET, ENONET);
#else
#define OBJ_posix_ENONET ((DeeObject *)&posix_ENONET)
PRIVATE DEFINE_INT75(posix_ENONET, ENONET);
#endif
#endif /* ENONET < 0 */
#else /* ENONET */
#define POSIX_ENONET_DEF /* nothing */
#endif /* !ENONET */
#ifdef ENOPKG
#define POSIX_ENOPKG_DEF \
	{ "ENOPKG", OBJ_posix_ENOPKG, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Package not installed" },
#if DeeInt_IsSmallInt(ENOPKG)
#define OBJ_posix_ENOPKG DeeInt_ForSmallInt(ENOPKG)
#elif ENOPKG >= 0
#if ENOPKG <= 0x7fffull /* 15-bit */
#define OBJ_posix_ENOPKG ((DeeObject *)&posix_ENOPKG)
PRIVATE DEFINE_UINT15(posix_ENOPKG, ENOPKG);
#elif ENOPKG <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ENOPKG ((DeeObject *)&posix_ENOPKG)
PRIVATE DEFINE_UINT30(posix_ENOPKG, ENOPKG);
#elif ENOPKG <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ENOPKG ((DeeObject *)&posix_ENOPKG)
PRIVATE DEFINE_UINT45(posix_ENOPKG, ENOPKG);
#elif ENOPKG <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ENOPKG ((DeeObject *)&posix_ENOPKG)
PRIVATE DEFINE_UINT60(posix_ENOPKG, ENOPKG);
#else
#define OBJ_posix_ENOPKG ((DeeObject *)&posix_ENOPKG)
PRIVATE DEFINE_UINT75(posix_ENOPKG, ENOPKG);
#endif
#else /* ENOPKG >= 0 */
#if ENOPKG >= -0x4000ll /* 15-bit */
#define OBJ_posix_ENOPKG ((DeeObject *)&posix_ENOPKG)
PRIVATE DEFINE_INT15(posix_ENOPKG, ENOPKG);
#elif ENOPKG >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ENOPKG ((DeeObject *)&posix_ENOPKG)
PRIVATE DEFINE_INT30(posix_ENOPKG, ENOPKG);
#elif ENOPKG >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ENOPKG ((DeeObject *)&posix_ENOPKG)
PRIVATE DEFINE_INT45(posix_ENOPKG, ENOPKG);
#elif ENOPKG >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ENOPKG ((DeeObject *)&posix_ENOPKG)
PRIVATE DEFINE_INT60(posix_ENOPKG, ENOPKG);
#else
#define OBJ_posix_ENOPKG ((DeeObject *)&posix_ENOPKG)
PRIVATE DEFINE_INT75(posix_ENOPKG, ENOPKG);
#endif
#endif /* ENOPKG < 0 */
#else /* ENOPKG */
#define POSIX_ENOPKG_DEF /* nothing */
#endif /* !ENOPKG */
#ifdef EREMOTE
#define POSIX_EREMOTE_DEF \
	{ "EREMOTE", OBJ_posix_EREMOTE, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Object is remote" },
#if DeeInt_IsSmallInt(EREMOTE)
#define OBJ_posix_EREMOTE DeeInt_ForSmallInt(EREMOTE)
#elif EREMOTE >= 0
#if EREMOTE <= 0x7fffull /* 15-bit */
#define OBJ_posix_EREMOTE ((DeeObject *)&posix_EREMOTE)
PRIVATE DEFINE_UINT15(posix_EREMOTE, EREMOTE);
#elif EREMOTE <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EREMOTE ((DeeObject *)&posix_EREMOTE)
PRIVATE DEFINE_UINT30(posix_EREMOTE, EREMOTE);
#elif EREMOTE <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EREMOTE ((DeeObject *)&posix_EREMOTE)
PRIVATE DEFINE_UINT45(posix_EREMOTE, EREMOTE);
#elif EREMOTE <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EREMOTE ((DeeObject *)&posix_EREMOTE)
PRIVATE DEFINE_UINT60(posix_EREMOTE, EREMOTE);
#else
#define OBJ_posix_EREMOTE ((DeeObject *)&posix_EREMOTE)
PRIVATE DEFINE_UINT75(posix_EREMOTE, EREMOTE);
#endif
#else /* EREMOTE >= 0 */
#if EREMOTE >= -0x4000ll /* 15-bit */
#define OBJ_posix_EREMOTE ((DeeObject *)&posix_EREMOTE)
PRIVATE DEFINE_INT15(posix_EREMOTE, EREMOTE);
#elif EREMOTE >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EREMOTE ((DeeObject *)&posix_EREMOTE)
PRIVATE DEFINE_INT30(posix_EREMOTE, EREMOTE);
#elif EREMOTE >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EREMOTE ((DeeObject *)&posix_EREMOTE)
PRIVATE DEFINE_INT45(posix_EREMOTE, EREMOTE);
#elif EREMOTE >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EREMOTE ((DeeObject *)&posix_EREMOTE)
PRIVATE DEFINE_INT60(posix_EREMOTE, EREMOTE);
#else
#define OBJ_posix_EREMOTE ((DeeObject *)&posix_EREMOTE)
PRIVATE DEFINE_INT75(posix_EREMOTE, EREMOTE);
#endif
#endif /* EREMOTE < 0 */
#else /* EREMOTE */
#define POSIX_EREMOTE_DEF /* nothing */
#endif /* !EREMOTE */
#ifdef ENOLINK
#define POSIX_ENOLINK_DEF \
	{ "ENOLINK", OBJ_posix_ENOLINK, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Link has been severed" },
#if DeeInt_IsSmallInt(ENOLINK)
#define OBJ_posix_ENOLINK DeeInt_ForSmallInt(ENOLINK)
#elif ENOLINK >= 0
#if ENOLINK <= 0x7fffull /* 15-bit */
#define OBJ_posix_ENOLINK ((DeeObject *)&posix_ENOLINK)
PRIVATE DEFINE_UINT15(posix_ENOLINK, ENOLINK);
#elif ENOLINK <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ENOLINK ((DeeObject *)&posix_ENOLINK)
PRIVATE DEFINE_UINT30(posix_ENOLINK, ENOLINK);
#elif ENOLINK <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ENOLINK ((DeeObject *)&posix_ENOLINK)
PRIVATE DEFINE_UINT45(posix_ENOLINK, ENOLINK);
#elif ENOLINK <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ENOLINK ((DeeObject *)&posix_ENOLINK)
PRIVATE DEFINE_UINT60(posix_ENOLINK, ENOLINK);
#else
#define OBJ_posix_ENOLINK ((DeeObject *)&posix_ENOLINK)
PRIVATE DEFINE_UINT75(posix_ENOLINK, ENOLINK);
#endif
#else /* ENOLINK >= 0 */
#if ENOLINK >= -0x4000ll /* 15-bit */
#define OBJ_posix_ENOLINK ((DeeObject *)&posix_ENOLINK)
PRIVATE DEFINE_INT15(posix_ENOLINK, ENOLINK);
#elif ENOLINK >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ENOLINK ((DeeObject *)&posix_ENOLINK)
PRIVATE DEFINE_INT30(posix_ENOLINK, ENOLINK);
#elif ENOLINK >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ENOLINK ((DeeObject *)&posix_ENOLINK)
PRIVATE DEFINE_INT45(posix_ENOLINK, ENOLINK);
#elif ENOLINK >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ENOLINK ((DeeObject *)&posix_ENOLINK)
PRIVATE DEFINE_INT60(posix_ENOLINK, ENOLINK);
#else
#define OBJ_posix_ENOLINK ((DeeObject *)&posix_ENOLINK)
PRIVATE DEFINE_INT75(posix_ENOLINK, ENOLINK);
#endif
#endif /* ENOLINK < 0 */
#else /* ENOLINK */
#define POSIX_ENOLINK_DEF /* nothing */
#endif /* !ENOLINK */
#ifdef EADV
#define POSIX_EADV_DEF \
	{ "EADV", OBJ_posix_EADV, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Advertise error" },
#if DeeInt_IsSmallInt(EADV)
#define OBJ_posix_EADV DeeInt_ForSmallInt(EADV)
#elif EADV >= 0
#if EADV <= 0x7fffull /* 15-bit */
#define OBJ_posix_EADV ((DeeObject *)&posix_EADV)
PRIVATE DEFINE_UINT15(posix_EADV, EADV);
#elif EADV <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EADV ((DeeObject *)&posix_EADV)
PRIVATE DEFINE_UINT30(posix_EADV, EADV);
#elif EADV <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EADV ((DeeObject *)&posix_EADV)
PRIVATE DEFINE_UINT45(posix_EADV, EADV);
#elif EADV <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EADV ((DeeObject *)&posix_EADV)
PRIVATE DEFINE_UINT60(posix_EADV, EADV);
#else
#define OBJ_posix_EADV ((DeeObject *)&posix_EADV)
PRIVATE DEFINE_UINT75(posix_EADV, EADV);
#endif
#else /* EADV >= 0 */
#if EADV >= -0x4000ll /* 15-bit */
#define OBJ_posix_EADV ((DeeObject *)&posix_EADV)
PRIVATE DEFINE_INT15(posix_EADV, EADV);
#elif EADV >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EADV ((DeeObject *)&posix_EADV)
PRIVATE DEFINE_INT30(posix_EADV, EADV);
#elif EADV >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EADV ((DeeObject *)&posix_EADV)
PRIVATE DEFINE_INT45(posix_EADV, EADV);
#elif EADV >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EADV ((DeeObject *)&posix_EADV)
PRIVATE DEFINE_INT60(posix_EADV, EADV);
#else
#define OBJ_posix_EADV ((DeeObject *)&posix_EADV)
PRIVATE DEFINE_INT75(posix_EADV, EADV);
#endif
#endif /* EADV < 0 */
#else /* EADV */
#define POSIX_EADV_DEF /* nothing */
#endif /* !EADV */
#ifdef ESRMNT
#define POSIX_ESRMNT_DEF \
	{ "ESRMNT", OBJ_posix_ESRMNT, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Srmount error" },
#if DeeInt_IsSmallInt(ESRMNT)
#define OBJ_posix_ESRMNT DeeInt_ForSmallInt(ESRMNT)
#elif ESRMNT >= 0
#if ESRMNT <= 0x7fffull /* 15-bit */
#define OBJ_posix_ESRMNT ((DeeObject *)&posix_ESRMNT)
PRIVATE DEFINE_UINT15(posix_ESRMNT, ESRMNT);
#elif ESRMNT <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ESRMNT ((DeeObject *)&posix_ESRMNT)
PRIVATE DEFINE_UINT30(posix_ESRMNT, ESRMNT);
#elif ESRMNT <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ESRMNT ((DeeObject *)&posix_ESRMNT)
PRIVATE DEFINE_UINT45(posix_ESRMNT, ESRMNT);
#elif ESRMNT <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ESRMNT ((DeeObject *)&posix_ESRMNT)
PRIVATE DEFINE_UINT60(posix_ESRMNT, ESRMNT);
#else
#define OBJ_posix_ESRMNT ((DeeObject *)&posix_ESRMNT)
PRIVATE DEFINE_UINT75(posix_ESRMNT, ESRMNT);
#endif
#else /* ESRMNT >= 0 */
#if ESRMNT >= -0x4000ll /* 15-bit */
#define OBJ_posix_ESRMNT ((DeeObject *)&posix_ESRMNT)
PRIVATE DEFINE_INT15(posix_ESRMNT, ESRMNT);
#elif ESRMNT >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ESRMNT ((DeeObject *)&posix_ESRMNT)
PRIVATE DEFINE_INT30(posix_ESRMNT, ESRMNT);
#elif ESRMNT >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ESRMNT ((DeeObject *)&posix_ESRMNT)
PRIVATE DEFINE_INT45(posix_ESRMNT, ESRMNT);
#elif ESRMNT >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ESRMNT ((DeeObject *)&posix_ESRMNT)
PRIVATE DEFINE_INT60(posix_ESRMNT, ESRMNT);
#else
#define OBJ_posix_ESRMNT ((DeeObject *)&posix_ESRMNT)
PRIVATE DEFINE_INT75(posix_ESRMNT, ESRMNT);
#endif
#endif /* ESRMNT < 0 */
#else /* ESRMNT */
#define POSIX_ESRMNT_DEF /* nothing */
#endif /* !ESRMNT */
#ifdef ECOMM
#define POSIX_ECOMM_DEF \
	{ "ECOMM", OBJ_posix_ECOMM, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Communication error on send" },
#if DeeInt_IsSmallInt(ECOMM)
#define OBJ_posix_ECOMM DeeInt_ForSmallInt(ECOMM)
#elif ECOMM >= 0
#if ECOMM <= 0x7fffull /* 15-bit */
#define OBJ_posix_ECOMM ((DeeObject *)&posix_ECOMM)
PRIVATE DEFINE_UINT15(posix_ECOMM, ECOMM);
#elif ECOMM <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ECOMM ((DeeObject *)&posix_ECOMM)
PRIVATE DEFINE_UINT30(posix_ECOMM, ECOMM);
#elif ECOMM <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ECOMM ((DeeObject *)&posix_ECOMM)
PRIVATE DEFINE_UINT45(posix_ECOMM, ECOMM);
#elif ECOMM <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ECOMM ((DeeObject *)&posix_ECOMM)
PRIVATE DEFINE_UINT60(posix_ECOMM, ECOMM);
#else
#define OBJ_posix_ECOMM ((DeeObject *)&posix_ECOMM)
PRIVATE DEFINE_UINT75(posix_ECOMM, ECOMM);
#endif
#else /* ECOMM >= 0 */
#if ECOMM >= -0x4000ll /* 15-bit */
#define OBJ_posix_ECOMM ((DeeObject *)&posix_ECOMM)
PRIVATE DEFINE_INT15(posix_ECOMM, ECOMM);
#elif ECOMM >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ECOMM ((DeeObject *)&posix_ECOMM)
PRIVATE DEFINE_INT30(posix_ECOMM, ECOMM);
#elif ECOMM >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ECOMM ((DeeObject *)&posix_ECOMM)
PRIVATE DEFINE_INT45(posix_ECOMM, ECOMM);
#elif ECOMM >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ECOMM ((DeeObject *)&posix_ECOMM)
PRIVATE DEFINE_INT60(posix_ECOMM, ECOMM);
#else
#define OBJ_posix_ECOMM ((DeeObject *)&posix_ECOMM)
PRIVATE DEFINE_INT75(posix_ECOMM, ECOMM);
#endif
#endif /* ECOMM < 0 */
#else /* ECOMM */
#define POSIX_ECOMM_DEF /* nothing */
#endif /* !ECOMM */
#ifdef EPROTO
#define POSIX_EPROTO_DEF \
	{ "EPROTO", OBJ_posix_EPROTO, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Protocol error" },
#if DeeInt_IsSmallInt(EPROTO)
#define OBJ_posix_EPROTO DeeInt_ForSmallInt(EPROTO)
#elif EPROTO >= 0
#if EPROTO <= 0x7fffull /* 15-bit */
#define OBJ_posix_EPROTO ((DeeObject *)&posix_EPROTO)
PRIVATE DEFINE_UINT15(posix_EPROTO, EPROTO);
#elif EPROTO <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EPROTO ((DeeObject *)&posix_EPROTO)
PRIVATE DEFINE_UINT30(posix_EPROTO, EPROTO);
#elif EPROTO <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EPROTO ((DeeObject *)&posix_EPROTO)
PRIVATE DEFINE_UINT45(posix_EPROTO, EPROTO);
#elif EPROTO <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EPROTO ((DeeObject *)&posix_EPROTO)
PRIVATE DEFINE_UINT60(posix_EPROTO, EPROTO);
#else
#define OBJ_posix_EPROTO ((DeeObject *)&posix_EPROTO)
PRIVATE DEFINE_UINT75(posix_EPROTO, EPROTO);
#endif
#else /* EPROTO >= 0 */
#if EPROTO >= -0x4000ll /* 15-bit */
#define OBJ_posix_EPROTO ((DeeObject *)&posix_EPROTO)
PRIVATE DEFINE_INT15(posix_EPROTO, EPROTO);
#elif EPROTO >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EPROTO ((DeeObject *)&posix_EPROTO)
PRIVATE DEFINE_INT30(posix_EPROTO, EPROTO);
#elif EPROTO >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EPROTO ((DeeObject *)&posix_EPROTO)
PRIVATE DEFINE_INT45(posix_EPROTO, EPROTO);
#elif EPROTO >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EPROTO ((DeeObject *)&posix_EPROTO)
PRIVATE DEFINE_INT60(posix_EPROTO, EPROTO);
#else
#define OBJ_posix_EPROTO ((DeeObject *)&posix_EPROTO)
PRIVATE DEFINE_INT75(posix_EPROTO, EPROTO);
#endif
#endif /* EPROTO < 0 */
#else /* EPROTO */
#define POSIX_EPROTO_DEF /* nothing */
#endif /* !EPROTO */
#ifdef EMULTIHOP
#define POSIX_EMULTIHOP_DEF \
	{ "EMULTIHOP", OBJ_posix_EMULTIHOP, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Multihop attempted" },
#if DeeInt_IsSmallInt(EMULTIHOP)
#define OBJ_posix_EMULTIHOP DeeInt_ForSmallInt(EMULTIHOP)
#elif EMULTIHOP >= 0
#if EMULTIHOP <= 0x7fffull /* 15-bit */
#define OBJ_posix_EMULTIHOP ((DeeObject *)&posix_EMULTIHOP)
PRIVATE DEFINE_UINT15(posix_EMULTIHOP, EMULTIHOP);
#elif EMULTIHOP <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EMULTIHOP ((DeeObject *)&posix_EMULTIHOP)
PRIVATE DEFINE_UINT30(posix_EMULTIHOP, EMULTIHOP);
#elif EMULTIHOP <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EMULTIHOP ((DeeObject *)&posix_EMULTIHOP)
PRIVATE DEFINE_UINT45(posix_EMULTIHOP, EMULTIHOP);
#elif EMULTIHOP <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EMULTIHOP ((DeeObject *)&posix_EMULTIHOP)
PRIVATE DEFINE_UINT60(posix_EMULTIHOP, EMULTIHOP);
#else
#define OBJ_posix_EMULTIHOP ((DeeObject *)&posix_EMULTIHOP)
PRIVATE DEFINE_UINT75(posix_EMULTIHOP, EMULTIHOP);
#endif
#else /* EMULTIHOP >= 0 */
#if EMULTIHOP >= -0x4000ll /* 15-bit */
#define OBJ_posix_EMULTIHOP ((DeeObject *)&posix_EMULTIHOP)
PRIVATE DEFINE_INT15(posix_EMULTIHOP, EMULTIHOP);
#elif EMULTIHOP >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EMULTIHOP ((DeeObject *)&posix_EMULTIHOP)
PRIVATE DEFINE_INT30(posix_EMULTIHOP, EMULTIHOP);
#elif EMULTIHOP >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EMULTIHOP ((DeeObject *)&posix_EMULTIHOP)
PRIVATE DEFINE_INT45(posix_EMULTIHOP, EMULTIHOP);
#elif EMULTIHOP >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EMULTIHOP ((DeeObject *)&posix_EMULTIHOP)
PRIVATE DEFINE_INT60(posix_EMULTIHOP, EMULTIHOP);
#else
#define OBJ_posix_EMULTIHOP ((DeeObject *)&posix_EMULTIHOP)
PRIVATE DEFINE_INT75(posix_EMULTIHOP, EMULTIHOP);
#endif
#endif /* EMULTIHOP < 0 */
#else /* EMULTIHOP */
#define POSIX_EMULTIHOP_DEF /* nothing */
#endif /* !EMULTIHOP */
#ifdef EDOTDOT
#define POSIX_EDOTDOT_DEF \
	{ "EDOTDOT", OBJ_posix_EDOTDOT, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "RFS specific error" },
#if DeeInt_IsSmallInt(EDOTDOT)
#define OBJ_posix_EDOTDOT DeeInt_ForSmallInt(EDOTDOT)
#elif EDOTDOT >= 0
#if EDOTDOT <= 0x7fffull /* 15-bit */
#define OBJ_posix_EDOTDOT ((DeeObject *)&posix_EDOTDOT)
PRIVATE DEFINE_UINT15(posix_EDOTDOT, EDOTDOT);
#elif EDOTDOT <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EDOTDOT ((DeeObject *)&posix_EDOTDOT)
PRIVATE DEFINE_UINT30(posix_EDOTDOT, EDOTDOT);
#elif EDOTDOT <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EDOTDOT ((DeeObject *)&posix_EDOTDOT)
PRIVATE DEFINE_UINT45(posix_EDOTDOT, EDOTDOT);
#elif EDOTDOT <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EDOTDOT ((DeeObject *)&posix_EDOTDOT)
PRIVATE DEFINE_UINT60(posix_EDOTDOT, EDOTDOT);
#else
#define OBJ_posix_EDOTDOT ((DeeObject *)&posix_EDOTDOT)
PRIVATE DEFINE_UINT75(posix_EDOTDOT, EDOTDOT);
#endif
#else /* EDOTDOT >= 0 */
#if EDOTDOT >= -0x4000ll /* 15-bit */
#define OBJ_posix_EDOTDOT ((DeeObject *)&posix_EDOTDOT)
PRIVATE DEFINE_INT15(posix_EDOTDOT, EDOTDOT);
#elif EDOTDOT >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EDOTDOT ((DeeObject *)&posix_EDOTDOT)
PRIVATE DEFINE_INT30(posix_EDOTDOT, EDOTDOT);
#elif EDOTDOT >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EDOTDOT ((DeeObject *)&posix_EDOTDOT)
PRIVATE DEFINE_INT45(posix_EDOTDOT, EDOTDOT);
#elif EDOTDOT >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EDOTDOT ((DeeObject *)&posix_EDOTDOT)
PRIVATE DEFINE_INT60(posix_EDOTDOT, EDOTDOT);
#else
#define OBJ_posix_EDOTDOT ((DeeObject *)&posix_EDOTDOT)
PRIVATE DEFINE_INT75(posix_EDOTDOT, EDOTDOT);
#endif
#endif /* EDOTDOT < 0 */
#else /* EDOTDOT */
#define POSIX_EDOTDOT_DEF /* nothing */
#endif /* !EDOTDOT */
#ifdef EBADMSG
#define POSIX_EBADMSG_DEF \
	{ "EBADMSG", OBJ_posix_EBADMSG, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Not a data message" },
#if DeeInt_IsSmallInt(EBADMSG)
#define OBJ_posix_EBADMSG DeeInt_ForSmallInt(EBADMSG)
#elif EBADMSG >= 0
#if EBADMSG <= 0x7fffull /* 15-bit */
#define OBJ_posix_EBADMSG ((DeeObject *)&posix_EBADMSG)
PRIVATE DEFINE_UINT15(posix_EBADMSG, EBADMSG);
#elif EBADMSG <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EBADMSG ((DeeObject *)&posix_EBADMSG)
PRIVATE DEFINE_UINT30(posix_EBADMSG, EBADMSG);
#elif EBADMSG <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EBADMSG ((DeeObject *)&posix_EBADMSG)
PRIVATE DEFINE_UINT45(posix_EBADMSG, EBADMSG);
#elif EBADMSG <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EBADMSG ((DeeObject *)&posix_EBADMSG)
PRIVATE DEFINE_UINT60(posix_EBADMSG, EBADMSG);
#else
#define OBJ_posix_EBADMSG ((DeeObject *)&posix_EBADMSG)
PRIVATE DEFINE_UINT75(posix_EBADMSG, EBADMSG);
#endif
#else /* EBADMSG >= 0 */
#if EBADMSG >= -0x4000ll /* 15-bit */
#define OBJ_posix_EBADMSG ((DeeObject *)&posix_EBADMSG)
PRIVATE DEFINE_INT15(posix_EBADMSG, EBADMSG);
#elif EBADMSG >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EBADMSG ((DeeObject *)&posix_EBADMSG)
PRIVATE DEFINE_INT30(posix_EBADMSG, EBADMSG);
#elif EBADMSG >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EBADMSG ((DeeObject *)&posix_EBADMSG)
PRIVATE DEFINE_INT45(posix_EBADMSG, EBADMSG);
#elif EBADMSG >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EBADMSG ((DeeObject *)&posix_EBADMSG)
PRIVATE DEFINE_INT60(posix_EBADMSG, EBADMSG);
#else
#define OBJ_posix_EBADMSG ((DeeObject *)&posix_EBADMSG)
PRIVATE DEFINE_INT75(posix_EBADMSG, EBADMSG);
#endif
#endif /* EBADMSG < 0 */
#else /* EBADMSG */
#define POSIX_EBADMSG_DEF /* nothing */
#endif /* !EBADMSG */
#ifdef EOVERFLOW
#define POSIX_EOVERFLOW_DEF \
	{ "EOVERFLOW", OBJ_posix_EOVERFLOW, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Value too large for defined data type" },
#if DeeInt_IsSmallInt(EOVERFLOW)
#define OBJ_posix_EOVERFLOW DeeInt_ForSmallInt(EOVERFLOW)
#elif EOVERFLOW >= 0
#if EOVERFLOW <= 0x7fffull /* 15-bit */
#define OBJ_posix_EOVERFLOW ((DeeObject *)&posix_EOVERFLOW)
PRIVATE DEFINE_UINT15(posix_EOVERFLOW, EOVERFLOW);
#elif EOVERFLOW <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EOVERFLOW ((DeeObject *)&posix_EOVERFLOW)
PRIVATE DEFINE_UINT30(posix_EOVERFLOW, EOVERFLOW);
#elif EOVERFLOW <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EOVERFLOW ((DeeObject *)&posix_EOVERFLOW)
PRIVATE DEFINE_UINT45(posix_EOVERFLOW, EOVERFLOW);
#elif EOVERFLOW <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EOVERFLOW ((DeeObject *)&posix_EOVERFLOW)
PRIVATE DEFINE_UINT60(posix_EOVERFLOW, EOVERFLOW);
#else
#define OBJ_posix_EOVERFLOW ((DeeObject *)&posix_EOVERFLOW)
PRIVATE DEFINE_UINT75(posix_EOVERFLOW, EOVERFLOW);
#endif
#else /* EOVERFLOW >= 0 */
#if EOVERFLOW >= -0x4000ll /* 15-bit */
#define OBJ_posix_EOVERFLOW ((DeeObject *)&posix_EOVERFLOW)
PRIVATE DEFINE_INT15(posix_EOVERFLOW, EOVERFLOW);
#elif EOVERFLOW >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EOVERFLOW ((DeeObject *)&posix_EOVERFLOW)
PRIVATE DEFINE_INT30(posix_EOVERFLOW, EOVERFLOW);
#elif EOVERFLOW >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EOVERFLOW ((DeeObject *)&posix_EOVERFLOW)
PRIVATE DEFINE_INT45(posix_EOVERFLOW, EOVERFLOW);
#elif EOVERFLOW >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EOVERFLOW ((DeeObject *)&posix_EOVERFLOW)
PRIVATE DEFINE_INT60(posix_EOVERFLOW, EOVERFLOW);
#else
#define OBJ_posix_EOVERFLOW ((DeeObject *)&posix_EOVERFLOW)
PRIVATE DEFINE_INT75(posix_EOVERFLOW, EOVERFLOW);
#endif
#endif /* EOVERFLOW < 0 */
#else /* EOVERFLOW */
#define POSIX_EOVERFLOW_DEF /* nothing */
#endif /* !EOVERFLOW */
#ifdef ENOTUNIQ
#define POSIX_ENOTUNIQ_DEF \
	{ "ENOTUNIQ", OBJ_posix_ENOTUNIQ, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Name not unique on network" },
#if DeeInt_IsSmallInt(ENOTUNIQ)
#define OBJ_posix_ENOTUNIQ DeeInt_ForSmallInt(ENOTUNIQ)
#elif ENOTUNIQ >= 0
#if ENOTUNIQ <= 0x7fffull /* 15-bit */
#define OBJ_posix_ENOTUNIQ ((DeeObject *)&posix_ENOTUNIQ)
PRIVATE DEFINE_UINT15(posix_ENOTUNIQ, ENOTUNIQ);
#elif ENOTUNIQ <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ENOTUNIQ ((DeeObject *)&posix_ENOTUNIQ)
PRIVATE DEFINE_UINT30(posix_ENOTUNIQ, ENOTUNIQ);
#elif ENOTUNIQ <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ENOTUNIQ ((DeeObject *)&posix_ENOTUNIQ)
PRIVATE DEFINE_UINT45(posix_ENOTUNIQ, ENOTUNIQ);
#elif ENOTUNIQ <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ENOTUNIQ ((DeeObject *)&posix_ENOTUNIQ)
PRIVATE DEFINE_UINT60(posix_ENOTUNIQ, ENOTUNIQ);
#else
#define OBJ_posix_ENOTUNIQ ((DeeObject *)&posix_ENOTUNIQ)
PRIVATE DEFINE_UINT75(posix_ENOTUNIQ, ENOTUNIQ);
#endif
#else /* ENOTUNIQ >= 0 */
#if ENOTUNIQ >= -0x4000ll /* 15-bit */
#define OBJ_posix_ENOTUNIQ ((DeeObject *)&posix_ENOTUNIQ)
PRIVATE DEFINE_INT15(posix_ENOTUNIQ, ENOTUNIQ);
#elif ENOTUNIQ >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ENOTUNIQ ((DeeObject *)&posix_ENOTUNIQ)
PRIVATE DEFINE_INT30(posix_ENOTUNIQ, ENOTUNIQ);
#elif ENOTUNIQ >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ENOTUNIQ ((DeeObject *)&posix_ENOTUNIQ)
PRIVATE DEFINE_INT45(posix_ENOTUNIQ, ENOTUNIQ);
#elif ENOTUNIQ >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ENOTUNIQ ((DeeObject *)&posix_ENOTUNIQ)
PRIVATE DEFINE_INT60(posix_ENOTUNIQ, ENOTUNIQ);
#else
#define OBJ_posix_ENOTUNIQ ((DeeObject *)&posix_ENOTUNIQ)
PRIVATE DEFINE_INT75(posix_ENOTUNIQ, ENOTUNIQ);
#endif
#endif /* ENOTUNIQ < 0 */
#else /* ENOTUNIQ */
#define POSIX_ENOTUNIQ_DEF /* nothing */
#endif /* !ENOTUNIQ */
#ifdef EBADFD
#define POSIX_EBADFD_DEF \
	{ "EBADFD", OBJ_posix_EBADFD, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "File descriptor in bad state" },
#if DeeInt_IsSmallInt(EBADFD)
#define OBJ_posix_EBADFD DeeInt_ForSmallInt(EBADFD)
#elif EBADFD >= 0
#if EBADFD <= 0x7fffull /* 15-bit */
#define OBJ_posix_EBADFD ((DeeObject *)&posix_EBADFD)
PRIVATE DEFINE_UINT15(posix_EBADFD, EBADFD);
#elif EBADFD <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EBADFD ((DeeObject *)&posix_EBADFD)
PRIVATE DEFINE_UINT30(posix_EBADFD, EBADFD);
#elif EBADFD <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EBADFD ((DeeObject *)&posix_EBADFD)
PRIVATE DEFINE_UINT45(posix_EBADFD, EBADFD);
#elif EBADFD <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EBADFD ((DeeObject *)&posix_EBADFD)
PRIVATE DEFINE_UINT60(posix_EBADFD, EBADFD);
#else
#define OBJ_posix_EBADFD ((DeeObject *)&posix_EBADFD)
PRIVATE DEFINE_UINT75(posix_EBADFD, EBADFD);
#endif
#else /* EBADFD >= 0 */
#if EBADFD >= -0x4000ll /* 15-bit */
#define OBJ_posix_EBADFD ((DeeObject *)&posix_EBADFD)
PRIVATE DEFINE_INT15(posix_EBADFD, EBADFD);
#elif EBADFD >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EBADFD ((DeeObject *)&posix_EBADFD)
PRIVATE DEFINE_INT30(posix_EBADFD, EBADFD);
#elif EBADFD >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EBADFD ((DeeObject *)&posix_EBADFD)
PRIVATE DEFINE_INT45(posix_EBADFD, EBADFD);
#elif EBADFD >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EBADFD ((DeeObject *)&posix_EBADFD)
PRIVATE DEFINE_INT60(posix_EBADFD, EBADFD);
#else
#define OBJ_posix_EBADFD ((DeeObject *)&posix_EBADFD)
PRIVATE DEFINE_INT75(posix_EBADFD, EBADFD);
#endif
#endif /* EBADFD < 0 */
#else /* EBADFD */
#define POSIX_EBADFD_DEF /* nothing */
#endif /* !EBADFD */
#ifdef EREMCHG
#define POSIX_EREMCHG_DEF \
	{ "EREMCHG", OBJ_posix_EREMCHG, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Remote address changed" },
#if DeeInt_IsSmallInt(EREMCHG)
#define OBJ_posix_EREMCHG DeeInt_ForSmallInt(EREMCHG)
#elif EREMCHG >= 0
#if EREMCHG <= 0x7fffull /* 15-bit */
#define OBJ_posix_EREMCHG ((DeeObject *)&posix_EREMCHG)
PRIVATE DEFINE_UINT15(posix_EREMCHG, EREMCHG);
#elif EREMCHG <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EREMCHG ((DeeObject *)&posix_EREMCHG)
PRIVATE DEFINE_UINT30(posix_EREMCHG, EREMCHG);
#elif EREMCHG <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EREMCHG ((DeeObject *)&posix_EREMCHG)
PRIVATE DEFINE_UINT45(posix_EREMCHG, EREMCHG);
#elif EREMCHG <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EREMCHG ((DeeObject *)&posix_EREMCHG)
PRIVATE DEFINE_UINT60(posix_EREMCHG, EREMCHG);
#else
#define OBJ_posix_EREMCHG ((DeeObject *)&posix_EREMCHG)
PRIVATE DEFINE_UINT75(posix_EREMCHG, EREMCHG);
#endif
#else /* EREMCHG >= 0 */
#if EREMCHG >= -0x4000ll /* 15-bit */
#define OBJ_posix_EREMCHG ((DeeObject *)&posix_EREMCHG)
PRIVATE DEFINE_INT15(posix_EREMCHG, EREMCHG);
#elif EREMCHG >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EREMCHG ((DeeObject *)&posix_EREMCHG)
PRIVATE DEFINE_INT30(posix_EREMCHG, EREMCHG);
#elif EREMCHG >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EREMCHG ((DeeObject *)&posix_EREMCHG)
PRIVATE DEFINE_INT45(posix_EREMCHG, EREMCHG);
#elif EREMCHG >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EREMCHG ((DeeObject *)&posix_EREMCHG)
PRIVATE DEFINE_INT60(posix_EREMCHG, EREMCHG);
#else
#define OBJ_posix_EREMCHG ((DeeObject *)&posix_EREMCHG)
PRIVATE DEFINE_INT75(posix_EREMCHG, EREMCHG);
#endif
#endif /* EREMCHG < 0 */
#else /* EREMCHG */
#define POSIX_EREMCHG_DEF /* nothing */
#endif /* !EREMCHG */
#ifdef ELIBACC
#define POSIX_ELIBACC_DEF \
	{ "ELIBACC", OBJ_posix_ELIBACC, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Can not access a needed shared library" },
#if DeeInt_IsSmallInt(ELIBACC)
#define OBJ_posix_ELIBACC DeeInt_ForSmallInt(ELIBACC)
#elif ELIBACC >= 0
#if ELIBACC <= 0x7fffull /* 15-bit */
#define OBJ_posix_ELIBACC ((DeeObject *)&posix_ELIBACC)
PRIVATE DEFINE_UINT15(posix_ELIBACC, ELIBACC);
#elif ELIBACC <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ELIBACC ((DeeObject *)&posix_ELIBACC)
PRIVATE DEFINE_UINT30(posix_ELIBACC, ELIBACC);
#elif ELIBACC <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ELIBACC ((DeeObject *)&posix_ELIBACC)
PRIVATE DEFINE_UINT45(posix_ELIBACC, ELIBACC);
#elif ELIBACC <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ELIBACC ((DeeObject *)&posix_ELIBACC)
PRIVATE DEFINE_UINT60(posix_ELIBACC, ELIBACC);
#else
#define OBJ_posix_ELIBACC ((DeeObject *)&posix_ELIBACC)
PRIVATE DEFINE_UINT75(posix_ELIBACC, ELIBACC);
#endif
#else /* ELIBACC >= 0 */
#if ELIBACC >= -0x4000ll /* 15-bit */
#define OBJ_posix_ELIBACC ((DeeObject *)&posix_ELIBACC)
PRIVATE DEFINE_INT15(posix_ELIBACC, ELIBACC);
#elif ELIBACC >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ELIBACC ((DeeObject *)&posix_ELIBACC)
PRIVATE DEFINE_INT30(posix_ELIBACC, ELIBACC);
#elif ELIBACC >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ELIBACC ((DeeObject *)&posix_ELIBACC)
PRIVATE DEFINE_INT45(posix_ELIBACC, ELIBACC);
#elif ELIBACC >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ELIBACC ((DeeObject *)&posix_ELIBACC)
PRIVATE DEFINE_INT60(posix_ELIBACC, ELIBACC);
#else
#define OBJ_posix_ELIBACC ((DeeObject *)&posix_ELIBACC)
PRIVATE DEFINE_INT75(posix_ELIBACC, ELIBACC);
#endif
#endif /* ELIBACC < 0 */
#else /* ELIBACC */
#define POSIX_ELIBACC_DEF /* nothing */
#endif /* !ELIBACC */
#ifdef ELIBBAD
#define POSIX_ELIBBAD_DEF \
	{ "ELIBBAD", OBJ_posix_ELIBBAD, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Accessing a corrupted shared library" },
#if DeeInt_IsSmallInt(ELIBBAD)
#define OBJ_posix_ELIBBAD DeeInt_ForSmallInt(ELIBBAD)
#elif ELIBBAD >= 0
#if ELIBBAD <= 0x7fffull /* 15-bit */
#define OBJ_posix_ELIBBAD ((DeeObject *)&posix_ELIBBAD)
PRIVATE DEFINE_UINT15(posix_ELIBBAD, ELIBBAD);
#elif ELIBBAD <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ELIBBAD ((DeeObject *)&posix_ELIBBAD)
PRIVATE DEFINE_UINT30(posix_ELIBBAD, ELIBBAD);
#elif ELIBBAD <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ELIBBAD ((DeeObject *)&posix_ELIBBAD)
PRIVATE DEFINE_UINT45(posix_ELIBBAD, ELIBBAD);
#elif ELIBBAD <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ELIBBAD ((DeeObject *)&posix_ELIBBAD)
PRIVATE DEFINE_UINT60(posix_ELIBBAD, ELIBBAD);
#else
#define OBJ_posix_ELIBBAD ((DeeObject *)&posix_ELIBBAD)
PRIVATE DEFINE_UINT75(posix_ELIBBAD, ELIBBAD);
#endif
#else /* ELIBBAD >= 0 */
#if ELIBBAD >= -0x4000ll /* 15-bit */
#define OBJ_posix_ELIBBAD ((DeeObject *)&posix_ELIBBAD)
PRIVATE DEFINE_INT15(posix_ELIBBAD, ELIBBAD);
#elif ELIBBAD >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ELIBBAD ((DeeObject *)&posix_ELIBBAD)
PRIVATE DEFINE_INT30(posix_ELIBBAD, ELIBBAD);
#elif ELIBBAD >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ELIBBAD ((DeeObject *)&posix_ELIBBAD)
PRIVATE DEFINE_INT45(posix_ELIBBAD, ELIBBAD);
#elif ELIBBAD >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ELIBBAD ((DeeObject *)&posix_ELIBBAD)
PRIVATE DEFINE_INT60(posix_ELIBBAD, ELIBBAD);
#else
#define OBJ_posix_ELIBBAD ((DeeObject *)&posix_ELIBBAD)
PRIVATE DEFINE_INT75(posix_ELIBBAD, ELIBBAD);
#endif
#endif /* ELIBBAD < 0 */
#else /* ELIBBAD */
#define POSIX_ELIBBAD_DEF /* nothing */
#endif /* !ELIBBAD */
#ifdef ELIBSCN
#define POSIX_ELIBSCN_DEF \
	{ "ELIBSCN", OBJ_posix_ELIBSCN, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, ".lib section in a.out corrupted" },
#if DeeInt_IsSmallInt(ELIBSCN)
#define OBJ_posix_ELIBSCN DeeInt_ForSmallInt(ELIBSCN)
#elif ELIBSCN >= 0
#if ELIBSCN <= 0x7fffull /* 15-bit */
#define OBJ_posix_ELIBSCN ((DeeObject *)&posix_ELIBSCN)
PRIVATE DEFINE_UINT15(posix_ELIBSCN, ELIBSCN);
#elif ELIBSCN <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ELIBSCN ((DeeObject *)&posix_ELIBSCN)
PRIVATE DEFINE_UINT30(posix_ELIBSCN, ELIBSCN);
#elif ELIBSCN <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ELIBSCN ((DeeObject *)&posix_ELIBSCN)
PRIVATE DEFINE_UINT45(posix_ELIBSCN, ELIBSCN);
#elif ELIBSCN <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ELIBSCN ((DeeObject *)&posix_ELIBSCN)
PRIVATE DEFINE_UINT60(posix_ELIBSCN, ELIBSCN);
#else
#define OBJ_posix_ELIBSCN ((DeeObject *)&posix_ELIBSCN)
PRIVATE DEFINE_UINT75(posix_ELIBSCN, ELIBSCN);
#endif
#else /* ELIBSCN >= 0 */
#if ELIBSCN >= -0x4000ll /* 15-bit */
#define OBJ_posix_ELIBSCN ((DeeObject *)&posix_ELIBSCN)
PRIVATE DEFINE_INT15(posix_ELIBSCN, ELIBSCN);
#elif ELIBSCN >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ELIBSCN ((DeeObject *)&posix_ELIBSCN)
PRIVATE DEFINE_INT30(posix_ELIBSCN, ELIBSCN);
#elif ELIBSCN >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ELIBSCN ((DeeObject *)&posix_ELIBSCN)
PRIVATE DEFINE_INT45(posix_ELIBSCN, ELIBSCN);
#elif ELIBSCN >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ELIBSCN ((DeeObject *)&posix_ELIBSCN)
PRIVATE DEFINE_INT60(posix_ELIBSCN, ELIBSCN);
#else
#define OBJ_posix_ELIBSCN ((DeeObject *)&posix_ELIBSCN)
PRIVATE DEFINE_INT75(posix_ELIBSCN, ELIBSCN);
#endif
#endif /* ELIBSCN < 0 */
#else /* ELIBSCN */
#define POSIX_ELIBSCN_DEF /* nothing */
#endif /* !ELIBSCN */
#ifdef ELIBMAX
#define POSIX_ELIBMAX_DEF \
	{ "ELIBMAX", OBJ_posix_ELIBMAX, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Attempting to link in too many shared libraries" },
#if DeeInt_IsSmallInt(ELIBMAX)
#define OBJ_posix_ELIBMAX DeeInt_ForSmallInt(ELIBMAX)
#elif ELIBMAX >= 0
#if ELIBMAX <= 0x7fffull /* 15-bit */
#define OBJ_posix_ELIBMAX ((DeeObject *)&posix_ELIBMAX)
PRIVATE DEFINE_UINT15(posix_ELIBMAX, ELIBMAX);
#elif ELIBMAX <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ELIBMAX ((DeeObject *)&posix_ELIBMAX)
PRIVATE DEFINE_UINT30(posix_ELIBMAX, ELIBMAX);
#elif ELIBMAX <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ELIBMAX ((DeeObject *)&posix_ELIBMAX)
PRIVATE DEFINE_UINT45(posix_ELIBMAX, ELIBMAX);
#elif ELIBMAX <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ELIBMAX ((DeeObject *)&posix_ELIBMAX)
PRIVATE DEFINE_UINT60(posix_ELIBMAX, ELIBMAX);
#else
#define OBJ_posix_ELIBMAX ((DeeObject *)&posix_ELIBMAX)
PRIVATE DEFINE_UINT75(posix_ELIBMAX, ELIBMAX);
#endif
#else /* ELIBMAX >= 0 */
#if ELIBMAX >= -0x4000ll /* 15-bit */
#define OBJ_posix_ELIBMAX ((DeeObject *)&posix_ELIBMAX)
PRIVATE DEFINE_INT15(posix_ELIBMAX, ELIBMAX);
#elif ELIBMAX >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ELIBMAX ((DeeObject *)&posix_ELIBMAX)
PRIVATE DEFINE_INT30(posix_ELIBMAX, ELIBMAX);
#elif ELIBMAX >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ELIBMAX ((DeeObject *)&posix_ELIBMAX)
PRIVATE DEFINE_INT45(posix_ELIBMAX, ELIBMAX);
#elif ELIBMAX >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ELIBMAX ((DeeObject *)&posix_ELIBMAX)
PRIVATE DEFINE_INT60(posix_ELIBMAX, ELIBMAX);
#else
#define OBJ_posix_ELIBMAX ((DeeObject *)&posix_ELIBMAX)
PRIVATE DEFINE_INT75(posix_ELIBMAX, ELIBMAX);
#endif
#endif /* ELIBMAX < 0 */
#else /* ELIBMAX */
#define POSIX_ELIBMAX_DEF /* nothing */
#endif /* !ELIBMAX */
#ifdef ELIBEXEC
#define POSIX_ELIBEXEC_DEF \
	{ "ELIBEXEC", OBJ_posix_ELIBEXEC, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Cannot exec a shared library directly" },
#if DeeInt_IsSmallInt(ELIBEXEC)
#define OBJ_posix_ELIBEXEC DeeInt_ForSmallInt(ELIBEXEC)
#elif ELIBEXEC >= 0
#if ELIBEXEC <= 0x7fffull /* 15-bit */
#define OBJ_posix_ELIBEXEC ((DeeObject *)&posix_ELIBEXEC)
PRIVATE DEFINE_UINT15(posix_ELIBEXEC, ELIBEXEC);
#elif ELIBEXEC <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ELIBEXEC ((DeeObject *)&posix_ELIBEXEC)
PRIVATE DEFINE_UINT30(posix_ELIBEXEC, ELIBEXEC);
#elif ELIBEXEC <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ELIBEXEC ((DeeObject *)&posix_ELIBEXEC)
PRIVATE DEFINE_UINT45(posix_ELIBEXEC, ELIBEXEC);
#elif ELIBEXEC <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ELIBEXEC ((DeeObject *)&posix_ELIBEXEC)
PRIVATE DEFINE_UINT60(posix_ELIBEXEC, ELIBEXEC);
#else
#define OBJ_posix_ELIBEXEC ((DeeObject *)&posix_ELIBEXEC)
PRIVATE DEFINE_UINT75(posix_ELIBEXEC, ELIBEXEC);
#endif
#else /* ELIBEXEC >= 0 */
#if ELIBEXEC >= -0x4000ll /* 15-bit */
#define OBJ_posix_ELIBEXEC ((DeeObject *)&posix_ELIBEXEC)
PRIVATE DEFINE_INT15(posix_ELIBEXEC, ELIBEXEC);
#elif ELIBEXEC >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ELIBEXEC ((DeeObject *)&posix_ELIBEXEC)
PRIVATE DEFINE_INT30(posix_ELIBEXEC, ELIBEXEC);
#elif ELIBEXEC >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ELIBEXEC ((DeeObject *)&posix_ELIBEXEC)
PRIVATE DEFINE_INT45(posix_ELIBEXEC, ELIBEXEC);
#elif ELIBEXEC >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ELIBEXEC ((DeeObject *)&posix_ELIBEXEC)
PRIVATE DEFINE_INT60(posix_ELIBEXEC, ELIBEXEC);
#else
#define OBJ_posix_ELIBEXEC ((DeeObject *)&posix_ELIBEXEC)
PRIVATE DEFINE_INT75(posix_ELIBEXEC, ELIBEXEC);
#endif
#endif /* ELIBEXEC < 0 */
#else /* ELIBEXEC */
#define POSIX_ELIBEXEC_DEF /* nothing */
#endif /* !ELIBEXEC */
#ifdef EILSEQ
#define POSIX_EILSEQ_DEF \
	{ "EILSEQ", OBJ_posix_EILSEQ, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Illegal byte sequence" },
#if DeeInt_IsSmallInt(EILSEQ)
#define OBJ_posix_EILSEQ DeeInt_ForSmallInt(EILSEQ)
#elif EILSEQ >= 0
#if EILSEQ <= 0x7fffull /* 15-bit */
#define OBJ_posix_EILSEQ ((DeeObject *)&posix_EILSEQ)
PRIVATE DEFINE_UINT15(posix_EILSEQ, EILSEQ);
#elif EILSEQ <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EILSEQ ((DeeObject *)&posix_EILSEQ)
PRIVATE DEFINE_UINT30(posix_EILSEQ, EILSEQ);
#elif EILSEQ <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EILSEQ ((DeeObject *)&posix_EILSEQ)
PRIVATE DEFINE_UINT45(posix_EILSEQ, EILSEQ);
#elif EILSEQ <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EILSEQ ((DeeObject *)&posix_EILSEQ)
PRIVATE DEFINE_UINT60(posix_EILSEQ, EILSEQ);
#else
#define OBJ_posix_EILSEQ ((DeeObject *)&posix_EILSEQ)
PRIVATE DEFINE_UINT75(posix_EILSEQ, EILSEQ);
#endif
#else /* EILSEQ >= 0 */
#if EILSEQ >= -0x4000ll /* 15-bit */
#define OBJ_posix_EILSEQ ((DeeObject *)&posix_EILSEQ)
PRIVATE DEFINE_INT15(posix_EILSEQ, EILSEQ);
#elif EILSEQ >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EILSEQ ((DeeObject *)&posix_EILSEQ)
PRIVATE DEFINE_INT30(posix_EILSEQ, EILSEQ);
#elif EILSEQ >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EILSEQ ((DeeObject *)&posix_EILSEQ)
PRIVATE DEFINE_INT45(posix_EILSEQ, EILSEQ);
#elif EILSEQ >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EILSEQ ((DeeObject *)&posix_EILSEQ)
PRIVATE DEFINE_INT60(posix_EILSEQ, EILSEQ);
#else
#define OBJ_posix_EILSEQ ((DeeObject *)&posix_EILSEQ)
PRIVATE DEFINE_INT75(posix_EILSEQ, EILSEQ);
#endif
#endif /* EILSEQ < 0 */
#else /* EILSEQ */
#define POSIX_EILSEQ_DEF /* nothing */
#endif /* !EILSEQ */
#ifdef ERESTART
#define POSIX_ERESTART_DEF \
	{ "ERESTART", OBJ_posix_ERESTART, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Interrupted system call should be restarted" },
#if DeeInt_IsSmallInt(ERESTART)
#define OBJ_posix_ERESTART DeeInt_ForSmallInt(ERESTART)
#elif ERESTART >= 0
#if ERESTART <= 0x7fffull /* 15-bit */
#define OBJ_posix_ERESTART ((DeeObject *)&posix_ERESTART)
PRIVATE DEFINE_UINT15(posix_ERESTART, ERESTART);
#elif ERESTART <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ERESTART ((DeeObject *)&posix_ERESTART)
PRIVATE DEFINE_UINT30(posix_ERESTART, ERESTART);
#elif ERESTART <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ERESTART ((DeeObject *)&posix_ERESTART)
PRIVATE DEFINE_UINT45(posix_ERESTART, ERESTART);
#elif ERESTART <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ERESTART ((DeeObject *)&posix_ERESTART)
PRIVATE DEFINE_UINT60(posix_ERESTART, ERESTART);
#else
#define OBJ_posix_ERESTART ((DeeObject *)&posix_ERESTART)
PRIVATE DEFINE_UINT75(posix_ERESTART, ERESTART);
#endif
#else /* ERESTART >= 0 */
#if ERESTART >= -0x4000ll /* 15-bit */
#define OBJ_posix_ERESTART ((DeeObject *)&posix_ERESTART)
PRIVATE DEFINE_INT15(posix_ERESTART, ERESTART);
#elif ERESTART >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ERESTART ((DeeObject *)&posix_ERESTART)
PRIVATE DEFINE_INT30(posix_ERESTART, ERESTART);
#elif ERESTART >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ERESTART ((DeeObject *)&posix_ERESTART)
PRIVATE DEFINE_INT45(posix_ERESTART, ERESTART);
#elif ERESTART >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ERESTART ((DeeObject *)&posix_ERESTART)
PRIVATE DEFINE_INT60(posix_ERESTART, ERESTART);
#else
#define OBJ_posix_ERESTART ((DeeObject *)&posix_ERESTART)
PRIVATE DEFINE_INT75(posix_ERESTART, ERESTART);
#endif
#endif /* ERESTART < 0 */
#else /* ERESTART */
#define POSIX_ERESTART_DEF /* nothing */
#endif /* !ERESTART */
#ifdef ESTRPIPE
#define POSIX_ESTRPIPE_DEF \
	{ "ESTRPIPE", OBJ_posix_ESTRPIPE, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Streams pipe error" },
#if DeeInt_IsSmallInt(ESTRPIPE)
#define OBJ_posix_ESTRPIPE DeeInt_ForSmallInt(ESTRPIPE)
#elif ESTRPIPE >= 0
#if ESTRPIPE <= 0x7fffull /* 15-bit */
#define OBJ_posix_ESTRPIPE ((DeeObject *)&posix_ESTRPIPE)
PRIVATE DEFINE_UINT15(posix_ESTRPIPE, ESTRPIPE);
#elif ESTRPIPE <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ESTRPIPE ((DeeObject *)&posix_ESTRPIPE)
PRIVATE DEFINE_UINT30(posix_ESTRPIPE, ESTRPIPE);
#elif ESTRPIPE <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ESTRPIPE ((DeeObject *)&posix_ESTRPIPE)
PRIVATE DEFINE_UINT45(posix_ESTRPIPE, ESTRPIPE);
#elif ESTRPIPE <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ESTRPIPE ((DeeObject *)&posix_ESTRPIPE)
PRIVATE DEFINE_UINT60(posix_ESTRPIPE, ESTRPIPE);
#else
#define OBJ_posix_ESTRPIPE ((DeeObject *)&posix_ESTRPIPE)
PRIVATE DEFINE_UINT75(posix_ESTRPIPE, ESTRPIPE);
#endif
#else /* ESTRPIPE >= 0 */
#if ESTRPIPE >= -0x4000ll /* 15-bit */
#define OBJ_posix_ESTRPIPE ((DeeObject *)&posix_ESTRPIPE)
PRIVATE DEFINE_INT15(posix_ESTRPIPE, ESTRPIPE);
#elif ESTRPIPE >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ESTRPIPE ((DeeObject *)&posix_ESTRPIPE)
PRIVATE DEFINE_INT30(posix_ESTRPIPE, ESTRPIPE);
#elif ESTRPIPE >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ESTRPIPE ((DeeObject *)&posix_ESTRPIPE)
PRIVATE DEFINE_INT45(posix_ESTRPIPE, ESTRPIPE);
#elif ESTRPIPE >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ESTRPIPE ((DeeObject *)&posix_ESTRPIPE)
PRIVATE DEFINE_INT60(posix_ESTRPIPE, ESTRPIPE);
#else
#define OBJ_posix_ESTRPIPE ((DeeObject *)&posix_ESTRPIPE)
PRIVATE DEFINE_INT75(posix_ESTRPIPE, ESTRPIPE);
#endif
#endif /* ESTRPIPE < 0 */
#else /* ESTRPIPE */
#define POSIX_ESTRPIPE_DEF /* nothing */
#endif /* !ESTRPIPE */
#ifdef EUSERS
#define POSIX_EUSERS_DEF \
	{ "EUSERS", OBJ_posix_EUSERS, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Too many users" },
#if DeeInt_IsSmallInt(EUSERS)
#define OBJ_posix_EUSERS DeeInt_ForSmallInt(EUSERS)
#elif EUSERS >= 0
#if EUSERS <= 0x7fffull /* 15-bit */
#define OBJ_posix_EUSERS ((DeeObject *)&posix_EUSERS)
PRIVATE DEFINE_UINT15(posix_EUSERS, EUSERS);
#elif EUSERS <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EUSERS ((DeeObject *)&posix_EUSERS)
PRIVATE DEFINE_UINT30(posix_EUSERS, EUSERS);
#elif EUSERS <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EUSERS ((DeeObject *)&posix_EUSERS)
PRIVATE DEFINE_UINT45(posix_EUSERS, EUSERS);
#elif EUSERS <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EUSERS ((DeeObject *)&posix_EUSERS)
PRIVATE DEFINE_UINT60(posix_EUSERS, EUSERS);
#else
#define OBJ_posix_EUSERS ((DeeObject *)&posix_EUSERS)
PRIVATE DEFINE_UINT75(posix_EUSERS, EUSERS);
#endif
#else /* EUSERS >= 0 */
#if EUSERS >= -0x4000ll /* 15-bit */
#define OBJ_posix_EUSERS ((DeeObject *)&posix_EUSERS)
PRIVATE DEFINE_INT15(posix_EUSERS, EUSERS);
#elif EUSERS >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EUSERS ((DeeObject *)&posix_EUSERS)
PRIVATE DEFINE_INT30(posix_EUSERS, EUSERS);
#elif EUSERS >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EUSERS ((DeeObject *)&posix_EUSERS)
PRIVATE DEFINE_INT45(posix_EUSERS, EUSERS);
#elif EUSERS >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EUSERS ((DeeObject *)&posix_EUSERS)
PRIVATE DEFINE_INT60(posix_EUSERS, EUSERS);
#else
#define OBJ_posix_EUSERS ((DeeObject *)&posix_EUSERS)
PRIVATE DEFINE_INT75(posix_EUSERS, EUSERS);
#endif
#endif /* EUSERS < 0 */
#else /* EUSERS */
#define POSIX_EUSERS_DEF /* nothing */
#endif /* !EUSERS */
#ifdef ENOTSOCK
#define POSIX_ENOTSOCK_DEF \
	{ "ENOTSOCK", OBJ_posix_ENOTSOCK, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Socket operation on non-socket" },
#if DeeInt_IsSmallInt(ENOTSOCK)
#define OBJ_posix_ENOTSOCK DeeInt_ForSmallInt(ENOTSOCK)
#elif ENOTSOCK >= 0
#if ENOTSOCK <= 0x7fffull /* 15-bit */
#define OBJ_posix_ENOTSOCK ((DeeObject *)&posix_ENOTSOCK)
PRIVATE DEFINE_UINT15(posix_ENOTSOCK, ENOTSOCK);
#elif ENOTSOCK <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ENOTSOCK ((DeeObject *)&posix_ENOTSOCK)
PRIVATE DEFINE_UINT30(posix_ENOTSOCK, ENOTSOCK);
#elif ENOTSOCK <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ENOTSOCK ((DeeObject *)&posix_ENOTSOCK)
PRIVATE DEFINE_UINT45(posix_ENOTSOCK, ENOTSOCK);
#elif ENOTSOCK <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ENOTSOCK ((DeeObject *)&posix_ENOTSOCK)
PRIVATE DEFINE_UINT60(posix_ENOTSOCK, ENOTSOCK);
#else
#define OBJ_posix_ENOTSOCK ((DeeObject *)&posix_ENOTSOCK)
PRIVATE DEFINE_UINT75(posix_ENOTSOCK, ENOTSOCK);
#endif
#else /* ENOTSOCK >= 0 */
#if ENOTSOCK >= -0x4000ll /* 15-bit */
#define OBJ_posix_ENOTSOCK ((DeeObject *)&posix_ENOTSOCK)
PRIVATE DEFINE_INT15(posix_ENOTSOCK, ENOTSOCK);
#elif ENOTSOCK >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ENOTSOCK ((DeeObject *)&posix_ENOTSOCK)
PRIVATE DEFINE_INT30(posix_ENOTSOCK, ENOTSOCK);
#elif ENOTSOCK >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ENOTSOCK ((DeeObject *)&posix_ENOTSOCK)
PRIVATE DEFINE_INT45(posix_ENOTSOCK, ENOTSOCK);
#elif ENOTSOCK >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ENOTSOCK ((DeeObject *)&posix_ENOTSOCK)
PRIVATE DEFINE_INT60(posix_ENOTSOCK, ENOTSOCK);
#else
#define OBJ_posix_ENOTSOCK ((DeeObject *)&posix_ENOTSOCK)
PRIVATE DEFINE_INT75(posix_ENOTSOCK, ENOTSOCK);
#endif
#endif /* ENOTSOCK < 0 */
#else /* ENOTSOCK */
#define POSIX_ENOTSOCK_DEF /* nothing */
#endif /* !ENOTSOCK */
#ifdef EDESTADDRREQ
#define POSIX_EDESTADDRREQ_DEF \
	{ "EDESTADDRREQ", OBJ_posix_EDESTADDRREQ, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Destination address required" },
#if DeeInt_IsSmallInt(EDESTADDRREQ)
#define OBJ_posix_EDESTADDRREQ DeeInt_ForSmallInt(EDESTADDRREQ)
#elif EDESTADDRREQ >= 0
#if EDESTADDRREQ <= 0x7fffull /* 15-bit */
#define OBJ_posix_EDESTADDRREQ ((DeeObject *)&posix_EDESTADDRREQ)
PRIVATE DEFINE_UINT15(posix_EDESTADDRREQ, EDESTADDRREQ);
#elif EDESTADDRREQ <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EDESTADDRREQ ((DeeObject *)&posix_EDESTADDRREQ)
PRIVATE DEFINE_UINT30(posix_EDESTADDRREQ, EDESTADDRREQ);
#elif EDESTADDRREQ <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EDESTADDRREQ ((DeeObject *)&posix_EDESTADDRREQ)
PRIVATE DEFINE_UINT45(posix_EDESTADDRREQ, EDESTADDRREQ);
#elif EDESTADDRREQ <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EDESTADDRREQ ((DeeObject *)&posix_EDESTADDRREQ)
PRIVATE DEFINE_UINT60(posix_EDESTADDRREQ, EDESTADDRREQ);
#else
#define OBJ_posix_EDESTADDRREQ ((DeeObject *)&posix_EDESTADDRREQ)
PRIVATE DEFINE_UINT75(posix_EDESTADDRREQ, EDESTADDRREQ);
#endif
#else /* EDESTADDRREQ >= 0 */
#if EDESTADDRREQ >= -0x4000ll /* 15-bit */
#define OBJ_posix_EDESTADDRREQ ((DeeObject *)&posix_EDESTADDRREQ)
PRIVATE DEFINE_INT15(posix_EDESTADDRREQ, EDESTADDRREQ);
#elif EDESTADDRREQ >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EDESTADDRREQ ((DeeObject *)&posix_EDESTADDRREQ)
PRIVATE DEFINE_INT30(posix_EDESTADDRREQ, EDESTADDRREQ);
#elif EDESTADDRREQ >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EDESTADDRREQ ((DeeObject *)&posix_EDESTADDRREQ)
PRIVATE DEFINE_INT45(posix_EDESTADDRREQ, EDESTADDRREQ);
#elif EDESTADDRREQ >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EDESTADDRREQ ((DeeObject *)&posix_EDESTADDRREQ)
PRIVATE DEFINE_INT60(posix_EDESTADDRREQ, EDESTADDRREQ);
#else
#define OBJ_posix_EDESTADDRREQ ((DeeObject *)&posix_EDESTADDRREQ)
PRIVATE DEFINE_INT75(posix_EDESTADDRREQ, EDESTADDRREQ);
#endif
#endif /* EDESTADDRREQ < 0 */
#else /* EDESTADDRREQ */
#define POSIX_EDESTADDRREQ_DEF /* nothing */
#endif /* !EDESTADDRREQ */
#ifdef EMSGSIZE
#define POSIX_EMSGSIZE_DEF \
	{ "EMSGSIZE", OBJ_posix_EMSGSIZE, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Message too long" },
#if DeeInt_IsSmallInt(EMSGSIZE)
#define OBJ_posix_EMSGSIZE DeeInt_ForSmallInt(EMSGSIZE)
#elif EMSGSIZE >= 0
#if EMSGSIZE <= 0x7fffull /* 15-bit */
#define OBJ_posix_EMSGSIZE ((DeeObject *)&posix_EMSGSIZE)
PRIVATE DEFINE_UINT15(posix_EMSGSIZE, EMSGSIZE);
#elif EMSGSIZE <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EMSGSIZE ((DeeObject *)&posix_EMSGSIZE)
PRIVATE DEFINE_UINT30(posix_EMSGSIZE, EMSGSIZE);
#elif EMSGSIZE <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EMSGSIZE ((DeeObject *)&posix_EMSGSIZE)
PRIVATE DEFINE_UINT45(posix_EMSGSIZE, EMSGSIZE);
#elif EMSGSIZE <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EMSGSIZE ((DeeObject *)&posix_EMSGSIZE)
PRIVATE DEFINE_UINT60(posix_EMSGSIZE, EMSGSIZE);
#else
#define OBJ_posix_EMSGSIZE ((DeeObject *)&posix_EMSGSIZE)
PRIVATE DEFINE_UINT75(posix_EMSGSIZE, EMSGSIZE);
#endif
#else /* EMSGSIZE >= 0 */
#if EMSGSIZE >= -0x4000ll /* 15-bit */
#define OBJ_posix_EMSGSIZE ((DeeObject *)&posix_EMSGSIZE)
PRIVATE DEFINE_INT15(posix_EMSGSIZE, EMSGSIZE);
#elif EMSGSIZE >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EMSGSIZE ((DeeObject *)&posix_EMSGSIZE)
PRIVATE DEFINE_INT30(posix_EMSGSIZE, EMSGSIZE);
#elif EMSGSIZE >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EMSGSIZE ((DeeObject *)&posix_EMSGSIZE)
PRIVATE DEFINE_INT45(posix_EMSGSIZE, EMSGSIZE);
#elif EMSGSIZE >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EMSGSIZE ((DeeObject *)&posix_EMSGSIZE)
PRIVATE DEFINE_INT60(posix_EMSGSIZE, EMSGSIZE);
#else
#define OBJ_posix_EMSGSIZE ((DeeObject *)&posix_EMSGSIZE)
PRIVATE DEFINE_INT75(posix_EMSGSIZE, EMSGSIZE);
#endif
#endif /* EMSGSIZE < 0 */
#else /* EMSGSIZE */
#define POSIX_EMSGSIZE_DEF /* nothing */
#endif /* !EMSGSIZE */
#ifdef EPROTOTYPE
#define POSIX_EPROTOTYPE_DEF \
	{ "EPROTOTYPE", OBJ_posix_EPROTOTYPE, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Protocol wrong type for socket" },
#if DeeInt_IsSmallInt(EPROTOTYPE)
#define OBJ_posix_EPROTOTYPE DeeInt_ForSmallInt(EPROTOTYPE)
#elif EPROTOTYPE >= 0
#if EPROTOTYPE <= 0x7fffull /* 15-bit */
#define OBJ_posix_EPROTOTYPE ((DeeObject *)&posix_EPROTOTYPE)
PRIVATE DEFINE_UINT15(posix_EPROTOTYPE, EPROTOTYPE);
#elif EPROTOTYPE <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EPROTOTYPE ((DeeObject *)&posix_EPROTOTYPE)
PRIVATE DEFINE_UINT30(posix_EPROTOTYPE, EPROTOTYPE);
#elif EPROTOTYPE <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EPROTOTYPE ((DeeObject *)&posix_EPROTOTYPE)
PRIVATE DEFINE_UINT45(posix_EPROTOTYPE, EPROTOTYPE);
#elif EPROTOTYPE <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EPROTOTYPE ((DeeObject *)&posix_EPROTOTYPE)
PRIVATE DEFINE_UINT60(posix_EPROTOTYPE, EPROTOTYPE);
#else
#define OBJ_posix_EPROTOTYPE ((DeeObject *)&posix_EPROTOTYPE)
PRIVATE DEFINE_UINT75(posix_EPROTOTYPE, EPROTOTYPE);
#endif
#else /* EPROTOTYPE >= 0 */
#if EPROTOTYPE >= -0x4000ll /* 15-bit */
#define OBJ_posix_EPROTOTYPE ((DeeObject *)&posix_EPROTOTYPE)
PRIVATE DEFINE_INT15(posix_EPROTOTYPE, EPROTOTYPE);
#elif EPROTOTYPE >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EPROTOTYPE ((DeeObject *)&posix_EPROTOTYPE)
PRIVATE DEFINE_INT30(posix_EPROTOTYPE, EPROTOTYPE);
#elif EPROTOTYPE >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EPROTOTYPE ((DeeObject *)&posix_EPROTOTYPE)
PRIVATE DEFINE_INT45(posix_EPROTOTYPE, EPROTOTYPE);
#elif EPROTOTYPE >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EPROTOTYPE ((DeeObject *)&posix_EPROTOTYPE)
PRIVATE DEFINE_INT60(posix_EPROTOTYPE, EPROTOTYPE);
#else
#define OBJ_posix_EPROTOTYPE ((DeeObject *)&posix_EPROTOTYPE)
PRIVATE DEFINE_INT75(posix_EPROTOTYPE, EPROTOTYPE);
#endif
#endif /* EPROTOTYPE < 0 */
#else /* EPROTOTYPE */
#define POSIX_EPROTOTYPE_DEF /* nothing */
#endif /* !EPROTOTYPE */
#ifdef ENOPROTOOPT
#define POSIX_ENOPROTOOPT_DEF \
	{ "ENOPROTOOPT", OBJ_posix_ENOPROTOOPT, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Protocol not available" },
#if DeeInt_IsSmallInt(ENOPROTOOPT)
#define OBJ_posix_ENOPROTOOPT DeeInt_ForSmallInt(ENOPROTOOPT)
#elif ENOPROTOOPT >= 0
#if ENOPROTOOPT <= 0x7fffull /* 15-bit */
#define OBJ_posix_ENOPROTOOPT ((DeeObject *)&posix_ENOPROTOOPT)
PRIVATE DEFINE_UINT15(posix_ENOPROTOOPT, ENOPROTOOPT);
#elif ENOPROTOOPT <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ENOPROTOOPT ((DeeObject *)&posix_ENOPROTOOPT)
PRIVATE DEFINE_UINT30(posix_ENOPROTOOPT, ENOPROTOOPT);
#elif ENOPROTOOPT <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ENOPROTOOPT ((DeeObject *)&posix_ENOPROTOOPT)
PRIVATE DEFINE_UINT45(posix_ENOPROTOOPT, ENOPROTOOPT);
#elif ENOPROTOOPT <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ENOPROTOOPT ((DeeObject *)&posix_ENOPROTOOPT)
PRIVATE DEFINE_UINT60(posix_ENOPROTOOPT, ENOPROTOOPT);
#else
#define OBJ_posix_ENOPROTOOPT ((DeeObject *)&posix_ENOPROTOOPT)
PRIVATE DEFINE_UINT75(posix_ENOPROTOOPT, ENOPROTOOPT);
#endif
#else /* ENOPROTOOPT >= 0 */
#if ENOPROTOOPT >= -0x4000ll /* 15-bit */
#define OBJ_posix_ENOPROTOOPT ((DeeObject *)&posix_ENOPROTOOPT)
PRIVATE DEFINE_INT15(posix_ENOPROTOOPT, ENOPROTOOPT);
#elif ENOPROTOOPT >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ENOPROTOOPT ((DeeObject *)&posix_ENOPROTOOPT)
PRIVATE DEFINE_INT30(posix_ENOPROTOOPT, ENOPROTOOPT);
#elif ENOPROTOOPT >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ENOPROTOOPT ((DeeObject *)&posix_ENOPROTOOPT)
PRIVATE DEFINE_INT45(posix_ENOPROTOOPT, ENOPROTOOPT);
#elif ENOPROTOOPT >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ENOPROTOOPT ((DeeObject *)&posix_ENOPROTOOPT)
PRIVATE DEFINE_INT60(posix_ENOPROTOOPT, ENOPROTOOPT);
#else
#define OBJ_posix_ENOPROTOOPT ((DeeObject *)&posix_ENOPROTOOPT)
PRIVATE DEFINE_INT75(posix_ENOPROTOOPT, ENOPROTOOPT);
#endif
#endif /* ENOPROTOOPT < 0 */
#else /* ENOPROTOOPT */
#define POSIX_ENOPROTOOPT_DEF /* nothing */
#endif /* !ENOPROTOOPT */
#ifdef EPROTONOSUPPORT
#define POSIX_EPROTONOSUPPORT_DEF \
	{ "EPROTONOSUPPORT", OBJ_posix_EPROTONOSUPPORT, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Protocol not supported" },
#if DeeInt_IsSmallInt(EPROTONOSUPPORT)
#define OBJ_posix_EPROTONOSUPPORT DeeInt_ForSmallInt(EPROTONOSUPPORT)
#elif EPROTONOSUPPORT >= 0
#if EPROTONOSUPPORT <= 0x7fffull /* 15-bit */
#define OBJ_posix_EPROTONOSUPPORT ((DeeObject *)&posix_EPROTONOSUPPORT)
PRIVATE DEFINE_UINT15(posix_EPROTONOSUPPORT, EPROTONOSUPPORT);
#elif EPROTONOSUPPORT <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EPROTONOSUPPORT ((DeeObject *)&posix_EPROTONOSUPPORT)
PRIVATE DEFINE_UINT30(posix_EPROTONOSUPPORT, EPROTONOSUPPORT);
#elif EPROTONOSUPPORT <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EPROTONOSUPPORT ((DeeObject *)&posix_EPROTONOSUPPORT)
PRIVATE DEFINE_UINT45(posix_EPROTONOSUPPORT, EPROTONOSUPPORT);
#elif EPROTONOSUPPORT <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EPROTONOSUPPORT ((DeeObject *)&posix_EPROTONOSUPPORT)
PRIVATE DEFINE_UINT60(posix_EPROTONOSUPPORT, EPROTONOSUPPORT);
#else
#define OBJ_posix_EPROTONOSUPPORT ((DeeObject *)&posix_EPROTONOSUPPORT)
PRIVATE DEFINE_UINT75(posix_EPROTONOSUPPORT, EPROTONOSUPPORT);
#endif
#else /* EPROTONOSUPPORT >= 0 */
#if EPROTONOSUPPORT >= -0x4000ll /* 15-bit */
#define OBJ_posix_EPROTONOSUPPORT ((DeeObject *)&posix_EPROTONOSUPPORT)
PRIVATE DEFINE_INT15(posix_EPROTONOSUPPORT, EPROTONOSUPPORT);
#elif EPROTONOSUPPORT >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EPROTONOSUPPORT ((DeeObject *)&posix_EPROTONOSUPPORT)
PRIVATE DEFINE_INT30(posix_EPROTONOSUPPORT, EPROTONOSUPPORT);
#elif EPROTONOSUPPORT >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EPROTONOSUPPORT ((DeeObject *)&posix_EPROTONOSUPPORT)
PRIVATE DEFINE_INT45(posix_EPROTONOSUPPORT, EPROTONOSUPPORT);
#elif EPROTONOSUPPORT >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EPROTONOSUPPORT ((DeeObject *)&posix_EPROTONOSUPPORT)
PRIVATE DEFINE_INT60(posix_EPROTONOSUPPORT, EPROTONOSUPPORT);
#else
#define OBJ_posix_EPROTONOSUPPORT ((DeeObject *)&posix_EPROTONOSUPPORT)
PRIVATE DEFINE_INT75(posix_EPROTONOSUPPORT, EPROTONOSUPPORT);
#endif
#endif /* EPROTONOSUPPORT < 0 */
#else /* EPROTONOSUPPORT */
#define POSIX_EPROTONOSUPPORT_DEF /* nothing */
#endif /* !EPROTONOSUPPORT */
#ifdef ESOCKTNOSUPPORT
#define POSIX_ESOCKTNOSUPPORT_DEF \
	{ "ESOCKTNOSUPPORT", OBJ_posix_ESOCKTNOSUPPORT, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Socket type not supported" },
#if DeeInt_IsSmallInt(ESOCKTNOSUPPORT)
#define OBJ_posix_ESOCKTNOSUPPORT DeeInt_ForSmallInt(ESOCKTNOSUPPORT)
#elif ESOCKTNOSUPPORT >= 0
#if ESOCKTNOSUPPORT <= 0x7fffull /* 15-bit */
#define OBJ_posix_ESOCKTNOSUPPORT ((DeeObject *)&posix_ESOCKTNOSUPPORT)
PRIVATE DEFINE_UINT15(posix_ESOCKTNOSUPPORT, ESOCKTNOSUPPORT);
#elif ESOCKTNOSUPPORT <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ESOCKTNOSUPPORT ((DeeObject *)&posix_ESOCKTNOSUPPORT)
PRIVATE DEFINE_UINT30(posix_ESOCKTNOSUPPORT, ESOCKTNOSUPPORT);
#elif ESOCKTNOSUPPORT <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ESOCKTNOSUPPORT ((DeeObject *)&posix_ESOCKTNOSUPPORT)
PRIVATE DEFINE_UINT45(posix_ESOCKTNOSUPPORT, ESOCKTNOSUPPORT);
#elif ESOCKTNOSUPPORT <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ESOCKTNOSUPPORT ((DeeObject *)&posix_ESOCKTNOSUPPORT)
PRIVATE DEFINE_UINT60(posix_ESOCKTNOSUPPORT, ESOCKTNOSUPPORT);
#else
#define OBJ_posix_ESOCKTNOSUPPORT ((DeeObject *)&posix_ESOCKTNOSUPPORT)
PRIVATE DEFINE_UINT75(posix_ESOCKTNOSUPPORT, ESOCKTNOSUPPORT);
#endif
#else /* ESOCKTNOSUPPORT >= 0 */
#if ESOCKTNOSUPPORT >= -0x4000ll /* 15-bit */
#define OBJ_posix_ESOCKTNOSUPPORT ((DeeObject *)&posix_ESOCKTNOSUPPORT)
PRIVATE DEFINE_INT15(posix_ESOCKTNOSUPPORT, ESOCKTNOSUPPORT);
#elif ESOCKTNOSUPPORT >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ESOCKTNOSUPPORT ((DeeObject *)&posix_ESOCKTNOSUPPORT)
PRIVATE DEFINE_INT30(posix_ESOCKTNOSUPPORT, ESOCKTNOSUPPORT);
#elif ESOCKTNOSUPPORT >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ESOCKTNOSUPPORT ((DeeObject *)&posix_ESOCKTNOSUPPORT)
PRIVATE DEFINE_INT45(posix_ESOCKTNOSUPPORT, ESOCKTNOSUPPORT);
#elif ESOCKTNOSUPPORT >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ESOCKTNOSUPPORT ((DeeObject *)&posix_ESOCKTNOSUPPORT)
PRIVATE DEFINE_INT60(posix_ESOCKTNOSUPPORT, ESOCKTNOSUPPORT);
#else
#define OBJ_posix_ESOCKTNOSUPPORT ((DeeObject *)&posix_ESOCKTNOSUPPORT)
PRIVATE DEFINE_INT75(posix_ESOCKTNOSUPPORT, ESOCKTNOSUPPORT);
#endif
#endif /* ESOCKTNOSUPPORT < 0 */
#else /* ESOCKTNOSUPPORT */
#define POSIX_ESOCKTNOSUPPORT_DEF /* nothing */
#endif /* !ESOCKTNOSUPPORT */
#ifdef EOPNOTSUPP
#define POSIX_EOPNOTSUPP_DEF \
	{ "EOPNOTSUPP", OBJ_posix_EOPNOTSUPP, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Operation not supported on transport endpoint" },
#if DeeInt_IsSmallInt(EOPNOTSUPP)
#define OBJ_posix_EOPNOTSUPP DeeInt_ForSmallInt(EOPNOTSUPP)
#elif EOPNOTSUPP >= 0
#if EOPNOTSUPP <= 0x7fffull /* 15-bit */
#define OBJ_posix_EOPNOTSUPP ((DeeObject *)&posix_EOPNOTSUPP)
PRIVATE DEFINE_UINT15(posix_EOPNOTSUPP, EOPNOTSUPP);
#elif EOPNOTSUPP <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EOPNOTSUPP ((DeeObject *)&posix_EOPNOTSUPP)
PRIVATE DEFINE_UINT30(posix_EOPNOTSUPP, EOPNOTSUPP);
#elif EOPNOTSUPP <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EOPNOTSUPP ((DeeObject *)&posix_EOPNOTSUPP)
PRIVATE DEFINE_UINT45(posix_EOPNOTSUPP, EOPNOTSUPP);
#elif EOPNOTSUPP <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EOPNOTSUPP ((DeeObject *)&posix_EOPNOTSUPP)
PRIVATE DEFINE_UINT60(posix_EOPNOTSUPP, EOPNOTSUPP);
#else
#define OBJ_posix_EOPNOTSUPP ((DeeObject *)&posix_EOPNOTSUPP)
PRIVATE DEFINE_UINT75(posix_EOPNOTSUPP, EOPNOTSUPP);
#endif
#else /* EOPNOTSUPP >= 0 */
#if EOPNOTSUPP >= -0x4000ll /* 15-bit */
#define OBJ_posix_EOPNOTSUPP ((DeeObject *)&posix_EOPNOTSUPP)
PRIVATE DEFINE_INT15(posix_EOPNOTSUPP, EOPNOTSUPP);
#elif EOPNOTSUPP >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EOPNOTSUPP ((DeeObject *)&posix_EOPNOTSUPP)
PRIVATE DEFINE_INT30(posix_EOPNOTSUPP, EOPNOTSUPP);
#elif EOPNOTSUPP >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EOPNOTSUPP ((DeeObject *)&posix_EOPNOTSUPP)
PRIVATE DEFINE_INT45(posix_EOPNOTSUPP, EOPNOTSUPP);
#elif EOPNOTSUPP >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EOPNOTSUPP ((DeeObject *)&posix_EOPNOTSUPP)
PRIVATE DEFINE_INT60(posix_EOPNOTSUPP, EOPNOTSUPP);
#else
#define OBJ_posix_EOPNOTSUPP ((DeeObject *)&posix_EOPNOTSUPP)
PRIVATE DEFINE_INT75(posix_EOPNOTSUPP, EOPNOTSUPP);
#endif
#endif /* EOPNOTSUPP < 0 */
#else /* EOPNOTSUPP */
#define POSIX_EOPNOTSUPP_DEF /* nothing */
#endif /* !EOPNOTSUPP */
#ifdef EPFNOSUPPORT
#define POSIX_EPFNOSUPPORT_DEF \
	{ "EPFNOSUPPORT", OBJ_posix_EPFNOSUPPORT, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Protocol family not supported" },
#if DeeInt_IsSmallInt(EPFNOSUPPORT)
#define OBJ_posix_EPFNOSUPPORT DeeInt_ForSmallInt(EPFNOSUPPORT)
#elif EPFNOSUPPORT >= 0
#if EPFNOSUPPORT <= 0x7fffull /* 15-bit */
#define OBJ_posix_EPFNOSUPPORT ((DeeObject *)&posix_EPFNOSUPPORT)
PRIVATE DEFINE_UINT15(posix_EPFNOSUPPORT, EPFNOSUPPORT);
#elif EPFNOSUPPORT <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EPFNOSUPPORT ((DeeObject *)&posix_EPFNOSUPPORT)
PRIVATE DEFINE_UINT30(posix_EPFNOSUPPORT, EPFNOSUPPORT);
#elif EPFNOSUPPORT <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EPFNOSUPPORT ((DeeObject *)&posix_EPFNOSUPPORT)
PRIVATE DEFINE_UINT45(posix_EPFNOSUPPORT, EPFNOSUPPORT);
#elif EPFNOSUPPORT <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EPFNOSUPPORT ((DeeObject *)&posix_EPFNOSUPPORT)
PRIVATE DEFINE_UINT60(posix_EPFNOSUPPORT, EPFNOSUPPORT);
#else
#define OBJ_posix_EPFNOSUPPORT ((DeeObject *)&posix_EPFNOSUPPORT)
PRIVATE DEFINE_UINT75(posix_EPFNOSUPPORT, EPFNOSUPPORT);
#endif
#else /* EPFNOSUPPORT >= 0 */
#if EPFNOSUPPORT >= -0x4000ll /* 15-bit */
#define OBJ_posix_EPFNOSUPPORT ((DeeObject *)&posix_EPFNOSUPPORT)
PRIVATE DEFINE_INT15(posix_EPFNOSUPPORT, EPFNOSUPPORT);
#elif EPFNOSUPPORT >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EPFNOSUPPORT ((DeeObject *)&posix_EPFNOSUPPORT)
PRIVATE DEFINE_INT30(posix_EPFNOSUPPORT, EPFNOSUPPORT);
#elif EPFNOSUPPORT >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EPFNOSUPPORT ((DeeObject *)&posix_EPFNOSUPPORT)
PRIVATE DEFINE_INT45(posix_EPFNOSUPPORT, EPFNOSUPPORT);
#elif EPFNOSUPPORT >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EPFNOSUPPORT ((DeeObject *)&posix_EPFNOSUPPORT)
PRIVATE DEFINE_INT60(posix_EPFNOSUPPORT, EPFNOSUPPORT);
#else
#define OBJ_posix_EPFNOSUPPORT ((DeeObject *)&posix_EPFNOSUPPORT)
PRIVATE DEFINE_INT75(posix_EPFNOSUPPORT, EPFNOSUPPORT);
#endif
#endif /* EPFNOSUPPORT < 0 */
#else /* EPFNOSUPPORT */
#define POSIX_EPFNOSUPPORT_DEF /* nothing */
#endif /* !EPFNOSUPPORT */
#ifdef EAFNOSUPPORT
#define POSIX_EAFNOSUPPORT_DEF \
	{ "EAFNOSUPPORT", OBJ_posix_EAFNOSUPPORT, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Address family not supported by protocol" },
#if DeeInt_IsSmallInt(EAFNOSUPPORT)
#define OBJ_posix_EAFNOSUPPORT DeeInt_ForSmallInt(EAFNOSUPPORT)
#elif EAFNOSUPPORT >= 0
#if EAFNOSUPPORT <= 0x7fffull /* 15-bit */
#define OBJ_posix_EAFNOSUPPORT ((DeeObject *)&posix_EAFNOSUPPORT)
PRIVATE DEFINE_UINT15(posix_EAFNOSUPPORT, EAFNOSUPPORT);
#elif EAFNOSUPPORT <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EAFNOSUPPORT ((DeeObject *)&posix_EAFNOSUPPORT)
PRIVATE DEFINE_UINT30(posix_EAFNOSUPPORT, EAFNOSUPPORT);
#elif EAFNOSUPPORT <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EAFNOSUPPORT ((DeeObject *)&posix_EAFNOSUPPORT)
PRIVATE DEFINE_UINT45(posix_EAFNOSUPPORT, EAFNOSUPPORT);
#elif EAFNOSUPPORT <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EAFNOSUPPORT ((DeeObject *)&posix_EAFNOSUPPORT)
PRIVATE DEFINE_UINT60(posix_EAFNOSUPPORT, EAFNOSUPPORT);
#else
#define OBJ_posix_EAFNOSUPPORT ((DeeObject *)&posix_EAFNOSUPPORT)
PRIVATE DEFINE_UINT75(posix_EAFNOSUPPORT, EAFNOSUPPORT);
#endif
#else /* EAFNOSUPPORT >= 0 */
#if EAFNOSUPPORT >= -0x4000ll /* 15-bit */
#define OBJ_posix_EAFNOSUPPORT ((DeeObject *)&posix_EAFNOSUPPORT)
PRIVATE DEFINE_INT15(posix_EAFNOSUPPORT, EAFNOSUPPORT);
#elif EAFNOSUPPORT >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EAFNOSUPPORT ((DeeObject *)&posix_EAFNOSUPPORT)
PRIVATE DEFINE_INT30(posix_EAFNOSUPPORT, EAFNOSUPPORT);
#elif EAFNOSUPPORT >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EAFNOSUPPORT ((DeeObject *)&posix_EAFNOSUPPORT)
PRIVATE DEFINE_INT45(posix_EAFNOSUPPORT, EAFNOSUPPORT);
#elif EAFNOSUPPORT >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EAFNOSUPPORT ((DeeObject *)&posix_EAFNOSUPPORT)
PRIVATE DEFINE_INT60(posix_EAFNOSUPPORT, EAFNOSUPPORT);
#else
#define OBJ_posix_EAFNOSUPPORT ((DeeObject *)&posix_EAFNOSUPPORT)
PRIVATE DEFINE_INT75(posix_EAFNOSUPPORT, EAFNOSUPPORT);
#endif
#endif /* EAFNOSUPPORT < 0 */
#else /* EAFNOSUPPORT */
#define POSIX_EAFNOSUPPORT_DEF /* nothing */
#endif /* !EAFNOSUPPORT */
#ifdef EADDRINUSE
#define POSIX_EADDRINUSE_DEF \
	{ "EADDRINUSE", OBJ_posix_EADDRINUSE, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Address already in use" },
#if DeeInt_IsSmallInt(EADDRINUSE)
#define OBJ_posix_EADDRINUSE DeeInt_ForSmallInt(EADDRINUSE)
#elif EADDRINUSE >= 0
#if EADDRINUSE <= 0x7fffull /* 15-bit */
#define OBJ_posix_EADDRINUSE ((DeeObject *)&posix_EADDRINUSE)
PRIVATE DEFINE_UINT15(posix_EADDRINUSE, EADDRINUSE);
#elif EADDRINUSE <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EADDRINUSE ((DeeObject *)&posix_EADDRINUSE)
PRIVATE DEFINE_UINT30(posix_EADDRINUSE, EADDRINUSE);
#elif EADDRINUSE <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EADDRINUSE ((DeeObject *)&posix_EADDRINUSE)
PRIVATE DEFINE_UINT45(posix_EADDRINUSE, EADDRINUSE);
#elif EADDRINUSE <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EADDRINUSE ((DeeObject *)&posix_EADDRINUSE)
PRIVATE DEFINE_UINT60(posix_EADDRINUSE, EADDRINUSE);
#else
#define OBJ_posix_EADDRINUSE ((DeeObject *)&posix_EADDRINUSE)
PRIVATE DEFINE_UINT75(posix_EADDRINUSE, EADDRINUSE);
#endif
#else /* EADDRINUSE >= 0 */
#if EADDRINUSE >= -0x4000ll /* 15-bit */
#define OBJ_posix_EADDRINUSE ((DeeObject *)&posix_EADDRINUSE)
PRIVATE DEFINE_INT15(posix_EADDRINUSE, EADDRINUSE);
#elif EADDRINUSE >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EADDRINUSE ((DeeObject *)&posix_EADDRINUSE)
PRIVATE DEFINE_INT30(posix_EADDRINUSE, EADDRINUSE);
#elif EADDRINUSE >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EADDRINUSE ((DeeObject *)&posix_EADDRINUSE)
PRIVATE DEFINE_INT45(posix_EADDRINUSE, EADDRINUSE);
#elif EADDRINUSE >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EADDRINUSE ((DeeObject *)&posix_EADDRINUSE)
PRIVATE DEFINE_INT60(posix_EADDRINUSE, EADDRINUSE);
#else
#define OBJ_posix_EADDRINUSE ((DeeObject *)&posix_EADDRINUSE)
PRIVATE DEFINE_INT75(posix_EADDRINUSE, EADDRINUSE);
#endif
#endif /* EADDRINUSE < 0 */
#else /* EADDRINUSE */
#define POSIX_EADDRINUSE_DEF /* nothing */
#endif /* !EADDRINUSE */
#ifdef EADDRNOTAVAIL
#define POSIX_EADDRNOTAVAIL_DEF \
	{ "EADDRNOTAVAIL", OBJ_posix_EADDRNOTAVAIL, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Cannot assign requested address" },
#if DeeInt_IsSmallInt(EADDRNOTAVAIL)
#define OBJ_posix_EADDRNOTAVAIL DeeInt_ForSmallInt(EADDRNOTAVAIL)
#elif EADDRNOTAVAIL >= 0
#if EADDRNOTAVAIL <= 0x7fffull /* 15-bit */
#define OBJ_posix_EADDRNOTAVAIL ((DeeObject *)&posix_EADDRNOTAVAIL)
PRIVATE DEFINE_UINT15(posix_EADDRNOTAVAIL, EADDRNOTAVAIL);
#elif EADDRNOTAVAIL <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EADDRNOTAVAIL ((DeeObject *)&posix_EADDRNOTAVAIL)
PRIVATE DEFINE_UINT30(posix_EADDRNOTAVAIL, EADDRNOTAVAIL);
#elif EADDRNOTAVAIL <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EADDRNOTAVAIL ((DeeObject *)&posix_EADDRNOTAVAIL)
PRIVATE DEFINE_UINT45(posix_EADDRNOTAVAIL, EADDRNOTAVAIL);
#elif EADDRNOTAVAIL <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EADDRNOTAVAIL ((DeeObject *)&posix_EADDRNOTAVAIL)
PRIVATE DEFINE_UINT60(posix_EADDRNOTAVAIL, EADDRNOTAVAIL);
#else
#define OBJ_posix_EADDRNOTAVAIL ((DeeObject *)&posix_EADDRNOTAVAIL)
PRIVATE DEFINE_UINT75(posix_EADDRNOTAVAIL, EADDRNOTAVAIL);
#endif
#else /* EADDRNOTAVAIL >= 0 */
#if EADDRNOTAVAIL >= -0x4000ll /* 15-bit */
#define OBJ_posix_EADDRNOTAVAIL ((DeeObject *)&posix_EADDRNOTAVAIL)
PRIVATE DEFINE_INT15(posix_EADDRNOTAVAIL, EADDRNOTAVAIL);
#elif EADDRNOTAVAIL >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EADDRNOTAVAIL ((DeeObject *)&posix_EADDRNOTAVAIL)
PRIVATE DEFINE_INT30(posix_EADDRNOTAVAIL, EADDRNOTAVAIL);
#elif EADDRNOTAVAIL >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EADDRNOTAVAIL ((DeeObject *)&posix_EADDRNOTAVAIL)
PRIVATE DEFINE_INT45(posix_EADDRNOTAVAIL, EADDRNOTAVAIL);
#elif EADDRNOTAVAIL >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EADDRNOTAVAIL ((DeeObject *)&posix_EADDRNOTAVAIL)
PRIVATE DEFINE_INT60(posix_EADDRNOTAVAIL, EADDRNOTAVAIL);
#else
#define OBJ_posix_EADDRNOTAVAIL ((DeeObject *)&posix_EADDRNOTAVAIL)
PRIVATE DEFINE_INT75(posix_EADDRNOTAVAIL, EADDRNOTAVAIL);
#endif
#endif /* EADDRNOTAVAIL < 0 */
#else /* EADDRNOTAVAIL */
#define POSIX_EADDRNOTAVAIL_DEF /* nothing */
#endif /* !EADDRNOTAVAIL */
#ifdef ENETDOWN
#define POSIX_ENETDOWN_DEF \
	{ "ENETDOWN", OBJ_posix_ENETDOWN, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Network is down" },
#if DeeInt_IsSmallInt(ENETDOWN)
#define OBJ_posix_ENETDOWN DeeInt_ForSmallInt(ENETDOWN)
#elif ENETDOWN >= 0
#if ENETDOWN <= 0x7fffull /* 15-bit */
#define OBJ_posix_ENETDOWN ((DeeObject *)&posix_ENETDOWN)
PRIVATE DEFINE_UINT15(posix_ENETDOWN, ENETDOWN);
#elif ENETDOWN <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ENETDOWN ((DeeObject *)&posix_ENETDOWN)
PRIVATE DEFINE_UINT30(posix_ENETDOWN, ENETDOWN);
#elif ENETDOWN <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ENETDOWN ((DeeObject *)&posix_ENETDOWN)
PRIVATE DEFINE_UINT45(posix_ENETDOWN, ENETDOWN);
#elif ENETDOWN <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ENETDOWN ((DeeObject *)&posix_ENETDOWN)
PRIVATE DEFINE_UINT60(posix_ENETDOWN, ENETDOWN);
#else
#define OBJ_posix_ENETDOWN ((DeeObject *)&posix_ENETDOWN)
PRIVATE DEFINE_UINT75(posix_ENETDOWN, ENETDOWN);
#endif
#else /* ENETDOWN >= 0 */
#if ENETDOWN >= -0x4000ll /* 15-bit */
#define OBJ_posix_ENETDOWN ((DeeObject *)&posix_ENETDOWN)
PRIVATE DEFINE_INT15(posix_ENETDOWN, ENETDOWN);
#elif ENETDOWN >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ENETDOWN ((DeeObject *)&posix_ENETDOWN)
PRIVATE DEFINE_INT30(posix_ENETDOWN, ENETDOWN);
#elif ENETDOWN >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ENETDOWN ((DeeObject *)&posix_ENETDOWN)
PRIVATE DEFINE_INT45(posix_ENETDOWN, ENETDOWN);
#elif ENETDOWN >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ENETDOWN ((DeeObject *)&posix_ENETDOWN)
PRIVATE DEFINE_INT60(posix_ENETDOWN, ENETDOWN);
#else
#define OBJ_posix_ENETDOWN ((DeeObject *)&posix_ENETDOWN)
PRIVATE DEFINE_INT75(posix_ENETDOWN, ENETDOWN);
#endif
#endif /* ENETDOWN < 0 */
#else /* ENETDOWN */
#define POSIX_ENETDOWN_DEF /* nothing */
#endif /* !ENETDOWN */
#ifdef ENETUNREACH
#define POSIX_ENETUNREACH_DEF \
	{ "ENETUNREACH", OBJ_posix_ENETUNREACH, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Network is unreachable" },
#if DeeInt_IsSmallInt(ENETUNREACH)
#define OBJ_posix_ENETUNREACH DeeInt_ForSmallInt(ENETUNREACH)
#elif ENETUNREACH >= 0
#if ENETUNREACH <= 0x7fffull /* 15-bit */
#define OBJ_posix_ENETUNREACH ((DeeObject *)&posix_ENETUNREACH)
PRIVATE DEFINE_UINT15(posix_ENETUNREACH, ENETUNREACH);
#elif ENETUNREACH <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ENETUNREACH ((DeeObject *)&posix_ENETUNREACH)
PRIVATE DEFINE_UINT30(posix_ENETUNREACH, ENETUNREACH);
#elif ENETUNREACH <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ENETUNREACH ((DeeObject *)&posix_ENETUNREACH)
PRIVATE DEFINE_UINT45(posix_ENETUNREACH, ENETUNREACH);
#elif ENETUNREACH <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ENETUNREACH ((DeeObject *)&posix_ENETUNREACH)
PRIVATE DEFINE_UINT60(posix_ENETUNREACH, ENETUNREACH);
#else
#define OBJ_posix_ENETUNREACH ((DeeObject *)&posix_ENETUNREACH)
PRIVATE DEFINE_UINT75(posix_ENETUNREACH, ENETUNREACH);
#endif
#else /* ENETUNREACH >= 0 */
#if ENETUNREACH >= -0x4000ll /* 15-bit */
#define OBJ_posix_ENETUNREACH ((DeeObject *)&posix_ENETUNREACH)
PRIVATE DEFINE_INT15(posix_ENETUNREACH, ENETUNREACH);
#elif ENETUNREACH >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ENETUNREACH ((DeeObject *)&posix_ENETUNREACH)
PRIVATE DEFINE_INT30(posix_ENETUNREACH, ENETUNREACH);
#elif ENETUNREACH >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ENETUNREACH ((DeeObject *)&posix_ENETUNREACH)
PRIVATE DEFINE_INT45(posix_ENETUNREACH, ENETUNREACH);
#elif ENETUNREACH >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ENETUNREACH ((DeeObject *)&posix_ENETUNREACH)
PRIVATE DEFINE_INT60(posix_ENETUNREACH, ENETUNREACH);
#else
#define OBJ_posix_ENETUNREACH ((DeeObject *)&posix_ENETUNREACH)
PRIVATE DEFINE_INT75(posix_ENETUNREACH, ENETUNREACH);
#endif
#endif /* ENETUNREACH < 0 */
#else /* ENETUNREACH */
#define POSIX_ENETUNREACH_DEF /* nothing */
#endif /* !ENETUNREACH */
#ifdef ENETRESET
#define POSIX_ENETRESET_DEF \
	{ "ENETRESET", OBJ_posix_ENETRESET, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Network dropped connection because of reset" },
#if DeeInt_IsSmallInt(ENETRESET)
#define OBJ_posix_ENETRESET DeeInt_ForSmallInt(ENETRESET)
#elif ENETRESET >= 0
#if ENETRESET <= 0x7fffull /* 15-bit */
#define OBJ_posix_ENETRESET ((DeeObject *)&posix_ENETRESET)
PRIVATE DEFINE_UINT15(posix_ENETRESET, ENETRESET);
#elif ENETRESET <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ENETRESET ((DeeObject *)&posix_ENETRESET)
PRIVATE DEFINE_UINT30(posix_ENETRESET, ENETRESET);
#elif ENETRESET <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ENETRESET ((DeeObject *)&posix_ENETRESET)
PRIVATE DEFINE_UINT45(posix_ENETRESET, ENETRESET);
#elif ENETRESET <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ENETRESET ((DeeObject *)&posix_ENETRESET)
PRIVATE DEFINE_UINT60(posix_ENETRESET, ENETRESET);
#else
#define OBJ_posix_ENETRESET ((DeeObject *)&posix_ENETRESET)
PRIVATE DEFINE_UINT75(posix_ENETRESET, ENETRESET);
#endif
#else /* ENETRESET >= 0 */
#if ENETRESET >= -0x4000ll /* 15-bit */
#define OBJ_posix_ENETRESET ((DeeObject *)&posix_ENETRESET)
PRIVATE DEFINE_INT15(posix_ENETRESET, ENETRESET);
#elif ENETRESET >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ENETRESET ((DeeObject *)&posix_ENETRESET)
PRIVATE DEFINE_INT30(posix_ENETRESET, ENETRESET);
#elif ENETRESET >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ENETRESET ((DeeObject *)&posix_ENETRESET)
PRIVATE DEFINE_INT45(posix_ENETRESET, ENETRESET);
#elif ENETRESET >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ENETRESET ((DeeObject *)&posix_ENETRESET)
PRIVATE DEFINE_INT60(posix_ENETRESET, ENETRESET);
#else
#define OBJ_posix_ENETRESET ((DeeObject *)&posix_ENETRESET)
PRIVATE DEFINE_INT75(posix_ENETRESET, ENETRESET);
#endif
#endif /* ENETRESET < 0 */
#else /* ENETRESET */
#define POSIX_ENETRESET_DEF /* nothing */
#endif /* !ENETRESET */
#ifdef ECONNABORTED
#define POSIX_ECONNABORTED_DEF \
	{ "ECONNABORTED", OBJ_posix_ECONNABORTED, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Software caused connection abort" },
#if DeeInt_IsSmallInt(ECONNABORTED)
#define OBJ_posix_ECONNABORTED DeeInt_ForSmallInt(ECONNABORTED)
#elif ECONNABORTED >= 0
#if ECONNABORTED <= 0x7fffull /* 15-bit */
#define OBJ_posix_ECONNABORTED ((DeeObject *)&posix_ECONNABORTED)
PRIVATE DEFINE_UINT15(posix_ECONNABORTED, ECONNABORTED);
#elif ECONNABORTED <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ECONNABORTED ((DeeObject *)&posix_ECONNABORTED)
PRIVATE DEFINE_UINT30(posix_ECONNABORTED, ECONNABORTED);
#elif ECONNABORTED <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ECONNABORTED ((DeeObject *)&posix_ECONNABORTED)
PRIVATE DEFINE_UINT45(posix_ECONNABORTED, ECONNABORTED);
#elif ECONNABORTED <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ECONNABORTED ((DeeObject *)&posix_ECONNABORTED)
PRIVATE DEFINE_UINT60(posix_ECONNABORTED, ECONNABORTED);
#else
#define OBJ_posix_ECONNABORTED ((DeeObject *)&posix_ECONNABORTED)
PRIVATE DEFINE_UINT75(posix_ECONNABORTED, ECONNABORTED);
#endif
#else /* ECONNABORTED >= 0 */
#if ECONNABORTED >= -0x4000ll /* 15-bit */
#define OBJ_posix_ECONNABORTED ((DeeObject *)&posix_ECONNABORTED)
PRIVATE DEFINE_INT15(posix_ECONNABORTED, ECONNABORTED);
#elif ECONNABORTED >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ECONNABORTED ((DeeObject *)&posix_ECONNABORTED)
PRIVATE DEFINE_INT30(posix_ECONNABORTED, ECONNABORTED);
#elif ECONNABORTED >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ECONNABORTED ((DeeObject *)&posix_ECONNABORTED)
PRIVATE DEFINE_INT45(posix_ECONNABORTED, ECONNABORTED);
#elif ECONNABORTED >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ECONNABORTED ((DeeObject *)&posix_ECONNABORTED)
PRIVATE DEFINE_INT60(posix_ECONNABORTED, ECONNABORTED);
#else
#define OBJ_posix_ECONNABORTED ((DeeObject *)&posix_ECONNABORTED)
PRIVATE DEFINE_INT75(posix_ECONNABORTED, ECONNABORTED);
#endif
#endif /* ECONNABORTED < 0 */
#else /* ECONNABORTED */
#define POSIX_ECONNABORTED_DEF /* nothing */
#endif /* !ECONNABORTED */
#ifdef ECONNRESET
#define POSIX_ECONNRESET_DEF \
	{ "ECONNRESET", OBJ_posix_ECONNRESET, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Connection reset by peer" },
#if DeeInt_IsSmallInt(ECONNRESET)
#define OBJ_posix_ECONNRESET DeeInt_ForSmallInt(ECONNRESET)
#elif ECONNRESET >= 0
#if ECONNRESET <= 0x7fffull /* 15-bit */
#define OBJ_posix_ECONNRESET ((DeeObject *)&posix_ECONNRESET)
PRIVATE DEFINE_UINT15(posix_ECONNRESET, ECONNRESET);
#elif ECONNRESET <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ECONNRESET ((DeeObject *)&posix_ECONNRESET)
PRIVATE DEFINE_UINT30(posix_ECONNRESET, ECONNRESET);
#elif ECONNRESET <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ECONNRESET ((DeeObject *)&posix_ECONNRESET)
PRIVATE DEFINE_UINT45(posix_ECONNRESET, ECONNRESET);
#elif ECONNRESET <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ECONNRESET ((DeeObject *)&posix_ECONNRESET)
PRIVATE DEFINE_UINT60(posix_ECONNRESET, ECONNRESET);
#else
#define OBJ_posix_ECONNRESET ((DeeObject *)&posix_ECONNRESET)
PRIVATE DEFINE_UINT75(posix_ECONNRESET, ECONNRESET);
#endif
#else /* ECONNRESET >= 0 */
#if ECONNRESET >= -0x4000ll /* 15-bit */
#define OBJ_posix_ECONNRESET ((DeeObject *)&posix_ECONNRESET)
PRIVATE DEFINE_INT15(posix_ECONNRESET, ECONNRESET);
#elif ECONNRESET >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ECONNRESET ((DeeObject *)&posix_ECONNRESET)
PRIVATE DEFINE_INT30(posix_ECONNRESET, ECONNRESET);
#elif ECONNRESET >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ECONNRESET ((DeeObject *)&posix_ECONNRESET)
PRIVATE DEFINE_INT45(posix_ECONNRESET, ECONNRESET);
#elif ECONNRESET >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ECONNRESET ((DeeObject *)&posix_ECONNRESET)
PRIVATE DEFINE_INT60(posix_ECONNRESET, ECONNRESET);
#else
#define OBJ_posix_ECONNRESET ((DeeObject *)&posix_ECONNRESET)
PRIVATE DEFINE_INT75(posix_ECONNRESET, ECONNRESET);
#endif
#endif /* ECONNRESET < 0 */
#else /* ECONNRESET */
#define POSIX_ECONNRESET_DEF /* nothing */
#endif /* !ECONNRESET */
#ifdef ENOBUFS
#define POSIX_ENOBUFS_DEF \
	{ "ENOBUFS", OBJ_posix_ENOBUFS, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "No buffer space available" },
#if DeeInt_IsSmallInt(ENOBUFS)
#define OBJ_posix_ENOBUFS DeeInt_ForSmallInt(ENOBUFS)
#elif ENOBUFS >= 0
#if ENOBUFS <= 0x7fffull /* 15-bit */
#define OBJ_posix_ENOBUFS ((DeeObject *)&posix_ENOBUFS)
PRIVATE DEFINE_UINT15(posix_ENOBUFS, ENOBUFS);
#elif ENOBUFS <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ENOBUFS ((DeeObject *)&posix_ENOBUFS)
PRIVATE DEFINE_UINT30(posix_ENOBUFS, ENOBUFS);
#elif ENOBUFS <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ENOBUFS ((DeeObject *)&posix_ENOBUFS)
PRIVATE DEFINE_UINT45(posix_ENOBUFS, ENOBUFS);
#elif ENOBUFS <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ENOBUFS ((DeeObject *)&posix_ENOBUFS)
PRIVATE DEFINE_UINT60(posix_ENOBUFS, ENOBUFS);
#else
#define OBJ_posix_ENOBUFS ((DeeObject *)&posix_ENOBUFS)
PRIVATE DEFINE_UINT75(posix_ENOBUFS, ENOBUFS);
#endif
#else /* ENOBUFS >= 0 */
#if ENOBUFS >= -0x4000ll /* 15-bit */
#define OBJ_posix_ENOBUFS ((DeeObject *)&posix_ENOBUFS)
PRIVATE DEFINE_INT15(posix_ENOBUFS, ENOBUFS);
#elif ENOBUFS >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ENOBUFS ((DeeObject *)&posix_ENOBUFS)
PRIVATE DEFINE_INT30(posix_ENOBUFS, ENOBUFS);
#elif ENOBUFS >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ENOBUFS ((DeeObject *)&posix_ENOBUFS)
PRIVATE DEFINE_INT45(posix_ENOBUFS, ENOBUFS);
#elif ENOBUFS >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ENOBUFS ((DeeObject *)&posix_ENOBUFS)
PRIVATE DEFINE_INT60(posix_ENOBUFS, ENOBUFS);
#else
#define OBJ_posix_ENOBUFS ((DeeObject *)&posix_ENOBUFS)
PRIVATE DEFINE_INT75(posix_ENOBUFS, ENOBUFS);
#endif
#endif /* ENOBUFS < 0 */
#else /* ENOBUFS */
#define POSIX_ENOBUFS_DEF /* nothing */
#endif /* !ENOBUFS */
#ifdef EISCONN
#define POSIX_EISCONN_DEF \
	{ "EISCONN", OBJ_posix_EISCONN, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Transport endpoint is already connected" },
#if DeeInt_IsSmallInt(EISCONN)
#define OBJ_posix_EISCONN DeeInt_ForSmallInt(EISCONN)
#elif EISCONN >= 0
#if EISCONN <= 0x7fffull /* 15-bit */
#define OBJ_posix_EISCONN ((DeeObject *)&posix_EISCONN)
PRIVATE DEFINE_UINT15(posix_EISCONN, EISCONN);
#elif EISCONN <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EISCONN ((DeeObject *)&posix_EISCONN)
PRIVATE DEFINE_UINT30(posix_EISCONN, EISCONN);
#elif EISCONN <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EISCONN ((DeeObject *)&posix_EISCONN)
PRIVATE DEFINE_UINT45(posix_EISCONN, EISCONN);
#elif EISCONN <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EISCONN ((DeeObject *)&posix_EISCONN)
PRIVATE DEFINE_UINT60(posix_EISCONN, EISCONN);
#else
#define OBJ_posix_EISCONN ((DeeObject *)&posix_EISCONN)
PRIVATE DEFINE_UINT75(posix_EISCONN, EISCONN);
#endif
#else /* EISCONN >= 0 */
#if EISCONN >= -0x4000ll /* 15-bit */
#define OBJ_posix_EISCONN ((DeeObject *)&posix_EISCONN)
PRIVATE DEFINE_INT15(posix_EISCONN, EISCONN);
#elif EISCONN >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EISCONN ((DeeObject *)&posix_EISCONN)
PRIVATE DEFINE_INT30(posix_EISCONN, EISCONN);
#elif EISCONN >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EISCONN ((DeeObject *)&posix_EISCONN)
PRIVATE DEFINE_INT45(posix_EISCONN, EISCONN);
#elif EISCONN >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EISCONN ((DeeObject *)&posix_EISCONN)
PRIVATE DEFINE_INT60(posix_EISCONN, EISCONN);
#else
#define OBJ_posix_EISCONN ((DeeObject *)&posix_EISCONN)
PRIVATE DEFINE_INT75(posix_EISCONN, EISCONN);
#endif
#endif /* EISCONN < 0 */
#else /* EISCONN */
#define POSIX_EISCONN_DEF /* nothing */
#endif /* !EISCONN */
#ifdef ENOTCONN
#define POSIX_ENOTCONN_DEF \
	{ "ENOTCONN", OBJ_posix_ENOTCONN, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Transport endpoint is not connected" },
#if DeeInt_IsSmallInt(ENOTCONN)
#define OBJ_posix_ENOTCONN DeeInt_ForSmallInt(ENOTCONN)
#elif ENOTCONN >= 0
#if ENOTCONN <= 0x7fffull /* 15-bit */
#define OBJ_posix_ENOTCONN ((DeeObject *)&posix_ENOTCONN)
PRIVATE DEFINE_UINT15(posix_ENOTCONN, ENOTCONN);
#elif ENOTCONN <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ENOTCONN ((DeeObject *)&posix_ENOTCONN)
PRIVATE DEFINE_UINT30(posix_ENOTCONN, ENOTCONN);
#elif ENOTCONN <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ENOTCONN ((DeeObject *)&posix_ENOTCONN)
PRIVATE DEFINE_UINT45(posix_ENOTCONN, ENOTCONN);
#elif ENOTCONN <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ENOTCONN ((DeeObject *)&posix_ENOTCONN)
PRIVATE DEFINE_UINT60(posix_ENOTCONN, ENOTCONN);
#else
#define OBJ_posix_ENOTCONN ((DeeObject *)&posix_ENOTCONN)
PRIVATE DEFINE_UINT75(posix_ENOTCONN, ENOTCONN);
#endif
#else /* ENOTCONN >= 0 */
#if ENOTCONN >= -0x4000ll /* 15-bit */
#define OBJ_posix_ENOTCONN ((DeeObject *)&posix_ENOTCONN)
PRIVATE DEFINE_INT15(posix_ENOTCONN, ENOTCONN);
#elif ENOTCONN >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ENOTCONN ((DeeObject *)&posix_ENOTCONN)
PRIVATE DEFINE_INT30(posix_ENOTCONN, ENOTCONN);
#elif ENOTCONN >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ENOTCONN ((DeeObject *)&posix_ENOTCONN)
PRIVATE DEFINE_INT45(posix_ENOTCONN, ENOTCONN);
#elif ENOTCONN >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ENOTCONN ((DeeObject *)&posix_ENOTCONN)
PRIVATE DEFINE_INT60(posix_ENOTCONN, ENOTCONN);
#else
#define OBJ_posix_ENOTCONN ((DeeObject *)&posix_ENOTCONN)
PRIVATE DEFINE_INT75(posix_ENOTCONN, ENOTCONN);
#endif
#endif /* ENOTCONN < 0 */
#else /* ENOTCONN */
#define POSIX_ENOTCONN_DEF /* nothing */
#endif /* !ENOTCONN */
#ifdef ESHUTDOWN
#define POSIX_ESHUTDOWN_DEF \
	{ "ESHUTDOWN", OBJ_posix_ESHUTDOWN, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Cannot send after transport endpoint shutdown" },
#if DeeInt_IsSmallInt(ESHUTDOWN)
#define OBJ_posix_ESHUTDOWN DeeInt_ForSmallInt(ESHUTDOWN)
#elif ESHUTDOWN >= 0
#if ESHUTDOWN <= 0x7fffull /* 15-bit */
#define OBJ_posix_ESHUTDOWN ((DeeObject *)&posix_ESHUTDOWN)
PRIVATE DEFINE_UINT15(posix_ESHUTDOWN, ESHUTDOWN);
#elif ESHUTDOWN <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ESHUTDOWN ((DeeObject *)&posix_ESHUTDOWN)
PRIVATE DEFINE_UINT30(posix_ESHUTDOWN, ESHUTDOWN);
#elif ESHUTDOWN <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ESHUTDOWN ((DeeObject *)&posix_ESHUTDOWN)
PRIVATE DEFINE_UINT45(posix_ESHUTDOWN, ESHUTDOWN);
#elif ESHUTDOWN <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ESHUTDOWN ((DeeObject *)&posix_ESHUTDOWN)
PRIVATE DEFINE_UINT60(posix_ESHUTDOWN, ESHUTDOWN);
#else
#define OBJ_posix_ESHUTDOWN ((DeeObject *)&posix_ESHUTDOWN)
PRIVATE DEFINE_UINT75(posix_ESHUTDOWN, ESHUTDOWN);
#endif
#else /* ESHUTDOWN >= 0 */
#if ESHUTDOWN >= -0x4000ll /* 15-bit */
#define OBJ_posix_ESHUTDOWN ((DeeObject *)&posix_ESHUTDOWN)
PRIVATE DEFINE_INT15(posix_ESHUTDOWN, ESHUTDOWN);
#elif ESHUTDOWN >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ESHUTDOWN ((DeeObject *)&posix_ESHUTDOWN)
PRIVATE DEFINE_INT30(posix_ESHUTDOWN, ESHUTDOWN);
#elif ESHUTDOWN >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ESHUTDOWN ((DeeObject *)&posix_ESHUTDOWN)
PRIVATE DEFINE_INT45(posix_ESHUTDOWN, ESHUTDOWN);
#elif ESHUTDOWN >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ESHUTDOWN ((DeeObject *)&posix_ESHUTDOWN)
PRIVATE DEFINE_INT60(posix_ESHUTDOWN, ESHUTDOWN);
#else
#define OBJ_posix_ESHUTDOWN ((DeeObject *)&posix_ESHUTDOWN)
PRIVATE DEFINE_INT75(posix_ESHUTDOWN, ESHUTDOWN);
#endif
#endif /* ESHUTDOWN < 0 */
#else /* ESHUTDOWN */
#define POSIX_ESHUTDOWN_DEF /* nothing */
#endif /* !ESHUTDOWN */
#ifdef ETOOMANYREFS
#define POSIX_ETOOMANYREFS_DEF \
	{ "ETOOMANYREFS", OBJ_posix_ETOOMANYREFS, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Too many references: cannot splice" },
#if DeeInt_IsSmallInt(ETOOMANYREFS)
#define OBJ_posix_ETOOMANYREFS DeeInt_ForSmallInt(ETOOMANYREFS)
#elif ETOOMANYREFS >= 0
#if ETOOMANYREFS <= 0x7fffull /* 15-bit */
#define OBJ_posix_ETOOMANYREFS ((DeeObject *)&posix_ETOOMANYREFS)
PRIVATE DEFINE_UINT15(posix_ETOOMANYREFS, ETOOMANYREFS);
#elif ETOOMANYREFS <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ETOOMANYREFS ((DeeObject *)&posix_ETOOMANYREFS)
PRIVATE DEFINE_UINT30(posix_ETOOMANYREFS, ETOOMANYREFS);
#elif ETOOMANYREFS <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ETOOMANYREFS ((DeeObject *)&posix_ETOOMANYREFS)
PRIVATE DEFINE_UINT45(posix_ETOOMANYREFS, ETOOMANYREFS);
#elif ETOOMANYREFS <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ETOOMANYREFS ((DeeObject *)&posix_ETOOMANYREFS)
PRIVATE DEFINE_UINT60(posix_ETOOMANYREFS, ETOOMANYREFS);
#else
#define OBJ_posix_ETOOMANYREFS ((DeeObject *)&posix_ETOOMANYREFS)
PRIVATE DEFINE_UINT75(posix_ETOOMANYREFS, ETOOMANYREFS);
#endif
#else /* ETOOMANYREFS >= 0 */
#if ETOOMANYREFS >= -0x4000ll /* 15-bit */
#define OBJ_posix_ETOOMANYREFS ((DeeObject *)&posix_ETOOMANYREFS)
PRIVATE DEFINE_INT15(posix_ETOOMANYREFS, ETOOMANYREFS);
#elif ETOOMANYREFS >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ETOOMANYREFS ((DeeObject *)&posix_ETOOMANYREFS)
PRIVATE DEFINE_INT30(posix_ETOOMANYREFS, ETOOMANYREFS);
#elif ETOOMANYREFS >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ETOOMANYREFS ((DeeObject *)&posix_ETOOMANYREFS)
PRIVATE DEFINE_INT45(posix_ETOOMANYREFS, ETOOMANYREFS);
#elif ETOOMANYREFS >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ETOOMANYREFS ((DeeObject *)&posix_ETOOMANYREFS)
PRIVATE DEFINE_INT60(posix_ETOOMANYREFS, ETOOMANYREFS);
#else
#define OBJ_posix_ETOOMANYREFS ((DeeObject *)&posix_ETOOMANYREFS)
PRIVATE DEFINE_INT75(posix_ETOOMANYREFS, ETOOMANYREFS);
#endif
#endif /* ETOOMANYREFS < 0 */
#else /* ETOOMANYREFS */
#define POSIX_ETOOMANYREFS_DEF /* nothing */
#endif /* !ETOOMANYREFS */
#ifdef ETIMEDOUT
#define POSIX_ETIMEDOUT_DEF \
	{ "ETIMEDOUT", OBJ_posix_ETIMEDOUT, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Connection timed out" },
#if DeeInt_IsSmallInt(ETIMEDOUT)
#define OBJ_posix_ETIMEDOUT DeeInt_ForSmallInt(ETIMEDOUT)
#elif ETIMEDOUT >= 0
#if ETIMEDOUT <= 0x7fffull /* 15-bit */
#define OBJ_posix_ETIMEDOUT ((DeeObject *)&posix_ETIMEDOUT)
PRIVATE DEFINE_UINT15(posix_ETIMEDOUT, ETIMEDOUT);
#elif ETIMEDOUT <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ETIMEDOUT ((DeeObject *)&posix_ETIMEDOUT)
PRIVATE DEFINE_UINT30(posix_ETIMEDOUT, ETIMEDOUT);
#elif ETIMEDOUT <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ETIMEDOUT ((DeeObject *)&posix_ETIMEDOUT)
PRIVATE DEFINE_UINT45(posix_ETIMEDOUT, ETIMEDOUT);
#elif ETIMEDOUT <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ETIMEDOUT ((DeeObject *)&posix_ETIMEDOUT)
PRIVATE DEFINE_UINT60(posix_ETIMEDOUT, ETIMEDOUT);
#else
#define OBJ_posix_ETIMEDOUT ((DeeObject *)&posix_ETIMEDOUT)
PRIVATE DEFINE_UINT75(posix_ETIMEDOUT, ETIMEDOUT);
#endif
#else /* ETIMEDOUT >= 0 */
#if ETIMEDOUT >= -0x4000ll /* 15-bit */
#define OBJ_posix_ETIMEDOUT ((DeeObject *)&posix_ETIMEDOUT)
PRIVATE DEFINE_INT15(posix_ETIMEDOUT, ETIMEDOUT);
#elif ETIMEDOUT >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ETIMEDOUT ((DeeObject *)&posix_ETIMEDOUT)
PRIVATE DEFINE_INT30(posix_ETIMEDOUT, ETIMEDOUT);
#elif ETIMEDOUT >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ETIMEDOUT ((DeeObject *)&posix_ETIMEDOUT)
PRIVATE DEFINE_INT45(posix_ETIMEDOUT, ETIMEDOUT);
#elif ETIMEDOUT >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ETIMEDOUT ((DeeObject *)&posix_ETIMEDOUT)
PRIVATE DEFINE_INT60(posix_ETIMEDOUT, ETIMEDOUT);
#else
#define OBJ_posix_ETIMEDOUT ((DeeObject *)&posix_ETIMEDOUT)
PRIVATE DEFINE_INT75(posix_ETIMEDOUT, ETIMEDOUT);
#endif
#endif /* ETIMEDOUT < 0 */
#else /* ETIMEDOUT */
#define POSIX_ETIMEDOUT_DEF /* nothing */
#endif /* !ETIMEDOUT */
#ifdef ECONNREFUSED
#define POSIX_ECONNREFUSED_DEF \
	{ "ECONNREFUSED", OBJ_posix_ECONNREFUSED, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Connection refused" },
#if DeeInt_IsSmallInt(ECONNREFUSED)
#define OBJ_posix_ECONNREFUSED DeeInt_ForSmallInt(ECONNREFUSED)
#elif ECONNREFUSED >= 0
#if ECONNREFUSED <= 0x7fffull /* 15-bit */
#define OBJ_posix_ECONNREFUSED ((DeeObject *)&posix_ECONNREFUSED)
PRIVATE DEFINE_UINT15(posix_ECONNREFUSED, ECONNREFUSED);
#elif ECONNREFUSED <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ECONNREFUSED ((DeeObject *)&posix_ECONNREFUSED)
PRIVATE DEFINE_UINT30(posix_ECONNREFUSED, ECONNREFUSED);
#elif ECONNREFUSED <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ECONNREFUSED ((DeeObject *)&posix_ECONNREFUSED)
PRIVATE DEFINE_UINT45(posix_ECONNREFUSED, ECONNREFUSED);
#elif ECONNREFUSED <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ECONNREFUSED ((DeeObject *)&posix_ECONNREFUSED)
PRIVATE DEFINE_UINT60(posix_ECONNREFUSED, ECONNREFUSED);
#else
#define OBJ_posix_ECONNREFUSED ((DeeObject *)&posix_ECONNREFUSED)
PRIVATE DEFINE_UINT75(posix_ECONNREFUSED, ECONNREFUSED);
#endif
#else /* ECONNREFUSED >= 0 */
#if ECONNREFUSED >= -0x4000ll /* 15-bit */
#define OBJ_posix_ECONNREFUSED ((DeeObject *)&posix_ECONNREFUSED)
PRIVATE DEFINE_INT15(posix_ECONNREFUSED, ECONNREFUSED);
#elif ECONNREFUSED >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ECONNREFUSED ((DeeObject *)&posix_ECONNREFUSED)
PRIVATE DEFINE_INT30(posix_ECONNREFUSED, ECONNREFUSED);
#elif ECONNREFUSED >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ECONNREFUSED ((DeeObject *)&posix_ECONNREFUSED)
PRIVATE DEFINE_INT45(posix_ECONNREFUSED, ECONNREFUSED);
#elif ECONNREFUSED >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ECONNREFUSED ((DeeObject *)&posix_ECONNREFUSED)
PRIVATE DEFINE_INT60(posix_ECONNREFUSED, ECONNREFUSED);
#else
#define OBJ_posix_ECONNREFUSED ((DeeObject *)&posix_ECONNREFUSED)
PRIVATE DEFINE_INT75(posix_ECONNREFUSED, ECONNREFUSED);
#endif
#endif /* ECONNREFUSED < 0 */
#else /* ECONNREFUSED */
#define POSIX_ECONNREFUSED_DEF /* nothing */
#endif /* !ECONNREFUSED */
#ifdef EHOSTDOWN
#define POSIX_EHOSTDOWN_DEF \
	{ "EHOSTDOWN", OBJ_posix_EHOSTDOWN, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Host is down" },
#if DeeInt_IsSmallInt(EHOSTDOWN)
#define OBJ_posix_EHOSTDOWN DeeInt_ForSmallInt(EHOSTDOWN)
#elif EHOSTDOWN >= 0
#if EHOSTDOWN <= 0x7fffull /* 15-bit */
#define OBJ_posix_EHOSTDOWN ((DeeObject *)&posix_EHOSTDOWN)
PRIVATE DEFINE_UINT15(posix_EHOSTDOWN, EHOSTDOWN);
#elif EHOSTDOWN <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EHOSTDOWN ((DeeObject *)&posix_EHOSTDOWN)
PRIVATE DEFINE_UINT30(posix_EHOSTDOWN, EHOSTDOWN);
#elif EHOSTDOWN <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EHOSTDOWN ((DeeObject *)&posix_EHOSTDOWN)
PRIVATE DEFINE_UINT45(posix_EHOSTDOWN, EHOSTDOWN);
#elif EHOSTDOWN <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EHOSTDOWN ((DeeObject *)&posix_EHOSTDOWN)
PRIVATE DEFINE_UINT60(posix_EHOSTDOWN, EHOSTDOWN);
#else
#define OBJ_posix_EHOSTDOWN ((DeeObject *)&posix_EHOSTDOWN)
PRIVATE DEFINE_UINT75(posix_EHOSTDOWN, EHOSTDOWN);
#endif
#else /* EHOSTDOWN >= 0 */
#if EHOSTDOWN >= -0x4000ll /* 15-bit */
#define OBJ_posix_EHOSTDOWN ((DeeObject *)&posix_EHOSTDOWN)
PRIVATE DEFINE_INT15(posix_EHOSTDOWN, EHOSTDOWN);
#elif EHOSTDOWN >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EHOSTDOWN ((DeeObject *)&posix_EHOSTDOWN)
PRIVATE DEFINE_INT30(posix_EHOSTDOWN, EHOSTDOWN);
#elif EHOSTDOWN >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EHOSTDOWN ((DeeObject *)&posix_EHOSTDOWN)
PRIVATE DEFINE_INT45(posix_EHOSTDOWN, EHOSTDOWN);
#elif EHOSTDOWN >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EHOSTDOWN ((DeeObject *)&posix_EHOSTDOWN)
PRIVATE DEFINE_INT60(posix_EHOSTDOWN, EHOSTDOWN);
#else
#define OBJ_posix_EHOSTDOWN ((DeeObject *)&posix_EHOSTDOWN)
PRIVATE DEFINE_INT75(posix_EHOSTDOWN, EHOSTDOWN);
#endif
#endif /* EHOSTDOWN < 0 */
#else /* EHOSTDOWN */
#define POSIX_EHOSTDOWN_DEF /* nothing */
#endif /* !EHOSTDOWN */
#ifdef EHOSTUNREACH
#define POSIX_EHOSTUNREACH_DEF \
	{ "EHOSTUNREACH", OBJ_posix_EHOSTUNREACH, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "No route to host" },
#if DeeInt_IsSmallInt(EHOSTUNREACH)
#define OBJ_posix_EHOSTUNREACH DeeInt_ForSmallInt(EHOSTUNREACH)
#elif EHOSTUNREACH >= 0
#if EHOSTUNREACH <= 0x7fffull /* 15-bit */
#define OBJ_posix_EHOSTUNREACH ((DeeObject *)&posix_EHOSTUNREACH)
PRIVATE DEFINE_UINT15(posix_EHOSTUNREACH, EHOSTUNREACH);
#elif EHOSTUNREACH <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EHOSTUNREACH ((DeeObject *)&posix_EHOSTUNREACH)
PRIVATE DEFINE_UINT30(posix_EHOSTUNREACH, EHOSTUNREACH);
#elif EHOSTUNREACH <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EHOSTUNREACH ((DeeObject *)&posix_EHOSTUNREACH)
PRIVATE DEFINE_UINT45(posix_EHOSTUNREACH, EHOSTUNREACH);
#elif EHOSTUNREACH <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EHOSTUNREACH ((DeeObject *)&posix_EHOSTUNREACH)
PRIVATE DEFINE_UINT60(posix_EHOSTUNREACH, EHOSTUNREACH);
#else
#define OBJ_posix_EHOSTUNREACH ((DeeObject *)&posix_EHOSTUNREACH)
PRIVATE DEFINE_UINT75(posix_EHOSTUNREACH, EHOSTUNREACH);
#endif
#else /* EHOSTUNREACH >= 0 */
#if EHOSTUNREACH >= -0x4000ll /* 15-bit */
#define OBJ_posix_EHOSTUNREACH ((DeeObject *)&posix_EHOSTUNREACH)
PRIVATE DEFINE_INT15(posix_EHOSTUNREACH, EHOSTUNREACH);
#elif EHOSTUNREACH >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EHOSTUNREACH ((DeeObject *)&posix_EHOSTUNREACH)
PRIVATE DEFINE_INT30(posix_EHOSTUNREACH, EHOSTUNREACH);
#elif EHOSTUNREACH >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EHOSTUNREACH ((DeeObject *)&posix_EHOSTUNREACH)
PRIVATE DEFINE_INT45(posix_EHOSTUNREACH, EHOSTUNREACH);
#elif EHOSTUNREACH >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EHOSTUNREACH ((DeeObject *)&posix_EHOSTUNREACH)
PRIVATE DEFINE_INT60(posix_EHOSTUNREACH, EHOSTUNREACH);
#else
#define OBJ_posix_EHOSTUNREACH ((DeeObject *)&posix_EHOSTUNREACH)
PRIVATE DEFINE_INT75(posix_EHOSTUNREACH, EHOSTUNREACH);
#endif
#endif /* EHOSTUNREACH < 0 */
#else /* EHOSTUNREACH */
#define POSIX_EHOSTUNREACH_DEF /* nothing */
#endif /* !EHOSTUNREACH */
#ifdef EALREADY
#define POSIX_EALREADY_DEF \
	{ "EALREADY", OBJ_posix_EALREADY, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Operation already in progress" },
#if DeeInt_IsSmallInt(EALREADY)
#define OBJ_posix_EALREADY DeeInt_ForSmallInt(EALREADY)
#elif EALREADY >= 0
#if EALREADY <= 0x7fffull /* 15-bit */
#define OBJ_posix_EALREADY ((DeeObject *)&posix_EALREADY)
PRIVATE DEFINE_UINT15(posix_EALREADY, EALREADY);
#elif EALREADY <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EALREADY ((DeeObject *)&posix_EALREADY)
PRIVATE DEFINE_UINT30(posix_EALREADY, EALREADY);
#elif EALREADY <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EALREADY ((DeeObject *)&posix_EALREADY)
PRIVATE DEFINE_UINT45(posix_EALREADY, EALREADY);
#elif EALREADY <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EALREADY ((DeeObject *)&posix_EALREADY)
PRIVATE DEFINE_UINT60(posix_EALREADY, EALREADY);
#else
#define OBJ_posix_EALREADY ((DeeObject *)&posix_EALREADY)
PRIVATE DEFINE_UINT75(posix_EALREADY, EALREADY);
#endif
#else /* EALREADY >= 0 */
#if EALREADY >= -0x4000ll /* 15-bit */
#define OBJ_posix_EALREADY ((DeeObject *)&posix_EALREADY)
PRIVATE DEFINE_INT15(posix_EALREADY, EALREADY);
#elif EALREADY >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EALREADY ((DeeObject *)&posix_EALREADY)
PRIVATE DEFINE_INT30(posix_EALREADY, EALREADY);
#elif EALREADY >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EALREADY ((DeeObject *)&posix_EALREADY)
PRIVATE DEFINE_INT45(posix_EALREADY, EALREADY);
#elif EALREADY >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EALREADY ((DeeObject *)&posix_EALREADY)
PRIVATE DEFINE_INT60(posix_EALREADY, EALREADY);
#else
#define OBJ_posix_EALREADY ((DeeObject *)&posix_EALREADY)
PRIVATE DEFINE_INT75(posix_EALREADY, EALREADY);
#endif
#endif /* EALREADY < 0 */
#else /* EALREADY */
#define POSIX_EALREADY_DEF /* nothing */
#endif /* !EALREADY */
#ifdef EINPROGRESS
#define POSIX_EINPROGRESS_DEF \
	{ "EINPROGRESS", OBJ_posix_EINPROGRESS, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Operation now in progress" },
#if DeeInt_IsSmallInt(EINPROGRESS)
#define OBJ_posix_EINPROGRESS DeeInt_ForSmallInt(EINPROGRESS)
#elif EINPROGRESS >= 0
#if EINPROGRESS <= 0x7fffull /* 15-bit */
#define OBJ_posix_EINPROGRESS ((DeeObject *)&posix_EINPROGRESS)
PRIVATE DEFINE_UINT15(posix_EINPROGRESS, EINPROGRESS);
#elif EINPROGRESS <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EINPROGRESS ((DeeObject *)&posix_EINPROGRESS)
PRIVATE DEFINE_UINT30(posix_EINPROGRESS, EINPROGRESS);
#elif EINPROGRESS <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EINPROGRESS ((DeeObject *)&posix_EINPROGRESS)
PRIVATE DEFINE_UINT45(posix_EINPROGRESS, EINPROGRESS);
#elif EINPROGRESS <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EINPROGRESS ((DeeObject *)&posix_EINPROGRESS)
PRIVATE DEFINE_UINT60(posix_EINPROGRESS, EINPROGRESS);
#else
#define OBJ_posix_EINPROGRESS ((DeeObject *)&posix_EINPROGRESS)
PRIVATE DEFINE_UINT75(posix_EINPROGRESS, EINPROGRESS);
#endif
#else /* EINPROGRESS >= 0 */
#if EINPROGRESS >= -0x4000ll /* 15-bit */
#define OBJ_posix_EINPROGRESS ((DeeObject *)&posix_EINPROGRESS)
PRIVATE DEFINE_INT15(posix_EINPROGRESS, EINPROGRESS);
#elif EINPROGRESS >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EINPROGRESS ((DeeObject *)&posix_EINPROGRESS)
PRIVATE DEFINE_INT30(posix_EINPROGRESS, EINPROGRESS);
#elif EINPROGRESS >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EINPROGRESS ((DeeObject *)&posix_EINPROGRESS)
PRIVATE DEFINE_INT45(posix_EINPROGRESS, EINPROGRESS);
#elif EINPROGRESS >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EINPROGRESS ((DeeObject *)&posix_EINPROGRESS)
PRIVATE DEFINE_INT60(posix_EINPROGRESS, EINPROGRESS);
#else
#define OBJ_posix_EINPROGRESS ((DeeObject *)&posix_EINPROGRESS)
PRIVATE DEFINE_INT75(posix_EINPROGRESS, EINPROGRESS);
#endif
#endif /* EINPROGRESS < 0 */
#else /* EINPROGRESS */
#define POSIX_EINPROGRESS_DEF /* nothing */
#endif /* !EINPROGRESS */
#ifdef ESTALE
#define POSIX_ESTALE_DEF \
	{ "ESTALE", OBJ_posix_ESTALE, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Stale NFS file handle" },
#if DeeInt_IsSmallInt(ESTALE)
#define OBJ_posix_ESTALE DeeInt_ForSmallInt(ESTALE)
#elif ESTALE >= 0
#if ESTALE <= 0x7fffull /* 15-bit */
#define OBJ_posix_ESTALE ((DeeObject *)&posix_ESTALE)
PRIVATE DEFINE_UINT15(posix_ESTALE, ESTALE);
#elif ESTALE <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ESTALE ((DeeObject *)&posix_ESTALE)
PRIVATE DEFINE_UINT30(posix_ESTALE, ESTALE);
#elif ESTALE <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ESTALE ((DeeObject *)&posix_ESTALE)
PRIVATE DEFINE_UINT45(posix_ESTALE, ESTALE);
#elif ESTALE <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ESTALE ((DeeObject *)&posix_ESTALE)
PRIVATE DEFINE_UINT60(posix_ESTALE, ESTALE);
#else
#define OBJ_posix_ESTALE ((DeeObject *)&posix_ESTALE)
PRIVATE DEFINE_UINT75(posix_ESTALE, ESTALE);
#endif
#else /* ESTALE >= 0 */
#if ESTALE >= -0x4000ll /* 15-bit */
#define OBJ_posix_ESTALE ((DeeObject *)&posix_ESTALE)
PRIVATE DEFINE_INT15(posix_ESTALE, ESTALE);
#elif ESTALE >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ESTALE ((DeeObject *)&posix_ESTALE)
PRIVATE DEFINE_INT30(posix_ESTALE, ESTALE);
#elif ESTALE >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ESTALE ((DeeObject *)&posix_ESTALE)
PRIVATE DEFINE_INT45(posix_ESTALE, ESTALE);
#elif ESTALE >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ESTALE ((DeeObject *)&posix_ESTALE)
PRIVATE DEFINE_INT60(posix_ESTALE, ESTALE);
#else
#define OBJ_posix_ESTALE ((DeeObject *)&posix_ESTALE)
PRIVATE DEFINE_INT75(posix_ESTALE, ESTALE);
#endif
#endif /* ESTALE < 0 */
#else /* ESTALE */
#define POSIX_ESTALE_DEF /* nothing */
#endif /* !ESTALE */
#ifdef EUCLEAN
#define POSIX_EUCLEAN_DEF \
	{ "EUCLEAN", OBJ_posix_EUCLEAN, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Structure needs cleaning" },
#if DeeInt_IsSmallInt(EUCLEAN)
#define OBJ_posix_EUCLEAN DeeInt_ForSmallInt(EUCLEAN)
#elif EUCLEAN >= 0
#if EUCLEAN <= 0x7fffull /* 15-bit */
#define OBJ_posix_EUCLEAN ((DeeObject *)&posix_EUCLEAN)
PRIVATE DEFINE_UINT15(posix_EUCLEAN, EUCLEAN);
#elif EUCLEAN <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EUCLEAN ((DeeObject *)&posix_EUCLEAN)
PRIVATE DEFINE_UINT30(posix_EUCLEAN, EUCLEAN);
#elif EUCLEAN <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EUCLEAN ((DeeObject *)&posix_EUCLEAN)
PRIVATE DEFINE_UINT45(posix_EUCLEAN, EUCLEAN);
#elif EUCLEAN <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EUCLEAN ((DeeObject *)&posix_EUCLEAN)
PRIVATE DEFINE_UINT60(posix_EUCLEAN, EUCLEAN);
#else
#define OBJ_posix_EUCLEAN ((DeeObject *)&posix_EUCLEAN)
PRIVATE DEFINE_UINT75(posix_EUCLEAN, EUCLEAN);
#endif
#else /* EUCLEAN >= 0 */
#if EUCLEAN >= -0x4000ll /* 15-bit */
#define OBJ_posix_EUCLEAN ((DeeObject *)&posix_EUCLEAN)
PRIVATE DEFINE_INT15(posix_EUCLEAN, EUCLEAN);
#elif EUCLEAN >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EUCLEAN ((DeeObject *)&posix_EUCLEAN)
PRIVATE DEFINE_INT30(posix_EUCLEAN, EUCLEAN);
#elif EUCLEAN >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EUCLEAN ((DeeObject *)&posix_EUCLEAN)
PRIVATE DEFINE_INT45(posix_EUCLEAN, EUCLEAN);
#elif EUCLEAN >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EUCLEAN ((DeeObject *)&posix_EUCLEAN)
PRIVATE DEFINE_INT60(posix_EUCLEAN, EUCLEAN);
#else
#define OBJ_posix_EUCLEAN ((DeeObject *)&posix_EUCLEAN)
PRIVATE DEFINE_INT75(posix_EUCLEAN, EUCLEAN);
#endif
#endif /* EUCLEAN < 0 */
#else /* EUCLEAN */
#define POSIX_EUCLEAN_DEF /* nothing */
#endif /* !EUCLEAN */
#ifdef ENOTNAM
#define POSIX_ENOTNAM_DEF \
	{ "ENOTNAM", OBJ_posix_ENOTNAM, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Not a XENIX named type file" },
#if DeeInt_IsSmallInt(ENOTNAM)
#define OBJ_posix_ENOTNAM DeeInt_ForSmallInt(ENOTNAM)
#elif ENOTNAM >= 0
#if ENOTNAM <= 0x7fffull /* 15-bit */
#define OBJ_posix_ENOTNAM ((DeeObject *)&posix_ENOTNAM)
PRIVATE DEFINE_UINT15(posix_ENOTNAM, ENOTNAM);
#elif ENOTNAM <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ENOTNAM ((DeeObject *)&posix_ENOTNAM)
PRIVATE DEFINE_UINT30(posix_ENOTNAM, ENOTNAM);
#elif ENOTNAM <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ENOTNAM ((DeeObject *)&posix_ENOTNAM)
PRIVATE DEFINE_UINT45(posix_ENOTNAM, ENOTNAM);
#elif ENOTNAM <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ENOTNAM ((DeeObject *)&posix_ENOTNAM)
PRIVATE DEFINE_UINT60(posix_ENOTNAM, ENOTNAM);
#else
#define OBJ_posix_ENOTNAM ((DeeObject *)&posix_ENOTNAM)
PRIVATE DEFINE_UINT75(posix_ENOTNAM, ENOTNAM);
#endif
#else /* ENOTNAM >= 0 */
#if ENOTNAM >= -0x4000ll /* 15-bit */
#define OBJ_posix_ENOTNAM ((DeeObject *)&posix_ENOTNAM)
PRIVATE DEFINE_INT15(posix_ENOTNAM, ENOTNAM);
#elif ENOTNAM >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ENOTNAM ((DeeObject *)&posix_ENOTNAM)
PRIVATE DEFINE_INT30(posix_ENOTNAM, ENOTNAM);
#elif ENOTNAM >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ENOTNAM ((DeeObject *)&posix_ENOTNAM)
PRIVATE DEFINE_INT45(posix_ENOTNAM, ENOTNAM);
#elif ENOTNAM >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ENOTNAM ((DeeObject *)&posix_ENOTNAM)
PRIVATE DEFINE_INT60(posix_ENOTNAM, ENOTNAM);
#else
#define OBJ_posix_ENOTNAM ((DeeObject *)&posix_ENOTNAM)
PRIVATE DEFINE_INT75(posix_ENOTNAM, ENOTNAM);
#endif
#endif /* ENOTNAM < 0 */
#else /* ENOTNAM */
#define POSIX_ENOTNAM_DEF /* nothing */
#endif /* !ENOTNAM */
#ifdef ENAVAIL
#define POSIX_ENAVAIL_DEF \
	{ "ENAVAIL", OBJ_posix_ENAVAIL, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "No XENIX semaphores available" },
#if DeeInt_IsSmallInt(ENAVAIL)
#define OBJ_posix_ENAVAIL DeeInt_ForSmallInt(ENAVAIL)
#elif ENAVAIL >= 0
#if ENAVAIL <= 0x7fffull /* 15-bit */
#define OBJ_posix_ENAVAIL ((DeeObject *)&posix_ENAVAIL)
PRIVATE DEFINE_UINT15(posix_ENAVAIL, ENAVAIL);
#elif ENAVAIL <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ENAVAIL ((DeeObject *)&posix_ENAVAIL)
PRIVATE DEFINE_UINT30(posix_ENAVAIL, ENAVAIL);
#elif ENAVAIL <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ENAVAIL ((DeeObject *)&posix_ENAVAIL)
PRIVATE DEFINE_UINT45(posix_ENAVAIL, ENAVAIL);
#elif ENAVAIL <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ENAVAIL ((DeeObject *)&posix_ENAVAIL)
PRIVATE DEFINE_UINT60(posix_ENAVAIL, ENAVAIL);
#else
#define OBJ_posix_ENAVAIL ((DeeObject *)&posix_ENAVAIL)
PRIVATE DEFINE_UINT75(posix_ENAVAIL, ENAVAIL);
#endif
#else /* ENAVAIL >= 0 */
#if ENAVAIL >= -0x4000ll /* 15-bit */
#define OBJ_posix_ENAVAIL ((DeeObject *)&posix_ENAVAIL)
PRIVATE DEFINE_INT15(posix_ENAVAIL, ENAVAIL);
#elif ENAVAIL >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ENAVAIL ((DeeObject *)&posix_ENAVAIL)
PRIVATE DEFINE_INT30(posix_ENAVAIL, ENAVAIL);
#elif ENAVAIL >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ENAVAIL ((DeeObject *)&posix_ENAVAIL)
PRIVATE DEFINE_INT45(posix_ENAVAIL, ENAVAIL);
#elif ENAVAIL >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ENAVAIL ((DeeObject *)&posix_ENAVAIL)
PRIVATE DEFINE_INT60(posix_ENAVAIL, ENAVAIL);
#else
#define OBJ_posix_ENAVAIL ((DeeObject *)&posix_ENAVAIL)
PRIVATE DEFINE_INT75(posix_ENAVAIL, ENAVAIL);
#endif
#endif /* ENAVAIL < 0 */
#else /* ENAVAIL */
#define POSIX_ENAVAIL_DEF /* nothing */
#endif /* !ENAVAIL */
#ifdef EISNAM
#define POSIX_EISNAM_DEF \
	{ "EISNAM", OBJ_posix_EISNAM, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Is a named type file" },
#if DeeInt_IsSmallInt(EISNAM)
#define OBJ_posix_EISNAM DeeInt_ForSmallInt(EISNAM)
#elif EISNAM >= 0
#if EISNAM <= 0x7fffull /* 15-bit */
#define OBJ_posix_EISNAM ((DeeObject *)&posix_EISNAM)
PRIVATE DEFINE_UINT15(posix_EISNAM, EISNAM);
#elif EISNAM <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EISNAM ((DeeObject *)&posix_EISNAM)
PRIVATE DEFINE_UINT30(posix_EISNAM, EISNAM);
#elif EISNAM <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EISNAM ((DeeObject *)&posix_EISNAM)
PRIVATE DEFINE_UINT45(posix_EISNAM, EISNAM);
#elif EISNAM <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EISNAM ((DeeObject *)&posix_EISNAM)
PRIVATE DEFINE_UINT60(posix_EISNAM, EISNAM);
#else
#define OBJ_posix_EISNAM ((DeeObject *)&posix_EISNAM)
PRIVATE DEFINE_UINT75(posix_EISNAM, EISNAM);
#endif
#else /* EISNAM >= 0 */
#if EISNAM >= -0x4000ll /* 15-bit */
#define OBJ_posix_EISNAM ((DeeObject *)&posix_EISNAM)
PRIVATE DEFINE_INT15(posix_EISNAM, EISNAM);
#elif EISNAM >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EISNAM ((DeeObject *)&posix_EISNAM)
PRIVATE DEFINE_INT30(posix_EISNAM, EISNAM);
#elif EISNAM >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EISNAM ((DeeObject *)&posix_EISNAM)
PRIVATE DEFINE_INT45(posix_EISNAM, EISNAM);
#elif EISNAM >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EISNAM ((DeeObject *)&posix_EISNAM)
PRIVATE DEFINE_INT60(posix_EISNAM, EISNAM);
#else
#define OBJ_posix_EISNAM ((DeeObject *)&posix_EISNAM)
PRIVATE DEFINE_INT75(posix_EISNAM, EISNAM);
#endif
#endif /* EISNAM < 0 */
#else /* EISNAM */
#define POSIX_EISNAM_DEF /* nothing */
#endif /* !EISNAM */
#ifdef EREMOTEIO
#define POSIX_EREMOTEIO_DEF \
	{ "EREMOTEIO", OBJ_posix_EREMOTEIO, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Remote I/O error" },
#if DeeInt_IsSmallInt(EREMOTEIO)
#define OBJ_posix_EREMOTEIO DeeInt_ForSmallInt(EREMOTEIO)
#elif EREMOTEIO >= 0
#if EREMOTEIO <= 0x7fffull /* 15-bit */
#define OBJ_posix_EREMOTEIO ((DeeObject *)&posix_EREMOTEIO)
PRIVATE DEFINE_UINT15(posix_EREMOTEIO, EREMOTEIO);
#elif EREMOTEIO <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EREMOTEIO ((DeeObject *)&posix_EREMOTEIO)
PRIVATE DEFINE_UINT30(posix_EREMOTEIO, EREMOTEIO);
#elif EREMOTEIO <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EREMOTEIO ((DeeObject *)&posix_EREMOTEIO)
PRIVATE DEFINE_UINT45(posix_EREMOTEIO, EREMOTEIO);
#elif EREMOTEIO <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EREMOTEIO ((DeeObject *)&posix_EREMOTEIO)
PRIVATE DEFINE_UINT60(posix_EREMOTEIO, EREMOTEIO);
#else
#define OBJ_posix_EREMOTEIO ((DeeObject *)&posix_EREMOTEIO)
PRIVATE DEFINE_UINT75(posix_EREMOTEIO, EREMOTEIO);
#endif
#else /* EREMOTEIO >= 0 */
#if EREMOTEIO >= -0x4000ll /* 15-bit */
#define OBJ_posix_EREMOTEIO ((DeeObject *)&posix_EREMOTEIO)
PRIVATE DEFINE_INT15(posix_EREMOTEIO, EREMOTEIO);
#elif EREMOTEIO >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EREMOTEIO ((DeeObject *)&posix_EREMOTEIO)
PRIVATE DEFINE_INT30(posix_EREMOTEIO, EREMOTEIO);
#elif EREMOTEIO >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EREMOTEIO ((DeeObject *)&posix_EREMOTEIO)
PRIVATE DEFINE_INT45(posix_EREMOTEIO, EREMOTEIO);
#elif EREMOTEIO >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EREMOTEIO ((DeeObject *)&posix_EREMOTEIO)
PRIVATE DEFINE_INT60(posix_EREMOTEIO, EREMOTEIO);
#else
#define OBJ_posix_EREMOTEIO ((DeeObject *)&posix_EREMOTEIO)
PRIVATE DEFINE_INT75(posix_EREMOTEIO, EREMOTEIO);
#endif
#endif /* EREMOTEIO < 0 */
#else /* EREMOTEIO */
#define POSIX_EREMOTEIO_DEF /* nothing */
#endif /* !EREMOTEIO */
#ifdef EDQUOT
#define POSIX_EDQUOT_DEF \
	{ "EDQUOT", OBJ_posix_EDQUOT, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Quota exceeded" },
#if DeeInt_IsSmallInt(EDQUOT)
#define OBJ_posix_EDQUOT DeeInt_ForSmallInt(EDQUOT)
#elif EDQUOT >= 0
#if EDQUOT <= 0x7fffull /* 15-bit */
#define OBJ_posix_EDQUOT ((DeeObject *)&posix_EDQUOT)
PRIVATE DEFINE_UINT15(posix_EDQUOT, EDQUOT);
#elif EDQUOT <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EDQUOT ((DeeObject *)&posix_EDQUOT)
PRIVATE DEFINE_UINT30(posix_EDQUOT, EDQUOT);
#elif EDQUOT <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EDQUOT ((DeeObject *)&posix_EDQUOT)
PRIVATE DEFINE_UINT45(posix_EDQUOT, EDQUOT);
#elif EDQUOT <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EDQUOT ((DeeObject *)&posix_EDQUOT)
PRIVATE DEFINE_UINT60(posix_EDQUOT, EDQUOT);
#else
#define OBJ_posix_EDQUOT ((DeeObject *)&posix_EDQUOT)
PRIVATE DEFINE_UINT75(posix_EDQUOT, EDQUOT);
#endif
#else /* EDQUOT >= 0 */
#if EDQUOT >= -0x4000ll /* 15-bit */
#define OBJ_posix_EDQUOT ((DeeObject *)&posix_EDQUOT)
PRIVATE DEFINE_INT15(posix_EDQUOT, EDQUOT);
#elif EDQUOT >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EDQUOT ((DeeObject *)&posix_EDQUOT)
PRIVATE DEFINE_INT30(posix_EDQUOT, EDQUOT);
#elif EDQUOT >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EDQUOT ((DeeObject *)&posix_EDQUOT)
PRIVATE DEFINE_INT45(posix_EDQUOT, EDQUOT);
#elif EDQUOT >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EDQUOT ((DeeObject *)&posix_EDQUOT)
PRIVATE DEFINE_INT60(posix_EDQUOT, EDQUOT);
#else
#define OBJ_posix_EDQUOT ((DeeObject *)&posix_EDQUOT)
PRIVATE DEFINE_INT75(posix_EDQUOT, EDQUOT);
#endif
#endif /* EDQUOT < 0 */
#else /* EDQUOT */
#define POSIX_EDQUOT_DEF /* nothing */
#endif /* !EDQUOT */
#ifdef ENOMEDIUM
#define POSIX_ENOMEDIUM_DEF \
	{ "ENOMEDIUM", OBJ_posix_ENOMEDIUM, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "No medium found" },
#if DeeInt_IsSmallInt(ENOMEDIUM)
#define OBJ_posix_ENOMEDIUM DeeInt_ForSmallInt(ENOMEDIUM)
#elif ENOMEDIUM >= 0
#if ENOMEDIUM <= 0x7fffull /* 15-bit */
#define OBJ_posix_ENOMEDIUM ((DeeObject *)&posix_ENOMEDIUM)
PRIVATE DEFINE_UINT15(posix_ENOMEDIUM, ENOMEDIUM);
#elif ENOMEDIUM <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ENOMEDIUM ((DeeObject *)&posix_ENOMEDIUM)
PRIVATE DEFINE_UINT30(posix_ENOMEDIUM, ENOMEDIUM);
#elif ENOMEDIUM <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ENOMEDIUM ((DeeObject *)&posix_ENOMEDIUM)
PRIVATE DEFINE_UINT45(posix_ENOMEDIUM, ENOMEDIUM);
#elif ENOMEDIUM <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ENOMEDIUM ((DeeObject *)&posix_ENOMEDIUM)
PRIVATE DEFINE_UINT60(posix_ENOMEDIUM, ENOMEDIUM);
#else
#define OBJ_posix_ENOMEDIUM ((DeeObject *)&posix_ENOMEDIUM)
PRIVATE DEFINE_UINT75(posix_ENOMEDIUM, ENOMEDIUM);
#endif
#else /* ENOMEDIUM >= 0 */
#if ENOMEDIUM >= -0x4000ll /* 15-bit */
#define OBJ_posix_ENOMEDIUM ((DeeObject *)&posix_ENOMEDIUM)
PRIVATE DEFINE_INT15(posix_ENOMEDIUM, ENOMEDIUM);
#elif ENOMEDIUM >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ENOMEDIUM ((DeeObject *)&posix_ENOMEDIUM)
PRIVATE DEFINE_INT30(posix_ENOMEDIUM, ENOMEDIUM);
#elif ENOMEDIUM >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ENOMEDIUM ((DeeObject *)&posix_ENOMEDIUM)
PRIVATE DEFINE_INT45(posix_ENOMEDIUM, ENOMEDIUM);
#elif ENOMEDIUM >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ENOMEDIUM ((DeeObject *)&posix_ENOMEDIUM)
PRIVATE DEFINE_INT60(posix_ENOMEDIUM, ENOMEDIUM);
#else
#define OBJ_posix_ENOMEDIUM ((DeeObject *)&posix_ENOMEDIUM)
PRIVATE DEFINE_INT75(posix_ENOMEDIUM, ENOMEDIUM);
#endif
#endif /* ENOMEDIUM < 0 */
#else /* ENOMEDIUM */
#define POSIX_ENOMEDIUM_DEF /* nothing */
#endif /* !ENOMEDIUM */
#ifdef EMEDIUMTYPE
#define POSIX_EMEDIUMTYPE_DEF \
	{ "EMEDIUMTYPE", OBJ_posix_EMEDIUMTYPE, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Wrong medium type" },
#if DeeInt_IsSmallInt(EMEDIUMTYPE)
#define OBJ_posix_EMEDIUMTYPE DeeInt_ForSmallInt(EMEDIUMTYPE)
#elif EMEDIUMTYPE >= 0
#if EMEDIUMTYPE <= 0x7fffull /* 15-bit */
#define OBJ_posix_EMEDIUMTYPE ((DeeObject *)&posix_EMEDIUMTYPE)
PRIVATE DEFINE_UINT15(posix_EMEDIUMTYPE, EMEDIUMTYPE);
#elif EMEDIUMTYPE <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EMEDIUMTYPE ((DeeObject *)&posix_EMEDIUMTYPE)
PRIVATE DEFINE_UINT30(posix_EMEDIUMTYPE, EMEDIUMTYPE);
#elif EMEDIUMTYPE <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EMEDIUMTYPE ((DeeObject *)&posix_EMEDIUMTYPE)
PRIVATE DEFINE_UINT45(posix_EMEDIUMTYPE, EMEDIUMTYPE);
#elif EMEDIUMTYPE <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EMEDIUMTYPE ((DeeObject *)&posix_EMEDIUMTYPE)
PRIVATE DEFINE_UINT60(posix_EMEDIUMTYPE, EMEDIUMTYPE);
#else
#define OBJ_posix_EMEDIUMTYPE ((DeeObject *)&posix_EMEDIUMTYPE)
PRIVATE DEFINE_UINT75(posix_EMEDIUMTYPE, EMEDIUMTYPE);
#endif
#else /* EMEDIUMTYPE >= 0 */
#if EMEDIUMTYPE >= -0x4000ll /* 15-bit */
#define OBJ_posix_EMEDIUMTYPE ((DeeObject *)&posix_EMEDIUMTYPE)
PRIVATE DEFINE_INT15(posix_EMEDIUMTYPE, EMEDIUMTYPE);
#elif EMEDIUMTYPE >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EMEDIUMTYPE ((DeeObject *)&posix_EMEDIUMTYPE)
PRIVATE DEFINE_INT30(posix_EMEDIUMTYPE, EMEDIUMTYPE);
#elif EMEDIUMTYPE >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EMEDIUMTYPE ((DeeObject *)&posix_EMEDIUMTYPE)
PRIVATE DEFINE_INT45(posix_EMEDIUMTYPE, EMEDIUMTYPE);
#elif EMEDIUMTYPE >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EMEDIUMTYPE ((DeeObject *)&posix_EMEDIUMTYPE)
PRIVATE DEFINE_INT60(posix_EMEDIUMTYPE, EMEDIUMTYPE);
#else
#define OBJ_posix_EMEDIUMTYPE ((DeeObject *)&posix_EMEDIUMTYPE)
PRIVATE DEFINE_INT75(posix_EMEDIUMTYPE, EMEDIUMTYPE);
#endif
#endif /* EMEDIUMTYPE < 0 */
#else /* EMEDIUMTYPE */
#define POSIX_EMEDIUMTYPE_DEF /* nothing */
#endif /* !EMEDIUMTYPE */
#ifdef ECANCELED
#define POSIX_ECANCELED_DEF \
	{ "ECANCELED", OBJ_posix_ECANCELED, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Operation Canceled" },
#if DeeInt_IsSmallInt(ECANCELED)
#define OBJ_posix_ECANCELED DeeInt_ForSmallInt(ECANCELED)
#elif ECANCELED >= 0
#if ECANCELED <= 0x7fffull /* 15-bit */
#define OBJ_posix_ECANCELED ((DeeObject *)&posix_ECANCELED)
PRIVATE DEFINE_UINT15(posix_ECANCELED, ECANCELED);
#elif ECANCELED <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ECANCELED ((DeeObject *)&posix_ECANCELED)
PRIVATE DEFINE_UINT30(posix_ECANCELED, ECANCELED);
#elif ECANCELED <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ECANCELED ((DeeObject *)&posix_ECANCELED)
PRIVATE DEFINE_UINT45(posix_ECANCELED, ECANCELED);
#elif ECANCELED <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ECANCELED ((DeeObject *)&posix_ECANCELED)
PRIVATE DEFINE_UINT60(posix_ECANCELED, ECANCELED);
#else
#define OBJ_posix_ECANCELED ((DeeObject *)&posix_ECANCELED)
PRIVATE DEFINE_UINT75(posix_ECANCELED, ECANCELED);
#endif
#else /* ECANCELED >= 0 */
#if ECANCELED >= -0x4000ll /* 15-bit */
#define OBJ_posix_ECANCELED ((DeeObject *)&posix_ECANCELED)
PRIVATE DEFINE_INT15(posix_ECANCELED, ECANCELED);
#elif ECANCELED >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ECANCELED ((DeeObject *)&posix_ECANCELED)
PRIVATE DEFINE_INT30(posix_ECANCELED, ECANCELED);
#elif ECANCELED >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ECANCELED ((DeeObject *)&posix_ECANCELED)
PRIVATE DEFINE_INT45(posix_ECANCELED, ECANCELED);
#elif ECANCELED >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ECANCELED ((DeeObject *)&posix_ECANCELED)
PRIVATE DEFINE_INT60(posix_ECANCELED, ECANCELED);
#else
#define OBJ_posix_ECANCELED ((DeeObject *)&posix_ECANCELED)
PRIVATE DEFINE_INT75(posix_ECANCELED, ECANCELED);
#endif
#endif /* ECANCELED < 0 */
#else /* ECANCELED */
#define POSIX_ECANCELED_DEF /* nothing */
#endif /* !ECANCELED */
#ifdef ENOKEY
#define POSIX_ENOKEY_DEF \
	{ "ENOKEY", OBJ_posix_ENOKEY, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Required key not available" },
#if DeeInt_IsSmallInt(ENOKEY)
#define OBJ_posix_ENOKEY DeeInt_ForSmallInt(ENOKEY)
#elif ENOKEY >= 0
#if ENOKEY <= 0x7fffull /* 15-bit */
#define OBJ_posix_ENOKEY ((DeeObject *)&posix_ENOKEY)
PRIVATE DEFINE_UINT15(posix_ENOKEY, ENOKEY);
#elif ENOKEY <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ENOKEY ((DeeObject *)&posix_ENOKEY)
PRIVATE DEFINE_UINT30(posix_ENOKEY, ENOKEY);
#elif ENOKEY <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ENOKEY ((DeeObject *)&posix_ENOKEY)
PRIVATE DEFINE_UINT45(posix_ENOKEY, ENOKEY);
#elif ENOKEY <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ENOKEY ((DeeObject *)&posix_ENOKEY)
PRIVATE DEFINE_UINT60(posix_ENOKEY, ENOKEY);
#else
#define OBJ_posix_ENOKEY ((DeeObject *)&posix_ENOKEY)
PRIVATE DEFINE_UINT75(posix_ENOKEY, ENOKEY);
#endif
#else /* ENOKEY >= 0 */
#if ENOKEY >= -0x4000ll /* 15-bit */
#define OBJ_posix_ENOKEY ((DeeObject *)&posix_ENOKEY)
PRIVATE DEFINE_INT15(posix_ENOKEY, ENOKEY);
#elif ENOKEY >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ENOKEY ((DeeObject *)&posix_ENOKEY)
PRIVATE DEFINE_INT30(posix_ENOKEY, ENOKEY);
#elif ENOKEY >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ENOKEY ((DeeObject *)&posix_ENOKEY)
PRIVATE DEFINE_INT45(posix_ENOKEY, ENOKEY);
#elif ENOKEY >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ENOKEY ((DeeObject *)&posix_ENOKEY)
PRIVATE DEFINE_INT60(posix_ENOKEY, ENOKEY);
#else
#define OBJ_posix_ENOKEY ((DeeObject *)&posix_ENOKEY)
PRIVATE DEFINE_INT75(posix_ENOKEY, ENOKEY);
#endif
#endif /* ENOKEY < 0 */
#else /* ENOKEY */
#define POSIX_ENOKEY_DEF /* nothing */
#endif /* !ENOKEY */
#ifdef EKEYEXPIRED
#define POSIX_EKEYEXPIRED_DEF \
	{ "EKEYEXPIRED", OBJ_posix_EKEYEXPIRED, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Key has expired" },
#if DeeInt_IsSmallInt(EKEYEXPIRED)
#define OBJ_posix_EKEYEXPIRED DeeInt_ForSmallInt(EKEYEXPIRED)
#elif EKEYEXPIRED >= 0
#if EKEYEXPIRED <= 0x7fffull /* 15-bit */
#define OBJ_posix_EKEYEXPIRED ((DeeObject *)&posix_EKEYEXPIRED)
PRIVATE DEFINE_UINT15(posix_EKEYEXPIRED, EKEYEXPIRED);
#elif EKEYEXPIRED <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EKEYEXPIRED ((DeeObject *)&posix_EKEYEXPIRED)
PRIVATE DEFINE_UINT30(posix_EKEYEXPIRED, EKEYEXPIRED);
#elif EKEYEXPIRED <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EKEYEXPIRED ((DeeObject *)&posix_EKEYEXPIRED)
PRIVATE DEFINE_UINT45(posix_EKEYEXPIRED, EKEYEXPIRED);
#elif EKEYEXPIRED <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EKEYEXPIRED ((DeeObject *)&posix_EKEYEXPIRED)
PRIVATE DEFINE_UINT60(posix_EKEYEXPIRED, EKEYEXPIRED);
#else
#define OBJ_posix_EKEYEXPIRED ((DeeObject *)&posix_EKEYEXPIRED)
PRIVATE DEFINE_UINT75(posix_EKEYEXPIRED, EKEYEXPIRED);
#endif
#else /* EKEYEXPIRED >= 0 */
#if EKEYEXPIRED >= -0x4000ll /* 15-bit */
#define OBJ_posix_EKEYEXPIRED ((DeeObject *)&posix_EKEYEXPIRED)
PRIVATE DEFINE_INT15(posix_EKEYEXPIRED, EKEYEXPIRED);
#elif EKEYEXPIRED >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EKEYEXPIRED ((DeeObject *)&posix_EKEYEXPIRED)
PRIVATE DEFINE_INT30(posix_EKEYEXPIRED, EKEYEXPIRED);
#elif EKEYEXPIRED >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EKEYEXPIRED ((DeeObject *)&posix_EKEYEXPIRED)
PRIVATE DEFINE_INT45(posix_EKEYEXPIRED, EKEYEXPIRED);
#elif EKEYEXPIRED >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EKEYEXPIRED ((DeeObject *)&posix_EKEYEXPIRED)
PRIVATE DEFINE_INT60(posix_EKEYEXPIRED, EKEYEXPIRED);
#else
#define OBJ_posix_EKEYEXPIRED ((DeeObject *)&posix_EKEYEXPIRED)
PRIVATE DEFINE_INT75(posix_EKEYEXPIRED, EKEYEXPIRED);
#endif
#endif /* EKEYEXPIRED < 0 */
#else /* EKEYEXPIRED */
#define POSIX_EKEYEXPIRED_DEF /* nothing */
#endif /* !EKEYEXPIRED */
#ifdef EKEYREVOKED
#define POSIX_EKEYREVOKED_DEF \
	{ "EKEYREVOKED", OBJ_posix_EKEYREVOKED, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Key has been revoked" },
#if DeeInt_IsSmallInt(EKEYREVOKED)
#define OBJ_posix_EKEYREVOKED DeeInt_ForSmallInt(EKEYREVOKED)
#elif EKEYREVOKED >= 0
#if EKEYREVOKED <= 0x7fffull /* 15-bit */
#define OBJ_posix_EKEYREVOKED ((DeeObject *)&posix_EKEYREVOKED)
PRIVATE DEFINE_UINT15(posix_EKEYREVOKED, EKEYREVOKED);
#elif EKEYREVOKED <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EKEYREVOKED ((DeeObject *)&posix_EKEYREVOKED)
PRIVATE DEFINE_UINT30(posix_EKEYREVOKED, EKEYREVOKED);
#elif EKEYREVOKED <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EKEYREVOKED ((DeeObject *)&posix_EKEYREVOKED)
PRIVATE DEFINE_UINT45(posix_EKEYREVOKED, EKEYREVOKED);
#elif EKEYREVOKED <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EKEYREVOKED ((DeeObject *)&posix_EKEYREVOKED)
PRIVATE DEFINE_UINT60(posix_EKEYREVOKED, EKEYREVOKED);
#else
#define OBJ_posix_EKEYREVOKED ((DeeObject *)&posix_EKEYREVOKED)
PRIVATE DEFINE_UINT75(posix_EKEYREVOKED, EKEYREVOKED);
#endif
#else /* EKEYREVOKED >= 0 */
#if EKEYREVOKED >= -0x4000ll /* 15-bit */
#define OBJ_posix_EKEYREVOKED ((DeeObject *)&posix_EKEYREVOKED)
PRIVATE DEFINE_INT15(posix_EKEYREVOKED, EKEYREVOKED);
#elif EKEYREVOKED >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EKEYREVOKED ((DeeObject *)&posix_EKEYREVOKED)
PRIVATE DEFINE_INT30(posix_EKEYREVOKED, EKEYREVOKED);
#elif EKEYREVOKED >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EKEYREVOKED ((DeeObject *)&posix_EKEYREVOKED)
PRIVATE DEFINE_INT45(posix_EKEYREVOKED, EKEYREVOKED);
#elif EKEYREVOKED >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EKEYREVOKED ((DeeObject *)&posix_EKEYREVOKED)
PRIVATE DEFINE_INT60(posix_EKEYREVOKED, EKEYREVOKED);
#else
#define OBJ_posix_EKEYREVOKED ((DeeObject *)&posix_EKEYREVOKED)
PRIVATE DEFINE_INT75(posix_EKEYREVOKED, EKEYREVOKED);
#endif
#endif /* EKEYREVOKED < 0 */
#else /* EKEYREVOKED */
#define POSIX_EKEYREVOKED_DEF /* nothing */
#endif /* !EKEYREVOKED */
#ifdef EKEYREJECTED
#define POSIX_EKEYREJECTED_DEF \
	{ "EKEYREJECTED", OBJ_posix_EKEYREJECTED, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Key was rejected by service" },
#if DeeInt_IsSmallInt(EKEYREJECTED)
#define OBJ_posix_EKEYREJECTED DeeInt_ForSmallInt(EKEYREJECTED)
#elif EKEYREJECTED >= 0
#if EKEYREJECTED <= 0x7fffull /* 15-bit */
#define OBJ_posix_EKEYREJECTED ((DeeObject *)&posix_EKEYREJECTED)
PRIVATE DEFINE_UINT15(posix_EKEYREJECTED, EKEYREJECTED);
#elif EKEYREJECTED <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EKEYREJECTED ((DeeObject *)&posix_EKEYREJECTED)
PRIVATE DEFINE_UINT30(posix_EKEYREJECTED, EKEYREJECTED);
#elif EKEYREJECTED <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EKEYREJECTED ((DeeObject *)&posix_EKEYREJECTED)
PRIVATE DEFINE_UINT45(posix_EKEYREJECTED, EKEYREJECTED);
#elif EKEYREJECTED <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EKEYREJECTED ((DeeObject *)&posix_EKEYREJECTED)
PRIVATE DEFINE_UINT60(posix_EKEYREJECTED, EKEYREJECTED);
#else
#define OBJ_posix_EKEYREJECTED ((DeeObject *)&posix_EKEYREJECTED)
PRIVATE DEFINE_UINT75(posix_EKEYREJECTED, EKEYREJECTED);
#endif
#else /* EKEYREJECTED >= 0 */
#if EKEYREJECTED >= -0x4000ll /* 15-bit */
#define OBJ_posix_EKEYREJECTED ((DeeObject *)&posix_EKEYREJECTED)
PRIVATE DEFINE_INT15(posix_EKEYREJECTED, EKEYREJECTED);
#elif EKEYREJECTED >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EKEYREJECTED ((DeeObject *)&posix_EKEYREJECTED)
PRIVATE DEFINE_INT30(posix_EKEYREJECTED, EKEYREJECTED);
#elif EKEYREJECTED >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EKEYREJECTED ((DeeObject *)&posix_EKEYREJECTED)
PRIVATE DEFINE_INT45(posix_EKEYREJECTED, EKEYREJECTED);
#elif EKEYREJECTED >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EKEYREJECTED ((DeeObject *)&posix_EKEYREJECTED)
PRIVATE DEFINE_INT60(posix_EKEYREJECTED, EKEYREJECTED);
#else
#define OBJ_posix_EKEYREJECTED ((DeeObject *)&posix_EKEYREJECTED)
PRIVATE DEFINE_INT75(posix_EKEYREJECTED, EKEYREJECTED);
#endif
#endif /* EKEYREJECTED < 0 */
#else /* EKEYREJECTED */
#define POSIX_EKEYREJECTED_DEF /* nothing */
#endif /* !EKEYREJECTED */
#ifdef EOWNERDEAD
#define POSIX_EOWNERDEAD_DEF \
	{ "EOWNERDEAD", OBJ_posix_EOWNERDEAD, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Owner died" },
#if DeeInt_IsSmallInt(EOWNERDEAD)
#define OBJ_posix_EOWNERDEAD DeeInt_ForSmallInt(EOWNERDEAD)
#elif EOWNERDEAD >= 0
#if EOWNERDEAD <= 0x7fffull /* 15-bit */
#define OBJ_posix_EOWNERDEAD ((DeeObject *)&posix_EOWNERDEAD)
PRIVATE DEFINE_UINT15(posix_EOWNERDEAD, EOWNERDEAD);
#elif EOWNERDEAD <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EOWNERDEAD ((DeeObject *)&posix_EOWNERDEAD)
PRIVATE DEFINE_UINT30(posix_EOWNERDEAD, EOWNERDEAD);
#elif EOWNERDEAD <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EOWNERDEAD ((DeeObject *)&posix_EOWNERDEAD)
PRIVATE DEFINE_UINT45(posix_EOWNERDEAD, EOWNERDEAD);
#elif EOWNERDEAD <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EOWNERDEAD ((DeeObject *)&posix_EOWNERDEAD)
PRIVATE DEFINE_UINT60(posix_EOWNERDEAD, EOWNERDEAD);
#else
#define OBJ_posix_EOWNERDEAD ((DeeObject *)&posix_EOWNERDEAD)
PRIVATE DEFINE_UINT75(posix_EOWNERDEAD, EOWNERDEAD);
#endif
#else /* EOWNERDEAD >= 0 */
#if EOWNERDEAD >= -0x4000ll /* 15-bit */
#define OBJ_posix_EOWNERDEAD ((DeeObject *)&posix_EOWNERDEAD)
PRIVATE DEFINE_INT15(posix_EOWNERDEAD, EOWNERDEAD);
#elif EOWNERDEAD >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EOWNERDEAD ((DeeObject *)&posix_EOWNERDEAD)
PRIVATE DEFINE_INT30(posix_EOWNERDEAD, EOWNERDEAD);
#elif EOWNERDEAD >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EOWNERDEAD ((DeeObject *)&posix_EOWNERDEAD)
PRIVATE DEFINE_INT45(posix_EOWNERDEAD, EOWNERDEAD);
#elif EOWNERDEAD >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EOWNERDEAD ((DeeObject *)&posix_EOWNERDEAD)
PRIVATE DEFINE_INT60(posix_EOWNERDEAD, EOWNERDEAD);
#else
#define OBJ_posix_EOWNERDEAD ((DeeObject *)&posix_EOWNERDEAD)
PRIVATE DEFINE_INT75(posix_EOWNERDEAD, EOWNERDEAD);
#endif
#endif /* EOWNERDEAD < 0 */
#else /* EOWNERDEAD */
#define POSIX_EOWNERDEAD_DEF /* nothing */
#endif /* !EOWNERDEAD */
#ifdef ENOTRECOVERABLE
#define POSIX_ENOTRECOVERABLE_DEF \
	{ "ENOTRECOVERABLE", OBJ_posix_ENOTRECOVERABLE, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "State not recoverable" },
#if DeeInt_IsSmallInt(ENOTRECOVERABLE)
#define OBJ_posix_ENOTRECOVERABLE DeeInt_ForSmallInt(ENOTRECOVERABLE)
#elif ENOTRECOVERABLE >= 0
#if ENOTRECOVERABLE <= 0x7fffull /* 15-bit */
#define OBJ_posix_ENOTRECOVERABLE ((DeeObject *)&posix_ENOTRECOVERABLE)
PRIVATE DEFINE_UINT15(posix_ENOTRECOVERABLE, ENOTRECOVERABLE);
#elif ENOTRECOVERABLE <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ENOTRECOVERABLE ((DeeObject *)&posix_ENOTRECOVERABLE)
PRIVATE DEFINE_UINT30(posix_ENOTRECOVERABLE, ENOTRECOVERABLE);
#elif ENOTRECOVERABLE <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ENOTRECOVERABLE ((DeeObject *)&posix_ENOTRECOVERABLE)
PRIVATE DEFINE_UINT45(posix_ENOTRECOVERABLE, ENOTRECOVERABLE);
#elif ENOTRECOVERABLE <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ENOTRECOVERABLE ((DeeObject *)&posix_ENOTRECOVERABLE)
PRIVATE DEFINE_UINT60(posix_ENOTRECOVERABLE, ENOTRECOVERABLE);
#else
#define OBJ_posix_ENOTRECOVERABLE ((DeeObject *)&posix_ENOTRECOVERABLE)
PRIVATE DEFINE_UINT75(posix_ENOTRECOVERABLE, ENOTRECOVERABLE);
#endif
#else /* ENOTRECOVERABLE >= 0 */
#if ENOTRECOVERABLE >= -0x4000ll /* 15-bit */
#define OBJ_posix_ENOTRECOVERABLE ((DeeObject *)&posix_ENOTRECOVERABLE)
PRIVATE DEFINE_INT15(posix_ENOTRECOVERABLE, ENOTRECOVERABLE);
#elif ENOTRECOVERABLE >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ENOTRECOVERABLE ((DeeObject *)&posix_ENOTRECOVERABLE)
PRIVATE DEFINE_INT30(posix_ENOTRECOVERABLE, ENOTRECOVERABLE);
#elif ENOTRECOVERABLE >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ENOTRECOVERABLE ((DeeObject *)&posix_ENOTRECOVERABLE)
PRIVATE DEFINE_INT45(posix_ENOTRECOVERABLE, ENOTRECOVERABLE);
#elif ENOTRECOVERABLE >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ENOTRECOVERABLE ((DeeObject *)&posix_ENOTRECOVERABLE)
PRIVATE DEFINE_INT60(posix_ENOTRECOVERABLE, ENOTRECOVERABLE);
#else
#define OBJ_posix_ENOTRECOVERABLE ((DeeObject *)&posix_ENOTRECOVERABLE)
PRIVATE DEFINE_INT75(posix_ENOTRECOVERABLE, ENOTRECOVERABLE);
#endif
#endif /* ENOTRECOVERABLE < 0 */
#else /* ENOTRECOVERABLE */
#define POSIX_ENOTRECOVERABLE_DEF /* nothing */
#endif /* !ENOTRECOVERABLE */
#ifdef ERFKILL
#define POSIX_ERFKILL_DEF \
	{ "ERFKILL", OBJ_posix_ERFKILL, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Operation not possible due to RF-kill" },
#if DeeInt_IsSmallInt(ERFKILL)
#define OBJ_posix_ERFKILL DeeInt_ForSmallInt(ERFKILL)
#elif ERFKILL >= 0
#if ERFKILL <= 0x7fffull /* 15-bit */
#define OBJ_posix_ERFKILL ((DeeObject *)&posix_ERFKILL)
PRIVATE DEFINE_UINT15(posix_ERFKILL, ERFKILL);
#elif ERFKILL <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ERFKILL ((DeeObject *)&posix_ERFKILL)
PRIVATE DEFINE_UINT30(posix_ERFKILL, ERFKILL);
#elif ERFKILL <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ERFKILL ((DeeObject *)&posix_ERFKILL)
PRIVATE DEFINE_UINT45(posix_ERFKILL, ERFKILL);
#elif ERFKILL <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ERFKILL ((DeeObject *)&posix_ERFKILL)
PRIVATE DEFINE_UINT60(posix_ERFKILL, ERFKILL);
#else
#define OBJ_posix_ERFKILL ((DeeObject *)&posix_ERFKILL)
PRIVATE DEFINE_UINT75(posix_ERFKILL, ERFKILL);
#endif
#else /* ERFKILL >= 0 */
#if ERFKILL >= -0x4000ll /* 15-bit */
#define OBJ_posix_ERFKILL ((DeeObject *)&posix_ERFKILL)
PRIVATE DEFINE_INT15(posix_ERFKILL, ERFKILL);
#elif ERFKILL >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ERFKILL ((DeeObject *)&posix_ERFKILL)
PRIVATE DEFINE_INT30(posix_ERFKILL, ERFKILL);
#elif ERFKILL >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ERFKILL ((DeeObject *)&posix_ERFKILL)
PRIVATE DEFINE_INT45(posix_ERFKILL, ERFKILL);
#elif ERFKILL >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ERFKILL ((DeeObject *)&posix_ERFKILL)
PRIVATE DEFINE_INT60(posix_ERFKILL, ERFKILL);
#else
#define OBJ_posix_ERFKILL ((DeeObject *)&posix_ERFKILL)
PRIVATE DEFINE_INT75(posix_ERFKILL, ERFKILL);
#endif
#endif /* ERFKILL < 0 */
#else /* ERFKILL */
#define POSIX_ERFKILL_DEF /* nothing */
#endif /* !ERFKILL */
#ifdef EHWPOISON
#define POSIX_EHWPOISON_DEF \
	{ "EHWPOISON", OBJ_posix_EHWPOISON, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Memory page has hardware error" },
#if DeeInt_IsSmallInt(EHWPOISON)
#define OBJ_posix_EHWPOISON DeeInt_ForSmallInt(EHWPOISON)
#elif EHWPOISON >= 0
#if EHWPOISON <= 0x7fffull /* 15-bit */
#define OBJ_posix_EHWPOISON ((DeeObject *)&posix_EHWPOISON)
PRIVATE DEFINE_UINT15(posix_EHWPOISON, EHWPOISON);
#elif EHWPOISON <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EHWPOISON ((DeeObject *)&posix_EHWPOISON)
PRIVATE DEFINE_UINT30(posix_EHWPOISON, EHWPOISON);
#elif EHWPOISON <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EHWPOISON ((DeeObject *)&posix_EHWPOISON)
PRIVATE DEFINE_UINT45(posix_EHWPOISON, EHWPOISON);
#elif EHWPOISON <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EHWPOISON ((DeeObject *)&posix_EHWPOISON)
PRIVATE DEFINE_UINT60(posix_EHWPOISON, EHWPOISON);
#else
#define OBJ_posix_EHWPOISON ((DeeObject *)&posix_EHWPOISON)
PRIVATE DEFINE_UINT75(posix_EHWPOISON, EHWPOISON);
#endif
#else /* EHWPOISON >= 0 */
#if EHWPOISON >= -0x4000ll /* 15-bit */
#define OBJ_posix_EHWPOISON ((DeeObject *)&posix_EHWPOISON)
PRIVATE DEFINE_INT15(posix_EHWPOISON, EHWPOISON);
#elif EHWPOISON >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EHWPOISON ((DeeObject *)&posix_EHWPOISON)
PRIVATE DEFINE_INT30(posix_EHWPOISON, EHWPOISON);
#elif EHWPOISON >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EHWPOISON ((DeeObject *)&posix_EHWPOISON)
PRIVATE DEFINE_INT45(posix_EHWPOISON, EHWPOISON);
#elif EHWPOISON >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EHWPOISON ((DeeObject *)&posix_EHWPOISON)
PRIVATE DEFINE_INT60(posix_EHWPOISON, EHWPOISON);
#else
#define OBJ_posix_EHWPOISON ((DeeObject *)&posix_EHWPOISON)
PRIVATE DEFINE_INT75(posix_EHWPOISON, EHWPOISON);
#endif
#endif /* EHWPOISON < 0 */
#else /* EHWPOISON */
#define POSIX_EHWPOISON_DEF /* nothing */
#endif /* !EHWPOISON */
#ifdef ELBIN
#define POSIX_ELBIN_DEF \
	{ "ELBIN", OBJ_posix_ELBIN, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Inode is remote (not really error)" },
#if DeeInt_IsSmallInt(ELBIN)
#define OBJ_posix_ELBIN DeeInt_ForSmallInt(ELBIN)
#elif ELBIN >= 0
#if ELBIN <= 0x7fffull /* 15-bit */
#define OBJ_posix_ELBIN ((DeeObject *)&posix_ELBIN)
PRIVATE DEFINE_UINT15(posix_ELBIN, ELBIN);
#elif ELBIN <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ELBIN ((DeeObject *)&posix_ELBIN)
PRIVATE DEFINE_UINT30(posix_ELBIN, ELBIN);
#elif ELBIN <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ELBIN ((DeeObject *)&posix_ELBIN)
PRIVATE DEFINE_UINT45(posix_ELBIN, ELBIN);
#elif ELBIN <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ELBIN ((DeeObject *)&posix_ELBIN)
PRIVATE DEFINE_UINT60(posix_ELBIN, ELBIN);
#else
#define OBJ_posix_ELBIN ((DeeObject *)&posix_ELBIN)
PRIVATE DEFINE_UINT75(posix_ELBIN, ELBIN);
#endif
#else /* ELBIN >= 0 */
#if ELBIN >= -0x4000ll /* 15-bit */
#define OBJ_posix_ELBIN ((DeeObject *)&posix_ELBIN)
PRIVATE DEFINE_INT15(posix_ELBIN, ELBIN);
#elif ELBIN >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ELBIN ((DeeObject *)&posix_ELBIN)
PRIVATE DEFINE_INT30(posix_ELBIN, ELBIN);
#elif ELBIN >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ELBIN ((DeeObject *)&posix_ELBIN)
PRIVATE DEFINE_INT45(posix_ELBIN, ELBIN);
#elif ELBIN >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ELBIN ((DeeObject *)&posix_ELBIN)
PRIVATE DEFINE_INT60(posix_ELBIN, ELBIN);
#else
#define OBJ_posix_ELBIN ((DeeObject *)&posix_ELBIN)
PRIVATE DEFINE_INT75(posix_ELBIN, ELBIN);
#endif
#endif /* ELBIN < 0 */
#else /* ELBIN */
#define POSIX_ELBIN_DEF /* nothing */
#endif /* !ELBIN */
#ifdef EPROCLIM
#define POSIX_EPROCLIM_DEF \
	{ "EPROCLIM", OBJ_posix_EPROCLIM, MODSYM_FREADONLY | MODSYM_FCONSTEXPR },
#if DeeInt_IsSmallInt(EPROCLIM)
#define OBJ_posix_EPROCLIM DeeInt_ForSmallInt(EPROCLIM)
#elif EPROCLIM >= 0
#if EPROCLIM <= 0x7fffull /* 15-bit */
#define OBJ_posix_EPROCLIM ((DeeObject *)&posix_EPROCLIM)
PRIVATE DEFINE_UINT15(posix_EPROCLIM, EPROCLIM);
#elif EPROCLIM <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EPROCLIM ((DeeObject *)&posix_EPROCLIM)
PRIVATE DEFINE_UINT30(posix_EPROCLIM, EPROCLIM);
#elif EPROCLIM <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EPROCLIM ((DeeObject *)&posix_EPROCLIM)
PRIVATE DEFINE_UINT45(posix_EPROCLIM, EPROCLIM);
#elif EPROCLIM <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EPROCLIM ((DeeObject *)&posix_EPROCLIM)
PRIVATE DEFINE_UINT60(posix_EPROCLIM, EPROCLIM);
#else
#define OBJ_posix_EPROCLIM ((DeeObject *)&posix_EPROCLIM)
PRIVATE DEFINE_UINT75(posix_EPROCLIM, EPROCLIM);
#endif
#else /* EPROCLIM >= 0 */
#if EPROCLIM >= -0x4000ll /* 15-bit */
#define OBJ_posix_EPROCLIM ((DeeObject *)&posix_EPROCLIM)
PRIVATE DEFINE_INT15(posix_EPROCLIM, EPROCLIM);
#elif EPROCLIM >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EPROCLIM ((DeeObject *)&posix_EPROCLIM)
PRIVATE DEFINE_INT30(posix_EPROCLIM, EPROCLIM);
#elif EPROCLIM >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EPROCLIM ((DeeObject *)&posix_EPROCLIM)
PRIVATE DEFINE_INT45(posix_EPROCLIM, EPROCLIM);
#elif EPROCLIM >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EPROCLIM ((DeeObject *)&posix_EPROCLIM)
PRIVATE DEFINE_INT60(posix_EPROCLIM, EPROCLIM);
#else
#define OBJ_posix_EPROCLIM ((DeeObject *)&posix_EPROCLIM)
PRIVATE DEFINE_INT75(posix_EPROCLIM, EPROCLIM);
#endif
#endif /* EPROCLIM < 0 */
#else /* EPROCLIM */
#define POSIX_EPROCLIM_DEF /* nothing */
#endif /* !EPROCLIM */
#ifdef EFTYPE
#define POSIX_EFTYPE_DEF \
	{ "EFTYPE", OBJ_posix_EFTYPE, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Inappropriate file type or format" },
#if DeeInt_IsSmallInt(EFTYPE)
#define OBJ_posix_EFTYPE DeeInt_ForSmallInt(EFTYPE)
#elif EFTYPE >= 0
#if EFTYPE <= 0x7fffull /* 15-bit */
#define OBJ_posix_EFTYPE ((DeeObject *)&posix_EFTYPE)
PRIVATE DEFINE_UINT15(posix_EFTYPE, EFTYPE);
#elif EFTYPE <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EFTYPE ((DeeObject *)&posix_EFTYPE)
PRIVATE DEFINE_UINT30(posix_EFTYPE, EFTYPE);
#elif EFTYPE <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EFTYPE ((DeeObject *)&posix_EFTYPE)
PRIVATE DEFINE_UINT45(posix_EFTYPE, EFTYPE);
#elif EFTYPE <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EFTYPE ((DeeObject *)&posix_EFTYPE)
PRIVATE DEFINE_UINT60(posix_EFTYPE, EFTYPE);
#else
#define OBJ_posix_EFTYPE ((DeeObject *)&posix_EFTYPE)
PRIVATE DEFINE_UINT75(posix_EFTYPE, EFTYPE);
#endif
#else /* EFTYPE >= 0 */
#if EFTYPE >= -0x4000ll /* 15-bit */
#define OBJ_posix_EFTYPE ((DeeObject *)&posix_EFTYPE)
PRIVATE DEFINE_INT15(posix_EFTYPE, EFTYPE);
#elif EFTYPE >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EFTYPE ((DeeObject *)&posix_EFTYPE)
PRIVATE DEFINE_INT30(posix_EFTYPE, EFTYPE);
#elif EFTYPE >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EFTYPE ((DeeObject *)&posix_EFTYPE)
PRIVATE DEFINE_INT45(posix_EFTYPE, EFTYPE);
#elif EFTYPE >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EFTYPE ((DeeObject *)&posix_EFTYPE)
PRIVATE DEFINE_INT60(posix_EFTYPE, EFTYPE);
#else
#define OBJ_posix_EFTYPE ((DeeObject *)&posix_EFTYPE)
PRIVATE DEFINE_INT75(posix_EFTYPE, EFTYPE);
#endif
#endif /* EFTYPE < 0 */
#else /* EFTYPE */
#define POSIX_EFTYPE_DEF /* nothing */
#endif /* !EFTYPE */
#ifdef ENMFILE
#define POSIX_ENMFILE_DEF \
	{ "ENMFILE", OBJ_posix_ENMFILE, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "No more files" },
#if DeeInt_IsSmallInt(ENMFILE)
#define OBJ_posix_ENMFILE DeeInt_ForSmallInt(ENMFILE)
#elif ENMFILE >= 0
#if ENMFILE <= 0x7fffull /* 15-bit */
#define OBJ_posix_ENMFILE ((DeeObject *)&posix_ENMFILE)
PRIVATE DEFINE_UINT15(posix_ENMFILE, ENMFILE);
#elif ENMFILE <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ENMFILE ((DeeObject *)&posix_ENMFILE)
PRIVATE DEFINE_UINT30(posix_ENMFILE, ENMFILE);
#elif ENMFILE <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ENMFILE ((DeeObject *)&posix_ENMFILE)
PRIVATE DEFINE_UINT45(posix_ENMFILE, ENMFILE);
#elif ENMFILE <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ENMFILE ((DeeObject *)&posix_ENMFILE)
PRIVATE DEFINE_UINT60(posix_ENMFILE, ENMFILE);
#else
#define OBJ_posix_ENMFILE ((DeeObject *)&posix_ENMFILE)
PRIVATE DEFINE_UINT75(posix_ENMFILE, ENMFILE);
#endif
#else /* ENMFILE >= 0 */
#if ENMFILE >= -0x4000ll /* 15-bit */
#define OBJ_posix_ENMFILE ((DeeObject *)&posix_ENMFILE)
PRIVATE DEFINE_INT15(posix_ENMFILE, ENMFILE);
#elif ENMFILE >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ENMFILE ((DeeObject *)&posix_ENMFILE)
PRIVATE DEFINE_INT30(posix_ENMFILE, ENMFILE);
#elif ENMFILE >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ENMFILE ((DeeObject *)&posix_ENMFILE)
PRIVATE DEFINE_INT45(posix_ENMFILE, ENMFILE);
#elif ENMFILE >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ENMFILE ((DeeObject *)&posix_ENMFILE)
PRIVATE DEFINE_INT60(posix_ENMFILE, ENMFILE);
#else
#define OBJ_posix_ENMFILE ((DeeObject *)&posix_ENMFILE)
PRIVATE DEFINE_INT75(posix_ENMFILE, ENMFILE);
#endif
#endif /* ENMFILE < 0 */
#else /* ENMFILE */
#define POSIX_ENMFILE_DEF /* nothing */
#endif /* !ENMFILE */
#ifdef ENOTSUP
#define POSIX_ENOTSUP_DEF \
	{ "ENOTSUP", OBJ_posix_ENOTSUP, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Not supported" },
#if DeeInt_IsSmallInt(ENOTSUP)
#define OBJ_posix_ENOTSUP DeeInt_ForSmallInt(ENOTSUP)
#elif ENOTSUP >= 0
#if ENOTSUP <= 0x7fffull /* 15-bit */
#define OBJ_posix_ENOTSUP ((DeeObject *)&posix_ENOTSUP)
PRIVATE DEFINE_UINT15(posix_ENOTSUP, ENOTSUP);
#elif ENOTSUP <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ENOTSUP ((DeeObject *)&posix_ENOTSUP)
PRIVATE DEFINE_UINT30(posix_ENOTSUP, ENOTSUP);
#elif ENOTSUP <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ENOTSUP ((DeeObject *)&posix_ENOTSUP)
PRIVATE DEFINE_UINT45(posix_ENOTSUP, ENOTSUP);
#elif ENOTSUP <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ENOTSUP ((DeeObject *)&posix_ENOTSUP)
PRIVATE DEFINE_UINT60(posix_ENOTSUP, ENOTSUP);
#else
#define OBJ_posix_ENOTSUP ((DeeObject *)&posix_ENOTSUP)
PRIVATE DEFINE_UINT75(posix_ENOTSUP, ENOTSUP);
#endif
#else /* ENOTSUP >= 0 */
#if ENOTSUP >= -0x4000ll /* 15-bit */
#define OBJ_posix_ENOTSUP ((DeeObject *)&posix_ENOTSUP)
PRIVATE DEFINE_INT15(posix_ENOTSUP, ENOTSUP);
#elif ENOTSUP >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ENOTSUP ((DeeObject *)&posix_ENOTSUP)
PRIVATE DEFINE_INT30(posix_ENOTSUP, ENOTSUP);
#elif ENOTSUP >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ENOTSUP ((DeeObject *)&posix_ENOTSUP)
PRIVATE DEFINE_INT45(posix_ENOTSUP, ENOTSUP);
#elif ENOTSUP >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ENOTSUP ((DeeObject *)&posix_ENOTSUP)
PRIVATE DEFINE_INT60(posix_ENOTSUP, ENOTSUP);
#else
#define OBJ_posix_ENOTSUP ((DeeObject *)&posix_ENOTSUP)
PRIVATE DEFINE_INT75(posix_ENOTSUP, ENOTSUP);
#endif
#endif /* ENOTSUP < 0 */
#else /* ENOTSUP */
#define POSIX_ENOTSUP_DEF /* nothing */
#endif /* !ENOTSUP */
#ifdef ENOSHARE
#define POSIX_ENOSHARE_DEF \
	{ "ENOSHARE", OBJ_posix_ENOSHARE, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "No such host or network path" },
#if DeeInt_IsSmallInt(ENOSHARE)
#define OBJ_posix_ENOSHARE DeeInt_ForSmallInt(ENOSHARE)
#elif ENOSHARE >= 0
#if ENOSHARE <= 0x7fffull /* 15-bit */
#define OBJ_posix_ENOSHARE ((DeeObject *)&posix_ENOSHARE)
PRIVATE DEFINE_UINT15(posix_ENOSHARE, ENOSHARE);
#elif ENOSHARE <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ENOSHARE ((DeeObject *)&posix_ENOSHARE)
PRIVATE DEFINE_UINT30(posix_ENOSHARE, ENOSHARE);
#elif ENOSHARE <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ENOSHARE ((DeeObject *)&posix_ENOSHARE)
PRIVATE DEFINE_UINT45(posix_ENOSHARE, ENOSHARE);
#elif ENOSHARE <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ENOSHARE ((DeeObject *)&posix_ENOSHARE)
PRIVATE DEFINE_UINT60(posix_ENOSHARE, ENOSHARE);
#else
#define OBJ_posix_ENOSHARE ((DeeObject *)&posix_ENOSHARE)
PRIVATE DEFINE_UINT75(posix_ENOSHARE, ENOSHARE);
#endif
#else /* ENOSHARE >= 0 */
#if ENOSHARE >= -0x4000ll /* 15-bit */
#define OBJ_posix_ENOSHARE ((DeeObject *)&posix_ENOSHARE)
PRIVATE DEFINE_INT15(posix_ENOSHARE, ENOSHARE);
#elif ENOSHARE >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ENOSHARE ((DeeObject *)&posix_ENOSHARE)
PRIVATE DEFINE_INT30(posix_ENOSHARE, ENOSHARE);
#elif ENOSHARE >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ENOSHARE ((DeeObject *)&posix_ENOSHARE)
PRIVATE DEFINE_INT45(posix_ENOSHARE, ENOSHARE);
#elif ENOSHARE >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ENOSHARE ((DeeObject *)&posix_ENOSHARE)
PRIVATE DEFINE_INT60(posix_ENOSHARE, ENOSHARE);
#else
#define OBJ_posix_ENOSHARE ((DeeObject *)&posix_ENOSHARE)
PRIVATE DEFINE_INT75(posix_ENOSHARE, ENOSHARE);
#endif
#endif /* ENOSHARE < 0 */
#else /* ENOSHARE */
#define POSIX_ENOSHARE_DEF /* nothing */
#endif /* !ENOSHARE */
#ifdef ECASECLASH
#define POSIX_ECASECLASH_DEF \
	{ "ECASECLASH", OBJ_posix_ECASECLASH, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Filename exists with different case" },
#if DeeInt_IsSmallInt(ECASECLASH)
#define OBJ_posix_ECASECLASH DeeInt_ForSmallInt(ECASECLASH)
#elif ECASECLASH >= 0
#if ECASECLASH <= 0x7fffull /* 15-bit */
#define OBJ_posix_ECASECLASH ((DeeObject *)&posix_ECASECLASH)
PRIVATE DEFINE_UINT15(posix_ECASECLASH, ECASECLASH);
#elif ECASECLASH <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ECASECLASH ((DeeObject *)&posix_ECASECLASH)
PRIVATE DEFINE_UINT30(posix_ECASECLASH, ECASECLASH);
#elif ECASECLASH <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ECASECLASH ((DeeObject *)&posix_ECASECLASH)
PRIVATE DEFINE_UINT45(posix_ECASECLASH, ECASECLASH);
#elif ECASECLASH <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ECASECLASH ((DeeObject *)&posix_ECASECLASH)
PRIVATE DEFINE_UINT60(posix_ECASECLASH, ECASECLASH);
#else
#define OBJ_posix_ECASECLASH ((DeeObject *)&posix_ECASECLASH)
PRIVATE DEFINE_UINT75(posix_ECASECLASH, ECASECLASH);
#endif
#else /* ECASECLASH >= 0 */
#if ECASECLASH >= -0x4000ll /* 15-bit */
#define OBJ_posix_ECASECLASH ((DeeObject *)&posix_ECASECLASH)
PRIVATE DEFINE_INT15(posix_ECASECLASH, ECASECLASH);
#elif ECASECLASH >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ECASECLASH ((DeeObject *)&posix_ECASECLASH)
PRIVATE DEFINE_INT30(posix_ECASECLASH, ECASECLASH);
#elif ECASECLASH >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ECASECLASH ((DeeObject *)&posix_ECASECLASH)
PRIVATE DEFINE_INT45(posix_ECASECLASH, ECASECLASH);
#elif ECASECLASH >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ECASECLASH ((DeeObject *)&posix_ECASECLASH)
PRIVATE DEFINE_INT60(posix_ECASECLASH, ECASECLASH);
#else
#define OBJ_posix_ECASECLASH ((DeeObject *)&posix_ECASECLASH)
PRIVATE DEFINE_INT75(posix_ECASECLASH, ECASECLASH);
#endif
#endif /* ECASECLASH < 0 */
#else /* ECASECLASH */
#define POSIX_ECASECLASH_DEF /* nothing */
#endif /* !ECASECLASH */
#ifdef EOTHER
#define POSIX_EOTHER_DEF \
	{ "EOTHER", OBJ_posix_EOTHER, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Other" },
#if DeeInt_IsSmallInt(EOTHER)
#define OBJ_posix_EOTHER DeeInt_ForSmallInt(EOTHER)
#elif EOTHER >= 0
#if EOTHER <= 0x7fffull /* 15-bit */
#define OBJ_posix_EOTHER ((DeeObject *)&posix_EOTHER)
PRIVATE DEFINE_UINT15(posix_EOTHER, EOTHER);
#elif EOTHER <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EOTHER ((DeeObject *)&posix_EOTHER)
PRIVATE DEFINE_UINT30(posix_EOTHER, EOTHER);
#elif EOTHER <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EOTHER ((DeeObject *)&posix_EOTHER)
PRIVATE DEFINE_UINT45(posix_EOTHER, EOTHER);
#elif EOTHER <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EOTHER ((DeeObject *)&posix_EOTHER)
PRIVATE DEFINE_UINT60(posix_EOTHER, EOTHER);
#else
#define OBJ_posix_EOTHER ((DeeObject *)&posix_EOTHER)
PRIVATE DEFINE_UINT75(posix_EOTHER, EOTHER);
#endif
#else /* EOTHER >= 0 */
#if EOTHER >= -0x4000ll /* 15-bit */
#define OBJ_posix_EOTHER ((DeeObject *)&posix_EOTHER)
PRIVATE DEFINE_INT15(posix_EOTHER, EOTHER);
#elif EOTHER >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EOTHER ((DeeObject *)&posix_EOTHER)
PRIVATE DEFINE_INT30(posix_EOTHER, EOTHER);
#elif EOTHER >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EOTHER ((DeeObject *)&posix_EOTHER)
PRIVATE DEFINE_INT45(posix_EOTHER, EOTHER);
#elif EOTHER >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EOTHER ((DeeObject *)&posix_EOTHER)
PRIVATE DEFINE_INT60(posix_EOTHER, EOTHER);
#else
#define OBJ_posix_EOTHER ((DeeObject *)&posix_EOTHER)
PRIVATE DEFINE_INT75(posix_EOTHER, EOTHER);
#endif
#endif /* EOTHER < 0 */
#else /* EOTHER */
#define POSIX_EOTHER_DEF /* nothing */
#endif /* !EOTHER */
#ifdef EAUTH
#define POSIX_EAUTH_DEF \
	{ "EAUTH", OBJ_posix_EAUTH, MODSYM_FREADONLY | MODSYM_FCONSTEXPR },
#if DeeInt_IsSmallInt(EAUTH)
#define OBJ_posix_EAUTH DeeInt_ForSmallInt(EAUTH)
#elif EAUTH >= 0
#if EAUTH <= 0x7fffull /* 15-bit */
#define OBJ_posix_EAUTH ((DeeObject *)&posix_EAUTH)
PRIVATE DEFINE_UINT15(posix_EAUTH, EAUTH);
#elif EAUTH <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EAUTH ((DeeObject *)&posix_EAUTH)
PRIVATE DEFINE_UINT30(posix_EAUTH, EAUTH);
#elif EAUTH <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EAUTH ((DeeObject *)&posix_EAUTH)
PRIVATE DEFINE_UINT45(posix_EAUTH, EAUTH);
#elif EAUTH <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EAUTH ((DeeObject *)&posix_EAUTH)
PRIVATE DEFINE_UINT60(posix_EAUTH, EAUTH);
#else
#define OBJ_posix_EAUTH ((DeeObject *)&posix_EAUTH)
PRIVATE DEFINE_UINT75(posix_EAUTH, EAUTH);
#endif
#else /* EAUTH >= 0 */
#if EAUTH >= -0x4000ll /* 15-bit */
#define OBJ_posix_EAUTH ((DeeObject *)&posix_EAUTH)
PRIVATE DEFINE_INT15(posix_EAUTH, EAUTH);
#elif EAUTH >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EAUTH ((DeeObject *)&posix_EAUTH)
PRIVATE DEFINE_INT30(posix_EAUTH, EAUTH);
#elif EAUTH >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EAUTH ((DeeObject *)&posix_EAUTH)
PRIVATE DEFINE_INT45(posix_EAUTH, EAUTH);
#elif EAUTH >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EAUTH ((DeeObject *)&posix_EAUTH)
PRIVATE DEFINE_INT60(posix_EAUTH, EAUTH);
#else
#define OBJ_posix_EAUTH ((DeeObject *)&posix_EAUTH)
PRIVATE DEFINE_INT75(posix_EAUTH, EAUTH);
#endif
#endif /* EAUTH < 0 */
#else /* EAUTH */
#define POSIX_EAUTH_DEF /* nothing */
#endif /* !EAUTH */
#ifdef EBADRPC
#define POSIX_EBADRPC_DEF \
	{ "EBADRPC", OBJ_posix_EBADRPC, MODSYM_FREADONLY | MODSYM_FCONSTEXPR },
#if DeeInt_IsSmallInt(EBADRPC)
#define OBJ_posix_EBADRPC DeeInt_ForSmallInt(EBADRPC)
#elif EBADRPC >= 0
#if EBADRPC <= 0x7fffull /* 15-bit */
#define OBJ_posix_EBADRPC ((DeeObject *)&posix_EBADRPC)
PRIVATE DEFINE_UINT15(posix_EBADRPC, EBADRPC);
#elif EBADRPC <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EBADRPC ((DeeObject *)&posix_EBADRPC)
PRIVATE DEFINE_UINT30(posix_EBADRPC, EBADRPC);
#elif EBADRPC <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EBADRPC ((DeeObject *)&posix_EBADRPC)
PRIVATE DEFINE_UINT45(posix_EBADRPC, EBADRPC);
#elif EBADRPC <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EBADRPC ((DeeObject *)&posix_EBADRPC)
PRIVATE DEFINE_UINT60(posix_EBADRPC, EBADRPC);
#else
#define OBJ_posix_EBADRPC ((DeeObject *)&posix_EBADRPC)
PRIVATE DEFINE_UINT75(posix_EBADRPC, EBADRPC);
#endif
#else /* EBADRPC >= 0 */
#if EBADRPC >= -0x4000ll /* 15-bit */
#define OBJ_posix_EBADRPC ((DeeObject *)&posix_EBADRPC)
PRIVATE DEFINE_INT15(posix_EBADRPC, EBADRPC);
#elif EBADRPC >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EBADRPC ((DeeObject *)&posix_EBADRPC)
PRIVATE DEFINE_INT30(posix_EBADRPC, EBADRPC);
#elif EBADRPC >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EBADRPC ((DeeObject *)&posix_EBADRPC)
PRIVATE DEFINE_INT45(posix_EBADRPC, EBADRPC);
#elif EBADRPC >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EBADRPC ((DeeObject *)&posix_EBADRPC)
PRIVATE DEFINE_INT60(posix_EBADRPC, EBADRPC);
#else
#define OBJ_posix_EBADRPC ((DeeObject *)&posix_EBADRPC)
PRIVATE DEFINE_INT75(posix_EBADRPC, EBADRPC);
#endif
#endif /* EBADRPC < 0 */
#else /* EBADRPC */
#define POSIX_EBADRPC_DEF /* nothing */
#endif /* !EBADRPC */
#ifdef ELASTERROR
#define POSIX_ELASTERROR_DEF \
	{ "ELASTERROR", OBJ_posix_ELASTERROR, MODSYM_FREADONLY | MODSYM_FCONSTEXPR },
#if DeeInt_IsSmallInt(ELASTERROR)
#define OBJ_posix_ELASTERROR DeeInt_ForSmallInt(ELASTERROR)
#elif ELASTERROR >= 0
#if ELASTERROR <= 0x7fffull /* 15-bit */
#define OBJ_posix_ELASTERROR ((DeeObject *)&posix_ELASTERROR)
PRIVATE DEFINE_UINT15(posix_ELASTERROR, ELASTERROR);
#elif ELASTERROR <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ELASTERROR ((DeeObject *)&posix_ELASTERROR)
PRIVATE DEFINE_UINT30(posix_ELASTERROR, ELASTERROR);
#elif ELASTERROR <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ELASTERROR ((DeeObject *)&posix_ELASTERROR)
PRIVATE DEFINE_UINT45(posix_ELASTERROR, ELASTERROR);
#elif ELASTERROR <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ELASTERROR ((DeeObject *)&posix_ELASTERROR)
PRIVATE DEFINE_UINT60(posix_ELASTERROR, ELASTERROR);
#else
#define OBJ_posix_ELASTERROR ((DeeObject *)&posix_ELASTERROR)
PRIVATE DEFINE_UINT75(posix_ELASTERROR, ELASTERROR);
#endif
#else /* ELASTERROR >= 0 */
#if ELASTERROR >= -0x4000ll /* 15-bit */
#define OBJ_posix_ELASTERROR ((DeeObject *)&posix_ELASTERROR)
PRIVATE DEFINE_INT15(posix_ELASTERROR, ELASTERROR);
#elif ELASTERROR >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ELASTERROR ((DeeObject *)&posix_ELASTERROR)
PRIVATE DEFINE_INT30(posix_ELASTERROR, ELASTERROR);
#elif ELASTERROR >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ELASTERROR ((DeeObject *)&posix_ELASTERROR)
PRIVATE DEFINE_INT45(posix_ELASTERROR, ELASTERROR);
#elif ELASTERROR >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ELASTERROR ((DeeObject *)&posix_ELASTERROR)
PRIVATE DEFINE_INT60(posix_ELASTERROR, ELASTERROR);
#else
#define OBJ_posix_ELASTERROR ((DeeObject *)&posix_ELASTERROR)
PRIVATE DEFINE_INT75(posix_ELASTERROR, ELASTERROR);
#endif
#endif /* ELASTERROR < 0 */
#else /* ELASTERROR */
#define POSIX_ELASTERROR_DEF /* nothing */
#endif /* !ELASTERROR */
#ifdef ELOCKUNMAPPED
#define POSIX_ELOCKUNMAPPED_DEF \
	{ "ELOCKUNMAPPED", OBJ_posix_ELOCKUNMAPPED, MODSYM_FREADONLY | MODSYM_FCONSTEXPR },
#if DeeInt_IsSmallInt(ELOCKUNMAPPED)
#define OBJ_posix_ELOCKUNMAPPED DeeInt_ForSmallInt(ELOCKUNMAPPED)
#elif ELOCKUNMAPPED >= 0
#if ELOCKUNMAPPED <= 0x7fffull /* 15-bit */
#define OBJ_posix_ELOCKUNMAPPED ((DeeObject *)&posix_ELOCKUNMAPPED)
PRIVATE DEFINE_UINT15(posix_ELOCKUNMAPPED, ELOCKUNMAPPED);
#elif ELOCKUNMAPPED <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ELOCKUNMAPPED ((DeeObject *)&posix_ELOCKUNMAPPED)
PRIVATE DEFINE_UINT30(posix_ELOCKUNMAPPED, ELOCKUNMAPPED);
#elif ELOCKUNMAPPED <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ELOCKUNMAPPED ((DeeObject *)&posix_ELOCKUNMAPPED)
PRIVATE DEFINE_UINT45(posix_ELOCKUNMAPPED, ELOCKUNMAPPED);
#elif ELOCKUNMAPPED <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ELOCKUNMAPPED ((DeeObject *)&posix_ELOCKUNMAPPED)
PRIVATE DEFINE_UINT60(posix_ELOCKUNMAPPED, ELOCKUNMAPPED);
#else
#define OBJ_posix_ELOCKUNMAPPED ((DeeObject *)&posix_ELOCKUNMAPPED)
PRIVATE DEFINE_UINT75(posix_ELOCKUNMAPPED, ELOCKUNMAPPED);
#endif
#else /* ELOCKUNMAPPED >= 0 */
#if ELOCKUNMAPPED >= -0x4000ll /* 15-bit */
#define OBJ_posix_ELOCKUNMAPPED ((DeeObject *)&posix_ELOCKUNMAPPED)
PRIVATE DEFINE_INT15(posix_ELOCKUNMAPPED, ELOCKUNMAPPED);
#elif ELOCKUNMAPPED >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ELOCKUNMAPPED ((DeeObject *)&posix_ELOCKUNMAPPED)
PRIVATE DEFINE_INT30(posix_ELOCKUNMAPPED, ELOCKUNMAPPED);
#elif ELOCKUNMAPPED >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ELOCKUNMAPPED ((DeeObject *)&posix_ELOCKUNMAPPED)
PRIVATE DEFINE_INT45(posix_ELOCKUNMAPPED, ELOCKUNMAPPED);
#elif ELOCKUNMAPPED >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ELOCKUNMAPPED ((DeeObject *)&posix_ELOCKUNMAPPED)
PRIVATE DEFINE_INT60(posix_ELOCKUNMAPPED, ELOCKUNMAPPED);
#else
#define OBJ_posix_ELOCKUNMAPPED ((DeeObject *)&posix_ELOCKUNMAPPED)
PRIVATE DEFINE_INT75(posix_ELOCKUNMAPPED, ELOCKUNMAPPED);
#endif
#endif /* ELOCKUNMAPPED < 0 */
#else /* ELOCKUNMAPPED */
#define POSIX_ELOCKUNMAPPED_DEF /* nothing */
#endif /* !ELOCKUNMAPPED */
#ifdef ENEEDAUTH
#define POSIX_ENEEDAUTH_DEF \
	{ "ENEEDAUTH", OBJ_posix_ENEEDAUTH, MODSYM_FREADONLY | MODSYM_FCONSTEXPR },
#if DeeInt_IsSmallInt(ENEEDAUTH)
#define OBJ_posix_ENEEDAUTH DeeInt_ForSmallInt(ENEEDAUTH)
#elif ENEEDAUTH >= 0
#if ENEEDAUTH <= 0x7fffull /* 15-bit */
#define OBJ_posix_ENEEDAUTH ((DeeObject *)&posix_ENEEDAUTH)
PRIVATE DEFINE_UINT15(posix_ENEEDAUTH, ENEEDAUTH);
#elif ENEEDAUTH <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ENEEDAUTH ((DeeObject *)&posix_ENEEDAUTH)
PRIVATE DEFINE_UINT30(posix_ENEEDAUTH, ENEEDAUTH);
#elif ENEEDAUTH <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ENEEDAUTH ((DeeObject *)&posix_ENEEDAUTH)
PRIVATE DEFINE_UINT45(posix_ENEEDAUTH, ENEEDAUTH);
#elif ENEEDAUTH <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ENEEDAUTH ((DeeObject *)&posix_ENEEDAUTH)
PRIVATE DEFINE_UINT60(posix_ENEEDAUTH, ENEEDAUTH);
#else
#define OBJ_posix_ENEEDAUTH ((DeeObject *)&posix_ENEEDAUTH)
PRIVATE DEFINE_UINT75(posix_ENEEDAUTH, ENEEDAUTH);
#endif
#else /* ENEEDAUTH >= 0 */
#if ENEEDAUTH >= -0x4000ll /* 15-bit */
#define OBJ_posix_ENEEDAUTH ((DeeObject *)&posix_ENEEDAUTH)
PRIVATE DEFINE_INT15(posix_ENEEDAUTH, ENEEDAUTH);
#elif ENEEDAUTH >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ENEEDAUTH ((DeeObject *)&posix_ENEEDAUTH)
PRIVATE DEFINE_INT30(posix_ENEEDAUTH, ENEEDAUTH);
#elif ENEEDAUTH >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ENEEDAUTH ((DeeObject *)&posix_ENEEDAUTH)
PRIVATE DEFINE_INT45(posix_ENEEDAUTH, ENEEDAUTH);
#elif ENEEDAUTH >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ENEEDAUTH ((DeeObject *)&posix_ENEEDAUTH)
PRIVATE DEFINE_INT60(posix_ENEEDAUTH, ENEEDAUTH);
#else
#define OBJ_posix_ENEEDAUTH ((DeeObject *)&posix_ENEEDAUTH)
PRIVATE DEFINE_INT75(posix_ENEEDAUTH, ENEEDAUTH);
#endif
#endif /* ENEEDAUTH < 0 */
#else /* ENEEDAUTH */
#define POSIX_ENEEDAUTH_DEF /* nothing */
#endif /* !ENEEDAUTH */
#ifdef ENOATTR
#define POSIX_ENOATTR_DEF \
	{ "ENOATTR", OBJ_posix_ENOATTR, MODSYM_FREADONLY | MODSYM_FCONSTEXPR },
#if DeeInt_IsSmallInt(ENOATTR)
#define OBJ_posix_ENOATTR DeeInt_ForSmallInt(ENOATTR)
#elif ENOATTR >= 0
#if ENOATTR <= 0x7fffull /* 15-bit */
#define OBJ_posix_ENOATTR ((DeeObject *)&posix_ENOATTR)
PRIVATE DEFINE_UINT15(posix_ENOATTR, ENOATTR);
#elif ENOATTR <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ENOATTR ((DeeObject *)&posix_ENOATTR)
PRIVATE DEFINE_UINT30(posix_ENOATTR, ENOATTR);
#elif ENOATTR <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ENOATTR ((DeeObject *)&posix_ENOATTR)
PRIVATE DEFINE_UINT45(posix_ENOATTR, ENOATTR);
#elif ENOATTR <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ENOATTR ((DeeObject *)&posix_ENOATTR)
PRIVATE DEFINE_UINT60(posix_ENOATTR, ENOATTR);
#else
#define OBJ_posix_ENOATTR ((DeeObject *)&posix_ENOATTR)
PRIVATE DEFINE_UINT75(posix_ENOATTR, ENOATTR);
#endif
#else /* ENOATTR >= 0 */
#if ENOATTR >= -0x4000ll /* 15-bit */
#define OBJ_posix_ENOATTR ((DeeObject *)&posix_ENOATTR)
PRIVATE DEFINE_INT15(posix_ENOATTR, ENOATTR);
#elif ENOATTR >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ENOATTR ((DeeObject *)&posix_ENOATTR)
PRIVATE DEFINE_INT30(posix_ENOATTR, ENOATTR);
#elif ENOATTR >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ENOATTR ((DeeObject *)&posix_ENOATTR)
PRIVATE DEFINE_INT45(posix_ENOATTR, ENOATTR);
#elif ENOATTR >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ENOATTR ((DeeObject *)&posix_ENOATTR)
PRIVATE DEFINE_INT60(posix_ENOATTR, ENOATTR);
#else
#define OBJ_posix_ENOATTR ((DeeObject *)&posix_ENOATTR)
PRIVATE DEFINE_INT75(posix_ENOATTR, ENOATTR);
#endif
#endif /* ENOATTR < 0 */
#else /* ENOATTR */
#define POSIX_ENOATTR_DEF /* nothing */
#endif /* !ENOATTR */
#ifdef ENOTACTIVE
#define POSIX_ENOTACTIVE_DEF \
	{ "ENOTACTIVE", OBJ_posix_ENOTACTIVE, MODSYM_FREADONLY | MODSYM_FCONSTEXPR },
#if DeeInt_IsSmallInt(ENOTACTIVE)
#define OBJ_posix_ENOTACTIVE DeeInt_ForSmallInt(ENOTACTIVE)
#elif ENOTACTIVE >= 0
#if ENOTACTIVE <= 0x7fffull /* 15-bit */
#define OBJ_posix_ENOTACTIVE ((DeeObject *)&posix_ENOTACTIVE)
PRIVATE DEFINE_UINT15(posix_ENOTACTIVE, ENOTACTIVE);
#elif ENOTACTIVE <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ENOTACTIVE ((DeeObject *)&posix_ENOTACTIVE)
PRIVATE DEFINE_UINT30(posix_ENOTACTIVE, ENOTACTIVE);
#elif ENOTACTIVE <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ENOTACTIVE ((DeeObject *)&posix_ENOTACTIVE)
PRIVATE DEFINE_UINT45(posix_ENOTACTIVE, ENOTACTIVE);
#elif ENOTACTIVE <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ENOTACTIVE ((DeeObject *)&posix_ENOTACTIVE)
PRIVATE DEFINE_UINT60(posix_ENOTACTIVE, ENOTACTIVE);
#else
#define OBJ_posix_ENOTACTIVE ((DeeObject *)&posix_ENOTACTIVE)
PRIVATE DEFINE_UINT75(posix_ENOTACTIVE, ENOTACTIVE);
#endif
#else /* ENOTACTIVE >= 0 */
#if ENOTACTIVE >= -0x4000ll /* 15-bit */
#define OBJ_posix_ENOTACTIVE ((DeeObject *)&posix_ENOTACTIVE)
PRIVATE DEFINE_INT15(posix_ENOTACTIVE, ENOTACTIVE);
#elif ENOTACTIVE >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ENOTACTIVE ((DeeObject *)&posix_ENOTACTIVE)
PRIVATE DEFINE_INT30(posix_ENOTACTIVE, ENOTACTIVE);
#elif ENOTACTIVE >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ENOTACTIVE ((DeeObject *)&posix_ENOTACTIVE)
PRIVATE DEFINE_INT45(posix_ENOTACTIVE, ENOTACTIVE);
#elif ENOTACTIVE >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ENOTACTIVE ((DeeObject *)&posix_ENOTACTIVE)
PRIVATE DEFINE_INT60(posix_ENOTACTIVE, ENOTACTIVE);
#else
#define OBJ_posix_ENOTACTIVE ((DeeObject *)&posix_ENOTACTIVE)
PRIVATE DEFINE_INT75(posix_ENOTACTIVE, ENOTACTIVE);
#endif
#endif /* ENOTACTIVE < 0 */
#else /* ENOTACTIVE */
#define POSIX_ENOTACTIVE_DEF /* nothing */
#endif /* !ENOTACTIVE */
#ifdef EPROCUNAVAIL
#define POSIX_EPROCUNAVAIL_DEF \
	{ "EPROCUNAVAIL", OBJ_posix_EPROCUNAVAIL, MODSYM_FREADONLY | MODSYM_FCONSTEXPR },
#if DeeInt_IsSmallInt(EPROCUNAVAIL)
#define OBJ_posix_EPROCUNAVAIL DeeInt_ForSmallInt(EPROCUNAVAIL)
#elif EPROCUNAVAIL >= 0
#if EPROCUNAVAIL <= 0x7fffull /* 15-bit */
#define OBJ_posix_EPROCUNAVAIL ((DeeObject *)&posix_EPROCUNAVAIL)
PRIVATE DEFINE_UINT15(posix_EPROCUNAVAIL, EPROCUNAVAIL);
#elif EPROCUNAVAIL <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EPROCUNAVAIL ((DeeObject *)&posix_EPROCUNAVAIL)
PRIVATE DEFINE_UINT30(posix_EPROCUNAVAIL, EPROCUNAVAIL);
#elif EPROCUNAVAIL <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EPROCUNAVAIL ((DeeObject *)&posix_EPROCUNAVAIL)
PRIVATE DEFINE_UINT45(posix_EPROCUNAVAIL, EPROCUNAVAIL);
#elif EPROCUNAVAIL <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EPROCUNAVAIL ((DeeObject *)&posix_EPROCUNAVAIL)
PRIVATE DEFINE_UINT60(posix_EPROCUNAVAIL, EPROCUNAVAIL);
#else
#define OBJ_posix_EPROCUNAVAIL ((DeeObject *)&posix_EPROCUNAVAIL)
PRIVATE DEFINE_UINT75(posix_EPROCUNAVAIL, EPROCUNAVAIL);
#endif
#else /* EPROCUNAVAIL >= 0 */
#if EPROCUNAVAIL >= -0x4000ll /* 15-bit */
#define OBJ_posix_EPROCUNAVAIL ((DeeObject *)&posix_EPROCUNAVAIL)
PRIVATE DEFINE_INT15(posix_EPROCUNAVAIL, EPROCUNAVAIL);
#elif EPROCUNAVAIL >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EPROCUNAVAIL ((DeeObject *)&posix_EPROCUNAVAIL)
PRIVATE DEFINE_INT30(posix_EPROCUNAVAIL, EPROCUNAVAIL);
#elif EPROCUNAVAIL >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EPROCUNAVAIL ((DeeObject *)&posix_EPROCUNAVAIL)
PRIVATE DEFINE_INT45(posix_EPROCUNAVAIL, EPROCUNAVAIL);
#elif EPROCUNAVAIL >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EPROCUNAVAIL ((DeeObject *)&posix_EPROCUNAVAIL)
PRIVATE DEFINE_INT60(posix_EPROCUNAVAIL, EPROCUNAVAIL);
#else
#define OBJ_posix_EPROCUNAVAIL ((DeeObject *)&posix_EPROCUNAVAIL)
PRIVATE DEFINE_INT75(posix_EPROCUNAVAIL, EPROCUNAVAIL);
#endif
#endif /* EPROCUNAVAIL < 0 */
#else /* EPROCUNAVAIL */
#define POSIX_EPROCUNAVAIL_DEF /* nothing */
#endif /* !EPROCUNAVAIL */
#ifdef EPROGMISMATCH
#define POSIX_EPROGMISMATCH_DEF \
	{ "EPROGMISMATCH", OBJ_posix_EPROGMISMATCH, MODSYM_FREADONLY | MODSYM_FCONSTEXPR },
#if DeeInt_IsSmallInt(EPROGMISMATCH)
#define OBJ_posix_EPROGMISMATCH DeeInt_ForSmallInt(EPROGMISMATCH)
#elif EPROGMISMATCH >= 0
#if EPROGMISMATCH <= 0x7fffull /* 15-bit */
#define OBJ_posix_EPROGMISMATCH ((DeeObject *)&posix_EPROGMISMATCH)
PRIVATE DEFINE_UINT15(posix_EPROGMISMATCH, EPROGMISMATCH);
#elif EPROGMISMATCH <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EPROGMISMATCH ((DeeObject *)&posix_EPROGMISMATCH)
PRIVATE DEFINE_UINT30(posix_EPROGMISMATCH, EPROGMISMATCH);
#elif EPROGMISMATCH <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EPROGMISMATCH ((DeeObject *)&posix_EPROGMISMATCH)
PRIVATE DEFINE_UINT45(posix_EPROGMISMATCH, EPROGMISMATCH);
#elif EPROGMISMATCH <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EPROGMISMATCH ((DeeObject *)&posix_EPROGMISMATCH)
PRIVATE DEFINE_UINT60(posix_EPROGMISMATCH, EPROGMISMATCH);
#else
#define OBJ_posix_EPROGMISMATCH ((DeeObject *)&posix_EPROGMISMATCH)
PRIVATE DEFINE_UINT75(posix_EPROGMISMATCH, EPROGMISMATCH);
#endif
#else /* EPROGMISMATCH >= 0 */
#if EPROGMISMATCH >= -0x4000ll /* 15-bit */
#define OBJ_posix_EPROGMISMATCH ((DeeObject *)&posix_EPROGMISMATCH)
PRIVATE DEFINE_INT15(posix_EPROGMISMATCH, EPROGMISMATCH);
#elif EPROGMISMATCH >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EPROGMISMATCH ((DeeObject *)&posix_EPROGMISMATCH)
PRIVATE DEFINE_INT30(posix_EPROGMISMATCH, EPROGMISMATCH);
#elif EPROGMISMATCH >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EPROGMISMATCH ((DeeObject *)&posix_EPROGMISMATCH)
PRIVATE DEFINE_INT45(posix_EPROGMISMATCH, EPROGMISMATCH);
#elif EPROGMISMATCH >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EPROGMISMATCH ((DeeObject *)&posix_EPROGMISMATCH)
PRIVATE DEFINE_INT60(posix_EPROGMISMATCH, EPROGMISMATCH);
#else
#define OBJ_posix_EPROGMISMATCH ((DeeObject *)&posix_EPROGMISMATCH)
PRIVATE DEFINE_INT75(posix_EPROGMISMATCH, EPROGMISMATCH);
#endif
#endif /* EPROGMISMATCH < 0 */
#else /* EPROGMISMATCH */
#define POSIX_EPROGMISMATCH_DEF /* nothing */
#endif /* !EPROGMISMATCH */
#ifdef EPROGUNAVAIL
#define POSIX_EPROGUNAVAIL_DEF \
	{ "EPROGUNAVAIL", OBJ_posix_EPROGUNAVAIL, MODSYM_FREADONLY | MODSYM_FCONSTEXPR },
#if DeeInt_IsSmallInt(EPROGUNAVAIL)
#define OBJ_posix_EPROGUNAVAIL DeeInt_ForSmallInt(EPROGUNAVAIL)
#elif EPROGUNAVAIL >= 0
#if EPROGUNAVAIL <= 0x7fffull /* 15-bit */
#define OBJ_posix_EPROGUNAVAIL ((DeeObject *)&posix_EPROGUNAVAIL)
PRIVATE DEFINE_UINT15(posix_EPROGUNAVAIL, EPROGUNAVAIL);
#elif EPROGUNAVAIL <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_EPROGUNAVAIL ((DeeObject *)&posix_EPROGUNAVAIL)
PRIVATE DEFINE_UINT30(posix_EPROGUNAVAIL, EPROGUNAVAIL);
#elif EPROGUNAVAIL <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_EPROGUNAVAIL ((DeeObject *)&posix_EPROGUNAVAIL)
PRIVATE DEFINE_UINT45(posix_EPROGUNAVAIL, EPROGUNAVAIL);
#elif EPROGUNAVAIL <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_EPROGUNAVAIL ((DeeObject *)&posix_EPROGUNAVAIL)
PRIVATE DEFINE_UINT60(posix_EPROGUNAVAIL, EPROGUNAVAIL);
#else
#define OBJ_posix_EPROGUNAVAIL ((DeeObject *)&posix_EPROGUNAVAIL)
PRIVATE DEFINE_UINT75(posix_EPROGUNAVAIL, EPROGUNAVAIL);
#endif
#else /* EPROGUNAVAIL >= 0 */
#if EPROGUNAVAIL >= -0x4000ll /* 15-bit */
#define OBJ_posix_EPROGUNAVAIL ((DeeObject *)&posix_EPROGUNAVAIL)
PRIVATE DEFINE_INT15(posix_EPROGUNAVAIL, EPROGUNAVAIL);
#elif EPROGUNAVAIL >= -0x20000000ll /* 30-bit */
#define OBJ_posix_EPROGUNAVAIL ((DeeObject *)&posix_EPROGUNAVAIL)
PRIVATE DEFINE_INT30(posix_EPROGUNAVAIL, EPROGUNAVAIL);
#elif EPROGUNAVAIL >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_EPROGUNAVAIL ((DeeObject *)&posix_EPROGUNAVAIL)
PRIVATE DEFINE_INT45(posix_EPROGUNAVAIL, EPROGUNAVAIL);
#elif EPROGUNAVAIL >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_EPROGUNAVAIL ((DeeObject *)&posix_EPROGUNAVAIL)
PRIVATE DEFINE_INT60(posix_EPROGUNAVAIL, EPROGUNAVAIL);
#else
#define OBJ_posix_EPROGUNAVAIL ((DeeObject *)&posix_EPROGUNAVAIL)
PRIVATE DEFINE_INT75(posix_EPROGUNAVAIL, EPROGUNAVAIL);
#endif
#endif /* EPROGUNAVAIL < 0 */
#else /* EPROGUNAVAIL */
#define POSIX_EPROGUNAVAIL_DEF /* nothing */
#endif /* !EPROGUNAVAIL */
#ifdef ERPCMISMATCH
#define POSIX_ERPCMISMATCH_DEF \
	{ "ERPCMISMATCH", OBJ_posix_ERPCMISMATCH, MODSYM_FREADONLY | MODSYM_FCONSTEXPR },
#if DeeInt_IsSmallInt(ERPCMISMATCH)
#define OBJ_posix_ERPCMISMATCH DeeInt_ForSmallInt(ERPCMISMATCH)
#elif ERPCMISMATCH >= 0
#if ERPCMISMATCH <= 0x7fffull /* 15-bit */
#define OBJ_posix_ERPCMISMATCH ((DeeObject *)&posix_ERPCMISMATCH)
PRIVATE DEFINE_UINT15(posix_ERPCMISMATCH, ERPCMISMATCH);
#elif ERPCMISMATCH <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ERPCMISMATCH ((DeeObject *)&posix_ERPCMISMATCH)
PRIVATE DEFINE_UINT30(posix_ERPCMISMATCH, ERPCMISMATCH);
#elif ERPCMISMATCH <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ERPCMISMATCH ((DeeObject *)&posix_ERPCMISMATCH)
PRIVATE DEFINE_UINT45(posix_ERPCMISMATCH, ERPCMISMATCH);
#elif ERPCMISMATCH <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ERPCMISMATCH ((DeeObject *)&posix_ERPCMISMATCH)
PRIVATE DEFINE_UINT60(posix_ERPCMISMATCH, ERPCMISMATCH);
#else
#define OBJ_posix_ERPCMISMATCH ((DeeObject *)&posix_ERPCMISMATCH)
PRIVATE DEFINE_UINT75(posix_ERPCMISMATCH, ERPCMISMATCH);
#endif
#else /* ERPCMISMATCH >= 0 */
#if ERPCMISMATCH >= -0x4000ll /* 15-bit */
#define OBJ_posix_ERPCMISMATCH ((DeeObject *)&posix_ERPCMISMATCH)
PRIVATE DEFINE_INT15(posix_ERPCMISMATCH, ERPCMISMATCH);
#elif ERPCMISMATCH >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ERPCMISMATCH ((DeeObject *)&posix_ERPCMISMATCH)
PRIVATE DEFINE_INT30(posix_ERPCMISMATCH, ERPCMISMATCH);
#elif ERPCMISMATCH >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ERPCMISMATCH ((DeeObject *)&posix_ERPCMISMATCH)
PRIVATE DEFINE_INT45(posix_ERPCMISMATCH, ERPCMISMATCH);
#elif ERPCMISMATCH >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ERPCMISMATCH ((DeeObject *)&posix_ERPCMISMATCH)
PRIVATE DEFINE_INT60(posix_ERPCMISMATCH, ERPCMISMATCH);
#else
#define OBJ_posix_ERPCMISMATCH ((DeeObject *)&posix_ERPCMISMATCH)
PRIVATE DEFINE_INT75(posix_ERPCMISMATCH, ERPCMISMATCH);
#endif
#endif /* ERPCMISMATCH < 0 */
#else /* ERPCMISMATCH */
#define POSIX_ERPCMISMATCH_DEF /* nothing */
#endif /* !ERPCMISMATCH */
#ifdef STRUNCATE
#define POSIX_STRUNCATE_DEF \
	{ "STRUNCATE", OBJ_posix_STRUNCATE, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Truncated" },
#if DeeInt_IsSmallInt(STRUNCATE)
#define OBJ_posix_STRUNCATE DeeInt_ForSmallInt(STRUNCATE)
#elif STRUNCATE >= 0
#if STRUNCATE <= 0x7fffull /* 15-bit */
#define OBJ_posix_STRUNCATE ((DeeObject *)&posix_STRUNCATE)
PRIVATE DEFINE_UINT15(posix_STRUNCATE, STRUNCATE);
#elif STRUNCATE <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_STRUNCATE ((DeeObject *)&posix_STRUNCATE)
PRIVATE DEFINE_UINT30(posix_STRUNCATE, STRUNCATE);
#elif STRUNCATE <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_STRUNCATE ((DeeObject *)&posix_STRUNCATE)
PRIVATE DEFINE_UINT45(posix_STRUNCATE, STRUNCATE);
#elif STRUNCATE <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_STRUNCATE ((DeeObject *)&posix_STRUNCATE)
PRIVATE DEFINE_UINT60(posix_STRUNCATE, STRUNCATE);
#else
#define OBJ_posix_STRUNCATE ((DeeObject *)&posix_STRUNCATE)
PRIVATE DEFINE_UINT75(posix_STRUNCATE, STRUNCATE);
#endif
#else /* STRUNCATE >= 0 */
#if STRUNCATE >= -0x4000ll /* 15-bit */
#define OBJ_posix_STRUNCATE ((DeeObject *)&posix_STRUNCATE)
PRIVATE DEFINE_INT15(posix_STRUNCATE, STRUNCATE);
#elif STRUNCATE >= -0x20000000ll /* 30-bit */
#define OBJ_posix_STRUNCATE ((DeeObject *)&posix_STRUNCATE)
PRIVATE DEFINE_INT30(posix_STRUNCATE, STRUNCATE);
#elif STRUNCATE >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_STRUNCATE ((DeeObject *)&posix_STRUNCATE)
PRIVATE DEFINE_INT45(posix_STRUNCATE, STRUNCATE);
#elif STRUNCATE >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_STRUNCATE ((DeeObject *)&posix_STRUNCATE)
PRIVATE DEFINE_INT60(posix_STRUNCATE, STRUNCATE);
#else
#define OBJ_posix_STRUNCATE ((DeeObject *)&posix_STRUNCATE)
PRIVATE DEFINE_INT75(posix_STRUNCATE, STRUNCATE);
#endif
#endif /* STRUNCATE < 0 */
#else /* STRUNCATE */
#define POSIX_STRUNCATE_DEF /* nothing */
#endif /* !STRUNCATE */
#ifndef ELIMIT
#define ELIMIT (-1)
#if defined(EOK) && EOK > ELIMIT
#undef ELIMIT
#define ELIMIT EOK
#endif /* EOK && EOK > ELIMIT */
#if defined(EPERM) && EPERM > ELIMIT
#undef ELIMIT
#define ELIMIT EPERM
#endif /* EPERM && EPERM > ELIMIT */
#if defined(ENOENT) && ENOENT > ELIMIT
#undef ELIMIT
#define ELIMIT ENOENT
#endif /* ENOENT && ENOENT > ELIMIT */
#if defined(ESRCH) && ESRCH > ELIMIT
#undef ELIMIT
#define ELIMIT ESRCH
#endif /* ESRCH && ESRCH > ELIMIT */
#if defined(EINTR) && EINTR > ELIMIT
#undef ELIMIT
#define ELIMIT EINTR
#endif /* EINTR && EINTR > ELIMIT */
#if defined(EIO) && EIO > ELIMIT
#undef ELIMIT
#define ELIMIT EIO
#endif /* EIO && EIO > ELIMIT */
#if defined(ENXIO) && ENXIO > ELIMIT
#undef ELIMIT
#define ELIMIT ENXIO
#endif /* ENXIO && ENXIO > ELIMIT */
#if defined(E2BIG) && E2BIG > ELIMIT
#undef ELIMIT
#define ELIMIT E2BIG
#endif /* E2BIG && E2BIG > ELIMIT */
#if defined(ENOEXEC) && ENOEXEC > ELIMIT
#undef ELIMIT
#define ELIMIT ENOEXEC
#endif /* ENOEXEC && ENOEXEC > ELIMIT */
#if defined(EBADF) && EBADF > ELIMIT
#undef ELIMIT
#define ELIMIT EBADF
#endif /* EBADF && EBADF > ELIMIT */
#if defined(ECHILD) && ECHILD > ELIMIT
#undef ELIMIT
#define ELIMIT ECHILD
#endif /* ECHILD && ECHILD > ELIMIT */
#if defined(EAGAIN) && EAGAIN > ELIMIT
#undef ELIMIT
#define ELIMIT EAGAIN
#endif /* EAGAIN && EAGAIN > ELIMIT */
#if defined(ENOMEM) && ENOMEM > ELIMIT
#undef ELIMIT
#define ELIMIT ENOMEM
#endif /* ENOMEM && ENOMEM > ELIMIT */
#if defined(EACCES) && EACCES > ELIMIT
#undef ELIMIT
#define ELIMIT EACCES
#endif /* EACCES && EACCES > ELIMIT */
#if defined(EFAULT) && EFAULT > ELIMIT
#undef ELIMIT
#define ELIMIT EFAULT
#endif /* EFAULT && EFAULT > ELIMIT */
#if defined(ENOTBLK) && ENOTBLK > ELIMIT
#undef ELIMIT
#define ELIMIT ENOTBLK
#endif /* ENOTBLK && ENOTBLK > ELIMIT */
#if defined(EBUSY) && EBUSY > ELIMIT
#undef ELIMIT
#define ELIMIT EBUSY
#endif /* EBUSY && EBUSY > ELIMIT */
#if defined(EEXIST) && EEXIST > ELIMIT
#undef ELIMIT
#define ELIMIT EEXIST
#endif /* EEXIST && EEXIST > ELIMIT */
#if defined(EXDEV) && EXDEV > ELIMIT
#undef ELIMIT
#define ELIMIT EXDEV
#endif /* EXDEV && EXDEV > ELIMIT */
#if defined(ENODEV) && ENODEV > ELIMIT
#undef ELIMIT
#define ELIMIT ENODEV
#endif /* ENODEV && ENODEV > ELIMIT */
#if defined(ENOTDIR) && ENOTDIR > ELIMIT
#undef ELIMIT
#define ELIMIT ENOTDIR
#endif /* ENOTDIR && ENOTDIR > ELIMIT */
#if defined(EISDIR) && EISDIR > ELIMIT
#undef ELIMIT
#define ELIMIT EISDIR
#endif /* EISDIR && EISDIR > ELIMIT */
#if defined(EINVAL) && EINVAL > ELIMIT
#undef ELIMIT
#define ELIMIT EINVAL
#endif /* EINVAL && EINVAL > ELIMIT */
#if defined(ENFILE) && ENFILE > ELIMIT
#undef ELIMIT
#define ELIMIT ENFILE
#endif /* ENFILE && ENFILE > ELIMIT */
#if defined(EMFILE) && EMFILE > ELIMIT
#undef ELIMIT
#define ELIMIT EMFILE
#endif /* EMFILE && EMFILE > ELIMIT */
#if defined(ENOTTY) && ENOTTY > ELIMIT
#undef ELIMIT
#define ELIMIT ENOTTY
#endif /* ENOTTY && ENOTTY > ELIMIT */
#if defined(ETXTBSY) && ETXTBSY > ELIMIT
#undef ELIMIT
#define ELIMIT ETXTBSY
#endif /* ETXTBSY && ETXTBSY > ELIMIT */
#if defined(EFBIG) && EFBIG > ELIMIT
#undef ELIMIT
#define ELIMIT EFBIG
#endif /* EFBIG && EFBIG > ELIMIT */
#if defined(ENOSPC) && ENOSPC > ELIMIT
#undef ELIMIT
#define ELIMIT ENOSPC
#endif /* ENOSPC && ENOSPC > ELIMIT */
#if defined(ESPIPE) && ESPIPE > ELIMIT
#undef ELIMIT
#define ELIMIT ESPIPE
#endif /* ESPIPE && ESPIPE > ELIMIT */
#if defined(EROFS) && EROFS > ELIMIT
#undef ELIMIT
#define ELIMIT EROFS
#endif /* EROFS && EROFS > ELIMIT */
#if defined(EMLINK) && EMLINK > ELIMIT
#undef ELIMIT
#define ELIMIT EMLINK
#endif /* EMLINK && EMLINK > ELIMIT */
#if defined(EPIPE) && EPIPE > ELIMIT
#undef ELIMIT
#define ELIMIT EPIPE
#endif /* EPIPE && EPIPE > ELIMIT */
#if defined(EDOM) && EDOM > ELIMIT
#undef ELIMIT
#define ELIMIT EDOM
#endif /* EDOM && EDOM > ELIMIT */
#if defined(ERANGE) && ERANGE > ELIMIT
#undef ELIMIT
#define ELIMIT ERANGE
#endif /* ERANGE && ERANGE > ELIMIT */
#if defined(EDEADLK) && EDEADLK > ELIMIT
#undef ELIMIT
#define ELIMIT EDEADLK
#endif /* EDEADLK && EDEADLK > ELIMIT */
#if defined(ENAMETOOLONG) && ENAMETOOLONG > ELIMIT
#undef ELIMIT
#define ELIMIT ENAMETOOLONG
#endif /* ENAMETOOLONG && ENAMETOOLONG > ELIMIT */
#if defined(ENOLCK) && ENOLCK > ELIMIT
#undef ELIMIT
#define ELIMIT ENOLCK
#endif /* ENOLCK && ENOLCK > ELIMIT */
#if defined(ENOSYS) && ENOSYS > ELIMIT
#undef ELIMIT
#define ELIMIT ENOSYS
#endif /* ENOSYS && ENOSYS > ELIMIT */
#if defined(ENOTEMPTY) && ENOTEMPTY > ELIMIT
#undef ELIMIT
#define ELIMIT ENOTEMPTY
#endif /* ENOTEMPTY && ENOTEMPTY > ELIMIT */
#if defined(ELOOP) && ELOOP > ELIMIT
#undef ELIMIT
#define ELIMIT ELOOP
#endif /* ELOOP && ELOOP > ELIMIT */
#if defined(EWOULDBLOCK) && EWOULDBLOCK > ELIMIT
#undef ELIMIT
#define ELIMIT EWOULDBLOCK
#endif /* EWOULDBLOCK && EWOULDBLOCK > ELIMIT */
#if defined(ENOMSG) && ENOMSG > ELIMIT
#undef ELIMIT
#define ELIMIT ENOMSG
#endif /* ENOMSG && ENOMSG > ELIMIT */
#if defined(EIDRM) && EIDRM > ELIMIT
#undef ELIMIT
#define ELIMIT EIDRM
#endif /* EIDRM && EIDRM > ELIMIT */
#if defined(ECHRNG) && ECHRNG > ELIMIT
#undef ELIMIT
#define ELIMIT ECHRNG
#endif /* ECHRNG && ECHRNG > ELIMIT */
#if defined(EL2NSYNC) && EL2NSYNC > ELIMIT
#undef ELIMIT
#define ELIMIT EL2NSYNC
#endif /* EL2NSYNC && EL2NSYNC > ELIMIT */
#if defined(EL3HLT) && EL3HLT > ELIMIT
#undef ELIMIT
#define ELIMIT EL3HLT
#endif /* EL3HLT && EL3HLT > ELIMIT */
#if defined(EL3RST) && EL3RST > ELIMIT
#undef ELIMIT
#define ELIMIT EL3RST
#endif /* EL3RST && EL3RST > ELIMIT */
#if defined(ELNRNG) && ELNRNG > ELIMIT
#undef ELIMIT
#define ELIMIT ELNRNG
#endif /* ELNRNG && ELNRNG > ELIMIT */
#if defined(EUNATCH) && EUNATCH > ELIMIT
#undef ELIMIT
#define ELIMIT EUNATCH
#endif /* EUNATCH && EUNATCH > ELIMIT */
#if defined(ENOCSI) && ENOCSI > ELIMIT
#undef ELIMIT
#define ELIMIT ENOCSI
#endif /* ENOCSI && ENOCSI > ELIMIT */
#if defined(EL2HLT) && EL2HLT > ELIMIT
#undef ELIMIT
#define ELIMIT EL2HLT
#endif /* EL2HLT && EL2HLT > ELIMIT */
#if defined(EBADE) && EBADE > ELIMIT
#undef ELIMIT
#define ELIMIT EBADE
#endif /* EBADE && EBADE > ELIMIT */
#if defined(EBADR) && EBADR > ELIMIT
#undef ELIMIT
#define ELIMIT EBADR
#endif /* EBADR && EBADR > ELIMIT */
#if defined(EXFULL) && EXFULL > ELIMIT
#undef ELIMIT
#define ELIMIT EXFULL
#endif /* EXFULL && EXFULL > ELIMIT */
#if defined(ENOANO) && ENOANO > ELIMIT
#undef ELIMIT
#define ELIMIT ENOANO
#endif /* ENOANO && ENOANO > ELIMIT */
#if defined(EBADRQC) && EBADRQC > ELIMIT
#undef ELIMIT
#define ELIMIT EBADRQC
#endif /* EBADRQC && EBADRQC > ELIMIT */
#if defined(EBADSLT) && EBADSLT > ELIMIT
#undef ELIMIT
#define ELIMIT EBADSLT
#endif /* EBADSLT && EBADSLT > ELIMIT */
#if defined(EDEADLOCK) && EDEADLOCK > ELIMIT
#undef ELIMIT
#define ELIMIT EDEADLOCK
#endif /* EDEADLOCK && EDEADLOCK > ELIMIT */
#if defined(EBFONT) && EBFONT > ELIMIT
#undef ELIMIT
#define ELIMIT EBFONT
#endif /* EBFONT && EBFONT > ELIMIT */
#if defined(ENOSTR) && ENOSTR > ELIMIT
#undef ELIMIT
#define ELIMIT ENOSTR
#endif /* ENOSTR && ENOSTR > ELIMIT */
#if defined(ENODATA) && ENODATA > ELIMIT
#undef ELIMIT
#define ELIMIT ENODATA
#endif /* ENODATA && ENODATA > ELIMIT */
#if defined(ETIME) && ETIME > ELIMIT
#undef ELIMIT
#define ELIMIT ETIME
#endif /* ETIME && ETIME > ELIMIT */
#if defined(ENOSR) && ENOSR > ELIMIT
#undef ELIMIT
#define ELIMIT ENOSR
#endif /* ENOSR && ENOSR > ELIMIT */
#if defined(ENONET) && ENONET > ELIMIT
#undef ELIMIT
#define ELIMIT ENONET
#endif /* ENONET && ENONET > ELIMIT */
#if defined(ENOPKG) && ENOPKG > ELIMIT
#undef ELIMIT
#define ELIMIT ENOPKG
#endif /* ENOPKG && ENOPKG > ELIMIT */
#if defined(EREMOTE) && EREMOTE > ELIMIT
#undef ELIMIT
#define ELIMIT EREMOTE
#endif /* EREMOTE && EREMOTE > ELIMIT */
#if defined(ENOLINK) && ENOLINK > ELIMIT
#undef ELIMIT
#define ELIMIT ENOLINK
#endif /* ENOLINK && ENOLINK > ELIMIT */
#if defined(EADV) && EADV > ELIMIT
#undef ELIMIT
#define ELIMIT EADV
#endif /* EADV && EADV > ELIMIT */
#if defined(ESRMNT) && ESRMNT > ELIMIT
#undef ELIMIT
#define ELIMIT ESRMNT
#endif /* ESRMNT && ESRMNT > ELIMIT */
#if defined(ECOMM) && ECOMM > ELIMIT
#undef ELIMIT
#define ELIMIT ECOMM
#endif /* ECOMM && ECOMM > ELIMIT */
#if defined(EPROTO) && EPROTO > ELIMIT
#undef ELIMIT
#define ELIMIT EPROTO
#endif /* EPROTO && EPROTO > ELIMIT */
#if defined(EMULTIHOP) && EMULTIHOP > ELIMIT
#undef ELIMIT
#define ELIMIT EMULTIHOP
#endif /* EMULTIHOP && EMULTIHOP > ELIMIT */
#if defined(EDOTDOT) && EDOTDOT > ELIMIT
#undef ELIMIT
#define ELIMIT EDOTDOT
#endif /* EDOTDOT && EDOTDOT > ELIMIT */
#if defined(EBADMSG) && EBADMSG > ELIMIT
#undef ELIMIT
#define ELIMIT EBADMSG
#endif /* EBADMSG && EBADMSG > ELIMIT */
#if defined(EOVERFLOW) && EOVERFLOW > ELIMIT
#undef ELIMIT
#define ELIMIT EOVERFLOW
#endif /* EOVERFLOW && EOVERFLOW > ELIMIT */
#if defined(ENOTUNIQ) && ENOTUNIQ > ELIMIT
#undef ELIMIT
#define ELIMIT ENOTUNIQ
#endif /* ENOTUNIQ && ENOTUNIQ > ELIMIT */
#if defined(EBADFD) && EBADFD > ELIMIT
#undef ELIMIT
#define ELIMIT EBADFD
#endif /* EBADFD && EBADFD > ELIMIT */
#if defined(EREMCHG) && EREMCHG > ELIMIT
#undef ELIMIT
#define ELIMIT EREMCHG
#endif /* EREMCHG && EREMCHG > ELIMIT */
#if defined(ELIBACC) && ELIBACC > ELIMIT
#undef ELIMIT
#define ELIMIT ELIBACC
#endif /* ELIBACC && ELIBACC > ELIMIT */
#if defined(ELIBBAD) && ELIBBAD > ELIMIT
#undef ELIMIT
#define ELIMIT ELIBBAD
#endif /* ELIBBAD && ELIBBAD > ELIMIT */
#if defined(ELIBSCN) && ELIBSCN > ELIMIT
#undef ELIMIT
#define ELIMIT ELIBSCN
#endif /* ELIBSCN && ELIBSCN > ELIMIT */
#if defined(ELIBMAX) && ELIBMAX > ELIMIT
#undef ELIMIT
#define ELIMIT ELIBMAX
#endif /* ELIBMAX && ELIBMAX > ELIMIT */
#if defined(ELIBEXEC) && ELIBEXEC > ELIMIT
#undef ELIMIT
#define ELIMIT ELIBEXEC
#endif /* ELIBEXEC && ELIBEXEC > ELIMIT */
#if defined(EILSEQ) && EILSEQ > ELIMIT
#undef ELIMIT
#define ELIMIT EILSEQ
#endif /* EILSEQ && EILSEQ > ELIMIT */
#if defined(ERESTART) && ERESTART > ELIMIT
#undef ELIMIT
#define ELIMIT ERESTART
#endif /* ERESTART && ERESTART > ELIMIT */
#if defined(ESTRPIPE) && ESTRPIPE > ELIMIT
#undef ELIMIT
#define ELIMIT ESTRPIPE
#endif /* ESTRPIPE && ESTRPIPE > ELIMIT */
#if defined(EUSERS) && EUSERS > ELIMIT
#undef ELIMIT
#define ELIMIT EUSERS
#endif /* EUSERS && EUSERS > ELIMIT */
#if defined(ENOTSOCK) && ENOTSOCK > ELIMIT
#undef ELIMIT
#define ELIMIT ENOTSOCK
#endif /* ENOTSOCK && ENOTSOCK > ELIMIT */
#if defined(EDESTADDRREQ) && EDESTADDRREQ > ELIMIT
#undef ELIMIT
#define ELIMIT EDESTADDRREQ
#endif /* EDESTADDRREQ && EDESTADDRREQ > ELIMIT */
#if defined(EMSGSIZE) && EMSGSIZE > ELIMIT
#undef ELIMIT
#define ELIMIT EMSGSIZE
#endif /* EMSGSIZE && EMSGSIZE > ELIMIT */
#if defined(EPROTOTYPE) && EPROTOTYPE > ELIMIT
#undef ELIMIT
#define ELIMIT EPROTOTYPE
#endif /* EPROTOTYPE && EPROTOTYPE > ELIMIT */
#if defined(ENOPROTOOPT) && ENOPROTOOPT > ELIMIT
#undef ELIMIT
#define ELIMIT ENOPROTOOPT
#endif /* ENOPROTOOPT && ENOPROTOOPT > ELIMIT */
#if defined(EPROTONOSUPPORT) && EPROTONOSUPPORT > ELIMIT
#undef ELIMIT
#define ELIMIT EPROTONOSUPPORT
#endif /* EPROTONOSUPPORT && EPROTONOSUPPORT > ELIMIT */
#if defined(ESOCKTNOSUPPORT) && ESOCKTNOSUPPORT > ELIMIT
#undef ELIMIT
#define ELIMIT ESOCKTNOSUPPORT
#endif /* ESOCKTNOSUPPORT && ESOCKTNOSUPPORT > ELIMIT */
#if defined(EOPNOTSUPP) && EOPNOTSUPP > ELIMIT
#undef ELIMIT
#define ELIMIT EOPNOTSUPP
#endif /* EOPNOTSUPP && EOPNOTSUPP > ELIMIT */
#if defined(EPFNOSUPPORT) && EPFNOSUPPORT > ELIMIT
#undef ELIMIT
#define ELIMIT EPFNOSUPPORT
#endif /* EPFNOSUPPORT && EPFNOSUPPORT > ELIMIT */
#if defined(EAFNOSUPPORT) && EAFNOSUPPORT > ELIMIT
#undef ELIMIT
#define ELIMIT EAFNOSUPPORT
#endif /* EAFNOSUPPORT && EAFNOSUPPORT > ELIMIT */
#if defined(EADDRINUSE) && EADDRINUSE > ELIMIT
#undef ELIMIT
#define ELIMIT EADDRINUSE
#endif /* EADDRINUSE && EADDRINUSE > ELIMIT */
#if defined(EADDRNOTAVAIL) && EADDRNOTAVAIL > ELIMIT
#undef ELIMIT
#define ELIMIT EADDRNOTAVAIL
#endif /* EADDRNOTAVAIL && EADDRNOTAVAIL > ELIMIT */
#if defined(ENETDOWN) && ENETDOWN > ELIMIT
#undef ELIMIT
#define ELIMIT ENETDOWN
#endif /* ENETDOWN && ENETDOWN > ELIMIT */
#if defined(ENETUNREACH) && ENETUNREACH > ELIMIT
#undef ELIMIT
#define ELIMIT ENETUNREACH
#endif /* ENETUNREACH && ENETUNREACH > ELIMIT */
#if defined(ENETRESET) && ENETRESET > ELIMIT
#undef ELIMIT
#define ELIMIT ENETRESET
#endif /* ENETRESET && ENETRESET > ELIMIT */
#if defined(ECONNABORTED) && ECONNABORTED > ELIMIT
#undef ELIMIT
#define ELIMIT ECONNABORTED
#endif /* ECONNABORTED && ECONNABORTED > ELIMIT */
#if defined(ECONNRESET) && ECONNRESET > ELIMIT
#undef ELIMIT
#define ELIMIT ECONNRESET
#endif /* ECONNRESET && ECONNRESET > ELIMIT */
#if defined(ENOBUFS) && ENOBUFS > ELIMIT
#undef ELIMIT
#define ELIMIT ENOBUFS
#endif /* ENOBUFS && ENOBUFS > ELIMIT */
#if defined(EISCONN) && EISCONN > ELIMIT
#undef ELIMIT
#define ELIMIT EISCONN
#endif /* EISCONN && EISCONN > ELIMIT */
#if defined(ENOTCONN) && ENOTCONN > ELIMIT
#undef ELIMIT
#define ELIMIT ENOTCONN
#endif /* ENOTCONN && ENOTCONN > ELIMIT */
#if defined(ESHUTDOWN) && ESHUTDOWN > ELIMIT
#undef ELIMIT
#define ELIMIT ESHUTDOWN
#endif /* ESHUTDOWN && ESHUTDOWN > ELIMIT */
#if defined(ETOOMANYREFS) && ETOOMANYREFS > ELIMIT
#undef ELIMIT
#define ELIMIT ETOOMANYREFS
#endif /* ETOOMANYREFS && ETOOMANYREFS > ELIMIT */
#if defined(ETIMEDOUT) && ETIMEDOUT > ELIMIT
#undef ELIMIT
#define ELIMIT ETIMEDOUT
#endif /* ETIMEDOUT && ETIMEDOUT > ELIMIT */
#if defined(ECONNREFUSED) && ECONNREFUSED > ELIMIT
#undef ELIMIT
#define ELIMIT ECONNREFUSED
#endif /* ECONNREFUSED && ECONNREFUSED > ELIMIT */
#if defined(EHOSTDOWN) && EHOSTDOWN > ELIMIT
#undef ELIMIT
#define ELIMIT EHOSTDOWN
#endif /* EHOSTDOWN && EHOSTDOWN > ELIMIT */
#if defined(EHOSTUNREACH) && EHOSTUNREACH > ELIMIT
#undef ELIMIT
#define ELIMIT EHOSTUNREACH
#endif /* EHOSTUNREACH && EHOSTUNREACH > ELIMIT */
#if defined(EALREADY) && EALREADY > ELIMIT
#undef ELIMIT
#define ELIMIT EALREADY
#endif /* EALREADY && EALREADY > ELIMIT */
#if defined(EINPROGRESS) && EINPROGRESS > ELIMIT
#undef ELIMIT
#define ELIMIT EINPROGRESS
#endif /* EINPROGRESS && EINPROGRESS > ELIMIT */
#if defined(ESTALE) && ESTALE > ELIMIT
#undef ELIMIT
#define ELIMIT ESTALE
#endif /* ESTALE && ESTALE > ELIMIT */
#if defined(EUCLEAN) && EUCLEAN > ELIMIT
#undef ELIMIT
#define ELIMIT EUCLEAN
#endif /* EUCLEAN && EUCLEAN > ELIMIT */
#if defined(ENOTNAM) && ENOTNAM > ELIMIT
#undef ELIMIT
#define ELIMIT ENOTNAM
#endif /* ENOTNAM && ENOTNAM > ELIMIT */
#if defined(ENAVAIL) && ENAVAIL > ELIMIT
#undef ELIMIT
#define ELIMIT ENAVAIL
#endif /* ENAVAIL && ENAVAIL > ELIMIT */
#if defined(EISNAM) && EISNAM > ELIMIT
#undef ELIMIT
#define ELIMIT EISNAM
#endif /* EISNAM && EISNAM > ELIMIT */
#if defined(EREMOTEIO) && EREMOTEIO > ELIMIT
#undef ELIMIT
#define ELIMIT EREMOTEIO
#endif /* EREMOTEIO && EREMOTEIO > ELIMIT */
#if defined(EDQUOT) && EDQUOT > ELIMIT
#undef ELIMIT
#define ELIMIT EDQUOT
#endif /* EDQUOT && EDQUOT > ELIMIT */
#if defined(ENOMEDIUM) && ENOMEDIUM > ELIMIT
#undef ELIMIT
#define ELIMIT ENOMEDIUM
#endif /* ENOMEDIUM && ENOMEDIUM > ELIMIT */
#if defined(EMEDIUMTYPE) && EMEDIUMTYPE > ELIMIT
#undef ELIMIT
#define ELIMIT EMEDIUMTYPE
#endif /* EMEDIUMTYPE && EMEDIUMTYPE > ELIMIT */
#if defined(ECANCELED) && ECANCELED > ELIMIT
#undef ELIMIT
#define ELIMIT ECANCELED
#endif /* ECANCELED && ECANCELED > ELIMIT */
#if defined(ENOKEY) && ENOKEY > ELIMIT
#undef ELIMIT
#define ELIMIT ENOKEY
#endif /* ENOKEY && ENOKEY > ELIMIT */
#if defined(EKEYEXPIRED) && EKEYEXPIRED > ELIMIT
#undef ELIMIT
#define ELIMIT EKEYEXPIRED
#endif /* EKEYEXPIRED && EKEYEXPIRED > ELIMIT */
#if defined(EKEYREVOKED) && EKEYREVOKED > ELIMIT
#undef ELIMIT
#define ELIMIT EKEYREVOKED
#endif /* EKEYREVOKED && EKEYREVOKED > ELIMIT */
#if defined(EKEYREJECTED) && EKEYREJECTED > ELIMIT
#undef ELIMIT
#define ELIMIT EKEYREJECTED
#endif /* EKEYREJECTED && EKEYREJECTED > ELIMIT */
#if defined(EOWNERDEAD) && EOWNERDEAD > ELIMIT
#undef ELIMIT
#define ELIMIT EOWNERDEAD
#endif /* EOWNERDEAD && EOWNERDEAD > ELIMIT */
#if defined(ENOTRECOVERABLE) && ENOTRECOVERABLE > ELIMIT
#undef ELIMIT
#define ELIMIT ENOTRECOVERABLE
#endif /* ENOTRECOVERABLE && ENOTRECOVERABLE > ELIMIT */
#if defined(ERFKILL) && ERFKILL > ELIMIT
#undef ELIMIT
#define ELIMIT ERFKILL
#endif /* ERFKILL && ERFKILL > ELIMIT */
#if defined(EHWPOISON) && EHWPOISON > ELIMIT
#undef ELIMIT
#define ELIMIT EHWPOISON
#endif /* EHWPOISON && EHWPOISON > ELIMIT */
#if defined(ELBIN) && ELBIN > ELIMIT
#undef ELIMIT
#define ELIMIT ELBIN
#endif /* ELBIN && ELBIN > ELIMIT */
#if defined(EPROCLIM) && EPROCLIM > ELIMIT
#undef ELIMIT
#define ELIMIT EPROCLIM
#endif /* EPROCLIM && EPROCLIM > ELIMIT */
#if defined(EFTYPE) && EFTYPE > ELIMIT
#undef ELIMIT
#define ELIMIT EFTYPE
#endif /* EFTYPE && EFTYPE > ELIMIT */
#if defined(ENMFILE) && ENMFILE > ELIMIT
#undef ELIMIT
#define ELIMIT ENMFILE
#endif /* ENMFILE && ENMFILE > ELIMIT */
#if defined(ENOTSUP) && ENOTSUP > ELIMIT
#undef ELIMIT
#define ELIMIT ENOTSUP
#endif /* ENOTSUP && ENOTSUP > ELIMIT */
#if defined(ENOSHARE) && ENOSHARE > ELIMIT
#undef ELIMIT
#define ELIMIT ENOSHARE
#endif /* ENOSHARE && ENOSHARE > ELIMIT */
#if defined(ECASECLASH) && ECASECLASH > ELIMIT
#undef ELIMIT
#define ELIMIT ECASECLASH
#endif /* ECASECLASH && ECASECLASH > ELIMIT */
#if defined(EOTHER) && EOTHER > ELIMIT
#undef ELIMIT
#define ELIMIT EOTHER
#endif /* EOTHER && EOTHER > ELIMIT */
#if defined(EAUTH) && EAUTH > ELIMIT
#undef ELIMIT
#define ELIMIT EAUTH
#endif /* EAUTH && EAUTH > ELIMIT */
#if defined(EBADRPC) && EBADRPC > ELIMIT
#undef ELIMIT
#define ELIMIT EBADRPC
#endif /* EBADRPC && EBADRPC > ELIMIT */
#if defined(ELASTERROR) && ELASTERROR > ELIMIT
#undef ELIMIT
#define ELIMIT ELASTERROR
#endif /* ELASTERROR && ELASTERROR > ELIMIT */
#if defined(ELOCKUNMAPPED) && ELOCKUNMAPPED > ELIMIT
#undef ELIMIT
#define ELIMIT ELOCKUNMAPPED
#endif /* ELOCKUNMAPPED && ELOCKUNMAPPED > ELIMIT */
#if defined(ENEEDAUTH) && ENEEDAUTH > ELIMIT
#undef ELIMIT
#define ELIMIT ENEEDAUTH
#endif /* ENEEDAUTH && ENEEDAUTH > ELIMIT */
#if defined(ENOATTR) && ENOATTR > ELIMIT
#undef ELIMIT
#define ELIMIT ENOATTR
#endif /* ENOATTR && ENOATTR > ELIMIT */
#if defined(ENOTACTIVE) && ENOTACTIVE > ELIMIT
#undef ELIMIT
#define ELIMIT ENOTACTIVE
#endif /* ENOTACTIVE && ENOTACTIVE > ELIMIT */
#if defined(EPROCUNAVAIL) && EPROCUNAVAIL > ELIMIT
#undef ELIMIT
#define ELIMIT EPROCUNAVAIL
#endif /* EPROCUNAVAIL && EPROCUNAVAIL > ELIMIT */
#if defined(EPROGMISMATCH) && EPROGMISMATCH > ELIMIT
#undef ELIMIT
#define ELIMIT EPROGMISMATCH
#endif /* EPROGMISMATCH && EPROGMISMATCH > ELIMIT */
#if defined(EPROGUNAVAIL) && EPROGUNAVAIL > ELIMIT
#undef ELIMIT
#define ELIMIT EPROGUNAVAIL
#endif /* EPROGUNAVAIL && EPROGUNAVAIL > ELIMIT */
#if defined(ERPCMISMATCH) && ERPCMISMATCH > ELIMIT
#undef ELIMIT
#define ELIMIT ERPCMISMATCH
#endif /* ERPCMISMATCH && ERPCMISMATCH > ELIMIT */
#if defined(STRUNCATE) && STRUNCATE > ELIMIT
#undef ELIMIT
#define ELIMIT STRUNCATE
#endif /* STRUNCATE && STRUNCATE > ELIMIT */
#if ELIMIT < 0
#undef ELIMIT
#endif /* ELIMIT < 0 */
#endif /* !ELIMIT */
#if !defined(ECOUNT) && defined(ELIMIT)
#define ECOUNT (ELIMIT + 1)
#endif /* !ECOUNT && ELIMIT */
#ifdef ELIMIT
#define POSIX_ELIMIT_DEF \
	{ "ELIMIT", OBJ_posix_ELIMIT, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Max possible errno" },
#if DeeInt_IsSmallInt(ELIMIT)
#define OBJ_posix_ELIMIT DeeInt_ForSmallInt(ELIMIT)
#elif ELIMIT >= 0
#if ELIMIT <= 0x7fffull /* 15-bit */
#define OBJ_posix_ELIMIT ((DeeObject *)&posix_ELIMIT)
PRIVATE DEFINE_UINT15(posix_ELIMIT, ELIMIT);
#elif ELIMIT <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ELIMIT ((DeeObject *)&posix_ELIMIT)
PRIVATE DEFINE_UINT30(posix_ELIMIT, ELIMIT);
#elif ELIMIT <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ELIMIT ((DeeObject *)&posix_ELIMIT)
PRIVATE DEFINE_UINT45(posix_ELIMIT, ELIMIT);
#elif ELIMIT <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ELIMIT ((DeeObject *)&posix_ELIMIT)
PRIVATE DEFINE_UINT60(posix_ELIMIT, ELIMIT);
#else
#define OBJ_posix_ELIMIT ((DeeObject *)&posix_ELIMIT)
PRIVATE DEFINE_UINT75(posix_ELIMIT, ELIMIT);
#endif
#else /* ELIMIT >= 0 */
#if ELIMIT >= -0x4000ll /* 15-bit */
#define OBJ_posix_ELIMIT ((DeeObject *)&posix_ELIMIT)
PRIVATE DEFINE_INT15(posix_ELIMIT, ELIMIT);
#elif ELIMIT >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ELIMIT ((DeeObject *)&posix_ELIMIT)
PRIVATE DEFINE_INT30(posix_ELIMIT, ELIMIT);
#elif ELIMIT >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ELIMIT ((DeeObject *)&posix_ELIMIT)
PRIVATE DEFINE_INT45(posix_ELIMIT, ELIMIT);
#elif ELIMIT >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ELIMIT ((DeeObject *)&posix_ELIMIT)
PRIVATE DEFINE_INT60(posix_ELIMIT, ELIMIT);
#else
#define OBJ_posix_ELIMIT ((DeeObject *)&posix_ELIMIT)
PRIVATE DEFINE_INT75(posix_ELIMIT, ELIMIT);
#endif
#endif /* ELIMIT < 0 */
#else /* ELIMIT */
#define POSIX_ELIMIT_DEF /* nothing */
#endif /* !ELIMIT */
#ifdef ECOUNT
#define POSIX_ECOUNT_DEF \
	{ "ECOUNT", OBJ_posix_ECOUNT, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "One plus ?GELIMIT" },
#if DeeInt_IsSmallInt(ECOUNT)
#define OBJ_posix_ECOUNT DeeInt_ForSmallInt(ECOUNT)
#elif ECOUNT >= 0
#if ECOUNT <= 0x7fffull /* 15-bit */
#define OBJ_posix_ECOUNT ((DeeObject *)&posix_ECOUNT)
PRIVATE DEFINE_UINT15(posix_ECOUNT, ECOUNT);
#elif ECOUNT <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_ECOUNT ((DeeObject *)&posix_ECOUNT)
PRIVATE DEFINE_UINT30(posix_ECOUNT, ECOUNT);
#elif ECOUNT <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_ECOUNT ((DeeObject *)&posix_ECOUNT)
PRIVATE DEFINE_UINT45(posix_ECOUNT, ECOUNT);
#elif ECOUNT <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_ECOUNT ((DeeObject *)&posix_ECOUNT)
PRIVATE DEFINE_UINT60(posix_ECOUNT, ECOUNT);
#else
#define OBJ_posix_ECOUNT ((DeeObject *)&posix_ECOUNT)
PRIVATE DEFINE_UINT75(posix_ECOUNT, ECOUNT);
#endif
#else /* ECOUNT >= 0 */
#if ECOUNT >= -0x4000ll /* 15-bit */
#define OBJ_posix_ECOUNT ((DeeObject *)&posix_ECOUNT)
PRIVATE DEFINE_INT15(posix_ECOUNT, ECOUNT);
#elif ECOUNT >= -0x20000000ll /* 30-bit */
#define OBJ_posix_ECOUNT ((DeeObject *)&posix_ECOUNT)
PRIVATE DEFINE_INT30(posix_ECOUNT, ECOUNT);
#elif ECOUNT >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_ECOUNT ((DeeObject *)&posix_ECOUNT)
PRIVATE DEFINE_INT45(posix_ECOUNT, ECOUNT);
#elif ECOUNT >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_ECOUNT ((DeeObject *)&posix_ECOUNT)
PRIVATE DEFINE_INT60(posix_ECOUNT, ECOUNT);
#else
#define OBJ_posix_ECOUNT ((DeeObject *)&posix_ECOUNT)
PRIVATE DEFINE_INT75(posix_ECOUNT, ECOUNT);
#endif
#endif /* ECOUNT < 0 */
#else /* ECOUNT */
#define POSIX_ECOUNT_DEF /* nothing */
#endif /* !ECOUNT */
#ifdef ELIMIT
#define POSIX_EMAX_DEF \
	{ "EMAX", (DeeObject *)&posix_ELIMIT, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Max possible errno" },
#else /* ELIMIT */
#define POSIX_EMAX_DEF /* nothing */
#endif /* !ELIMIT */
