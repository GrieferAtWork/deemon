/* Copyright (c) 2018-2025 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2025 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */
/* WARNING: Autogenerated file "p-access-constants.def" */
#ifdef R_OK
#define POSIX_R_OK_DEF \
	{ "R_OK", OBJ_posix_R_OK, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Test for read permission" },
#if DeeInt_IsSmallInt(R_OK)
#define OBJ_posix_R_OK DeeInt_ForSmallInt(R_OK)
#elif R_OK >= 0
#if R_OK <= 0x7fffull /* 15-bit */
#define OBJ_posix_R_OK ((DeeObject *)&posix_R_OK)
PRIVATE DEFINE_UINT15(posix_R_OK, R_OK);
#elif R_OK <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_R_OK ((DeeObject *)&posix_R_OK)
PRIVATE DEFINE_UINT30(posix_R_OK, R_OK);
#elif R_OK <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_R_OK ((DeeObject *)&posix_R_OK)
PRIVATE DEFINE_UINT45(posix_R_OK, R_OK);
#elif R_OK <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_R_OK ((DeeObject *)&posix_R_OK)
PRIVATE DEFINE_UINT60(posix_R_OK, R_OK);
#else
#define OBJ_posix_R_OK ((DeeObject *)&posix_R_OK)
PRIVATE DEFINE_UINT75(posix_R_OK, R_OK);
#endif
#else /* R_OK >= 0 */
#if R_OK >= -0x4000ll /* 15-bit */
#define OBJ_posix_R_OK ((DeeObject *)&posix_R_OK)
PRIVATE DEFINE_INT15(posix_R_OK, R_OK);
#elif R_OK >= -0x20000000ll /* 30-bit */
#define OBJ_posix_R_OK ((DeeObject *)&posix_R_OK)
PRIVATE DEFINE_INT30(posix_R_OK, R_OK);
#elif R_OK >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_R_OK ((DeeObject *)&posix_R_OK)
PRIVATE DEFINE_INT45(posix_R_OK, R_OK);
#elif R_OK >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_R_OK ((DeeObject *)&posix_R_OK)
PRIVATE DEFINE_INT60(posix_R_OK, R_OK);
#else
#define OBJ_posix_R_OK ((DeeObject *)&posix_R_OK)
PRIVATE DEFINE_INT75(posix_R_OK, R_OK);
#endif
#endif /* R_OK < 0 */
#else /* R_OK */
#define POSIX_R_OK_DEF /* nothing */
#endif /* !R_OK */
#ifdef W_OK
#define POSIX_W_OK_DEF \
	{ "W_OK", OBJ_posix_W_OK, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Test for write permission" },
#if DeeInt_IsSmallInt(W_OK)
#define OBJ_posix_W_OK DeeInt_ForSmallInt(W_OK)
#elif W_OK >= 0
#if W_OK <= 0x7fffull /* 15-bit */
#define OBJ_posix_W_OK ((DeeObject *)&posix_W_OK)
PRIVATE DEFINE_UINT15(posix_W_OK, W_OK);
#elif W_OK <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_W_OK ((DeeObject *)&posix_W_OK)
PRIVATE DEFINE_UINT30(posix_W_OK, W_OK);
#elif W_OK <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_W_OK ((DeeObject *)&posix_W_OK)
PRIVATE DEFINE_UINT45(posix_W_OK, W_OK);
#elif W_OK <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_W_OK ((DeeObject *)&posix_W_OK)
PRIVATE DEFINE_UINT60(posix_W_OK, W_OK);
#else
#define OBJ_posix_W_OK ((DeeObject *)&posix_W_OK)
PRIVATE DEFINE_UINT75(posix_W_OK, W_OK);
#endif
#else /* W_OK >= 0 */
#if W_OK >= -0x4000ll /* 15-bit */
#define OBJ_posix_W_OK ((DeeObject *)&posix_W_OK)
PRIVATE DEFINE_INT15(posix_W_OK, W_OK);
#elif W_OK >= -0x20000000ll /* 30-bit */
#define OBJ_posix_W_OK ((DeeObject *)&posix_W_OK)
PRIVATE DEFINE_INT30(posix_W_OK, W_OK);
#elif W_OK >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_W_OK ((DeeObject *)&posix_W_OK)
PRIVATE DEFINE_INT45(posix_W_OK, W_OK);
#elif W_OK >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_W_OK ((DeeObject *)&posix_W_OK)
PRIVATE DEFINE_INT60(posix_W_OK, W_OK);
#else
#define OBJ_posix_W_OK ((DeeObject *)&posix_W_OK)
PRIVATE DEFINE_INT75(posix_W_OK, W_OK);
#endif
#endif /* W_OK < 0 */
#else /* W_OK */
#define POSIX_W_OK_DEF /* nothing */
#endif /* !W_OK */
#ifdef X_OK
#define POSIX_X_OK_DEF \
	{ "X_OK", OBJ_posix_X_OK, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Test for execute permission" },
#if DeeInt_IsSmallInt(X_OK)
#define OBJ_posix_X_OK DeeInt_ForSmallInt(X_OK)
#elif X_OK >= 0
#if X_OK <= 0x7fffull /* 15-bit */
#define OBJ_posix_X_OK ((DeeObject *)&posix_X_OK)
PRIVATE DEFINE_UINT15(posix_X_OK, X_OK);
#elif X_OK <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_X_OK ((DeeObject *)&posix_X_OK)
PRIVATE DEFINE_UINT30(posix_X_OK, X_OK);
#elif X_OK <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_X_OK ((DeeObject *)&posix_X_OK)
PRIVATE DEFINE_UINT45(posix_X_OK, X_OK);
#elif X_OK <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_X_OK ((DeeObject *)&posix_X_OK)
PRIVATE DEFINE_UINT60(posix_X_OK, X_OK);
#else
#define OBJ_posix_X_OK ((DeeObject *)&posix_X_OK)
PRIVATE DEFINE_UINT75(posix_X_OK, X_OK);
#endif
#else /* X_OK >= 0 */
#if X_OK >= -0x4000ll /* 15-bit */
#define OBJ_posix_X_OK ((DeeObject *)&posix_X_OK)
PRIVATE DEFINE_INT15(posix_X_OK, X_OK);
#elif X_OK >= -0x20000000ll /* 30-bit */
#define OBJ_posix_X_OK ((DeeObject *)&posix_X_OK)
PRIVATE DEFINE_INT30(posix_X_OK, X_OK);
#elif X_OK >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_X_OK ((DeeObject *)&posix_X_OK)
PRIVATE DEFINE_INT45(posix_X_OK, X_OK);
#elif X_OK >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_X_OK ((DeeObject *)&posix_X_OK)
PRIVATE DEFINE_INT60(posix_X_OK, X_OK);
#else
#define OBJ_posix_X_OK ((DeeObject *)&posix_X_OK)
PRIVATE DEFINE_INT75(posix_X_OK, X_OK);
#endif
#endif /* X_OK < 0 */
#else /* X_OK */
#define POSIX_X_OK_DEF /* nothing */
#endif /* !X_OK */
#ifdef F_OK
#define POSIX_F_OK_DEF \
	{ "F_OK", OBJ_posix_F_OK, MODSYM_FREADONLY | MODSYM_FCONSTEXPR, "Test for existence" },
#if DeeInt_IsSmallInt(F_OK)
#define OBJ_posix_F_OK DeeInt_ForSmallInt(F_OK)
#elif F_OK >= 0
#if F_OK <= 0x7fffull /* 15-bit */
#define OBJ_posix_F_OK ((DeeObject *)&posix_F_OK)
PRIVATE DEFINE_UINT15(posix_F_OK, F_OK);
#elif F_OK <= 0x3fffffffull /* 30-bit */
#define OBJ_posix_F_OK ((DeeObject *)&posix_F_OK)
PRIVATE DEFINE_UINT30(posix_F_OK, F_OK);
#elif F_OK <= 0x1fffffffffffull /* 45-bit */
#define OBJ_posix_F_OK ((DeeObject *)&posix_F_OK)
PRIVATE DEFINE_UINT45(posix_F_OK, F_OK);
#elif F_OK <= 0xfffffffffffffffull /* 60-bit */
#define OBJ_posix_F_OK ((DeeObject *)&posix_F_OK)
PRIVATE DEFINE_UINT60(posix_F_OK, F_OK);
#else
#define OBJ_posix_F_OK ((DeeObject *)&posix_F_OK)
PRIVATE DEFINE_UINT75(posix_F_OK, F_OK);
#endif
#else /* F_OK >= 0 */
#if F_OK >= -0x4000ll /* 15-bit */
#define OBJ_posix_F_OK ((DeeObject *)&posix_F_OK)
PRIVATE DEFINE_INT15(posix_F_OK, F_OK);
#elif F_OK >= -0x20000000ll /* 30-bit */
#define OBJ_posix_F_OK ((DeeObject *)&posix_F_OK)
PRIVATE DEFINE_INT30(posix_F_OK, F_OK);
#elif F_OK >= -0x100000000000ll /* 45-bit */
#define OBJ_posix_F_OK ((DeeObject *)&posix_F_OK)
PRIVATE DEFINE_INT45(posix_F_OK, F_OK);
#elif F_OK >= -0x800000000000000ll /* 60-bit */
#define OBJ_posix_F_OK ((DeeObject *)&posix_F_OK)
PRIVATE DEFINE_INT60(posix_F_OK, F_OK);
#else
#define OBJ_posix_F_OK ((DeeObject *)&posix_F_OK)
PRIVATE DEFINE_INT75(posix_F_OK, F_OK);
#endif
#endif /* F_OK < 0 */
#else /* F_OK */
#define POSIX_F_OK_DEF /* nothing */
#endif /* !F_OK */
