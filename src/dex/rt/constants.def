/* Copyright (c) 2018-2025 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2018-2025 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */
/* WARNING: Autogenerated file "constants.def" */
#define RT_HASHOF_EMPTY_SEQUENCE_DEF \
	{ "HASHOF_EMPTY_SEQUENCE", (DeeObject *)&rt_HASHOF_EMPTY_SEQUENCE, MODSYM_FREADONLY | MODSYM_FCONSTEXPR },
#if DeeInt_IsSmallInt(DEE_HASHOF_EMPTY_SEQUENCE)
#define rt_HASHOF_EMPTY_SEQUENCE (*DeeInt_ForSmallInt(DEE_HASHOF_EMPTY_SEQUENCE))
#elif DEE_HASHOF_EMPTY_SEQUENCE >= 0
#if DEE_HASHOF_EMPTY_SEQUENCE <= 0x7fffull /* 15-bit */
PRIVATE DEFINE_UINT15(rt_HASHOF_EMPTY_SEQUENCE, DEE_HASHOF_EMPTY_SEQUENCE);
#elif DEE_HASHOF_EMPTY_SEQUENCE <= 0x3fffffffull /* 30-bit */
PRIVATE DEFINE_UINT30(rt_HASHOF_EMPTY_SEQUENCE, DEE_HASHOF_EMPTY_SEQUENCE);
#elif DEE_HASHOF_EMPTY_SEQUENCE <= 0x1fffffffffffull /* 45-bit */
PRIVATE DEFINE_UINT45(rt_HASHOF_EMPTY_SEQUENCE, DEE_HASHOF_EMPTY_SEQUENCE);
#elif DEE_HASHOF_EMPTY_SEQUENCE <= 0xfffffffffffffffull /* 60-bit */
PRIVATE DEFINE_UINT60(rt_HASHOF_EMPTY_SEQUENCE, DEE_HASHOF_EMPTY_SEQUENCE);
#else
PRIVATE DEFINE_UINT75(rt_HASHOF_EMPTY_SEQUENCE, DEE_HASHOF_EMPTY_SEQUENCE);
#endif
#else /* DEE_HASHOF_EMPTY_SEQUENCE >= 0 */
#if DEE_HASHOF_EMPTY_SEQUENCE >= -0x4000ll /* 15-bit */
PRIVATE DEFINE_INT15(rt_HASHOF_EMPTY_SEQUENCE, DEE_HASHOF_EMPTY_SEQUENCE);
#elif DEE_HASHOF_EMPTY_SEQUENCE >= -0x20000000ll /* 30-bit */
PRIVATE DEFINE_INT30(rt_HASHOF_EMPTY_SEQUENCE, DEE_HASHOF_EMPTY_SEQUENCE);
#elif DEE_HASHOF_EMPTY_SEQUENCE >= -0x100000000000ll /* 45-bit */
PRIVATE DEFINE_INT45(rt_HASHOF_EMPTY_SEQUENCE, DEE_HASHOF_EMPTY_SEQUENCE);
#elif DEE_HASHOF_EMPTY_SEQUENCE >= -0x800000000000000ll /* 60-bit */
PRIVATE DEFINE_INT60(rt_HASHOF_EMPTY_SEQUENCE, DEE_HASHOF_EMPTY_SEQUENCE);
#else
PRIVATE DEFINE_INT75(rt_HASHOF_EMPTY_SEQUENCE, DEE_HASHOF_EMPTY_SEQUENCE);
#endif
#endif /* DEE_HASHOF_EMPTY_SEQUENCE < 0 */
#define RT_HASHOF_UNBOUND_ITEM_DEF \
	{ "HASHOF_UNBOUND_ITEM", (DeeObject *)&rt_HASHOF_UNBOUND_ITEM, MODSYM_FREADONLY | MODSYM_FCONSTEXPR },
#if DeeInt_IsSmallInt(DEE_HASHOF_UNBOUND_ITEM)
#define rt_HASHOF_UNBOUND_ITEM (*DeeInt_ForSmallInt(DEE_HASHOF_UNBOUND_ITEM))
#elif DEE_HASHOF_UNBOUND_ITEM >= 0
#if DEE_HASHOF_UNBOUND_ITEM <= 0x7fffull /* 15-bit */
PRIVATE DEFINE_UINT15(rt_HASHOF_UNBOUND_ITEM, DEE_HASHOF_UNBOUND_ITEM);
#elif DEE_HASHOF_UNBOUND_ITEM <= 0x3fffffffull /* 30-bit */
PRIVATE DEFINE_UINT30(rt_HASHOF_UNBOUND_ITEM, DEE_HASHOF_UNBOUND_ITEM);
#elif DEE_HASHOF_UNBOUND_ITEM <= 0x1fffffffffffull /* 45-bit */
PRIVATE DEFINE_UINT45(rt_HASHOF_UNBOUND_ITEM, DEE_HASHOF_UNBOUND_ITEM);
#elif DEE_HASHOF_UNBOUND_ITEM <= 0xfffffffffffffffull /* 60-bit */
PRIVATE DEFINE_UINT60(rt_HASHOF_UNBOUND_ITEM, DEE_HASHOF_UNBOUND_ITEM);
#else
PRIVATE DEFINE_UINT75(rt_HASHOF_UNBOUND_ITEM, DEE_HASHOF_UNBOUND_ITEM);
#endif
#else /* DEE_HASHOF_UNBOUND_ITEM >= 0 */
#if DEE_HASHOF_UNBOUND_ITEM >= -0x4000ll /* 15-bit */
PRIVATE DEFINE_INT15(rt_HASHOF_UNBOUND_ITEM, DEE_HASHOF_UNBOUND_ITEM);
#elif DEE_HASHOF_UNBOUND_ITEM >= -0x20000000ll /* 30-bit */
PRIVATE DEFINE_INT30(rt_HASHOF_UNBOUND_ITEM, DEE_HASHOF_UNBOUND_ITEM);
#elif DEE_HASHOF_UNBOUND_ITEM >= -0x100000000000ll /* 45-bit */
PRIVATE DEFINE_INT45(rt_HASHOF_UNBOUND_ITEM, DEE_HASHOF_UNBOUND_ITEM);
#elif DEE_HASHOF_UNBOUND_ITEM >= -0x800000000000000ll /* 60-bit */
PRIVATE DEFINE_INT60(rt_HASHOF_UNBOUND_ITEM, DEE_HASHOF_UNBOUND_ITEM);
#else
PRIVATE DEFINE_INT75(rt_HASHOF_UNBOUND_ITEM, DEE_HASHOF_UNBOUND_ITEM);
#endif
#endif /* DEE_HASHOF_UNBOUND_ITEM < 0 */
#define RT_HASHOF_RECURSIVE_ITEM_DEF \
	{ "HASHOF_RECURSIVE_ITEM", (DeeObject *)&rt_HASHOF_RECURSIVE_ITEM, MODSYM_FREADONLY | MODSYM_FCONSTEXPR },
#if DeeInt_IsSmallInt(DEE_HASHOF_RECURSIVE_ITEM)
#define rt_HASHOF_RECURSIVE_ITEM (*DeeInt_ForSmallInt(DEE_HASHOF_RECURSIVE_ITEM))
#elif DEE_HASHOF_RECURSIVE_ITEM >= 0
#if DEE_HASHOF_RECURSIVE_ITEM <= 0x7fffull /* 15-bit */
PRIVATE DEFINE_UINT15(rt_HASHOF_RECURSIVE_ITEM, DEE_HASHOF_RECURSIVE_ITEM);
#elif DEE_HASHOF_RECURSIVE_ITEM <= 0x3fffffffull /* 30-bit */
PRIVATE DEFINE_UINT30(rt_HASHOF_RECURSIVE_ITEM, DEE_HASHOF_RECURSIVE_ITEM);
#elif DEE_HASHOF_RECURSIVE_ITEM <= 0x1fffffffffffull /* 45-bit */
PRIVATE DEFINE_UINT45(rt_HASHOF_RECURSIVE_ITEM, DEE_HASHOF_RECURSIVE_ITEM);
#elif DEE_HASHOF_RECURSIVE_ITEM <= 0xfffffffffffffffull /* 60-bit */
PRIVATE DEFINE_UINT60(rt_HASHOF_RECURSIVE_ITEM, DEE_HASHOF_RECURSIVE_ITEM);
#else
PRIVATE DEFINE_UINT75(rt_HASHOF_RECURSIVE_ITEM, DEE_HASHOF_RECURSIVE_ITEM);
#endif
#else /* DEE_HASHOF_RECURSIVE_ITEM >= 0 */
#if DEE_HASHOF_RECURSIVE_ITEM >= -0x4000ll /* 15-bit */
PRIVATE DEFINE_INT15(rt_HASHOF_RECURSIVE_ITEM, DEE_HASHOF_RECURSIVE_ITEM);
#elif DEE_HASHOF_RECURSIVE_ITEM >= -0x20000000ll /* 30-bit */
PRIVATE DEFINE_INT30(rt_HASHOF_RECURSIVE_ITEM, DEE_HASHOF_RECURSIVE_ITEM);
#elif DEE_HASHOF_RECURSIVE_ITEM >= -0x100000000000ll /* 45-bit */
PRIVATE DEFINE_INT45(rt_HASHOF_RECURSIVE_ITEM, DEE_HASHOF_RECURSIVE_ITEM);
#elif DEE_HASHOF_RECURSIVE_ITEM >= -0x800000000000000ll /* 60-bit */
PRIVATE DEFINE_INT60(rt_HASHOF_RECURSIVE_ITEM, DEE_HASHOF_RECURSIVE_ITEM);
#else
PRIVATE DEFINE_INT75(rt_HASHOF_RECURSIVE_ITEM, DEE_HASHOF_RECURSIVE_ITEM);
#endif
#endif /* DEE_HASHOF_RECURSIVE_ITEM < 0 */
